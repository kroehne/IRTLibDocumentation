[
  {
    "objectID": "download.html",
    "href": "download.html",
    "title": "Download & Installation",
    "section": "",
    "text": "Die IRTlib-Software wird für die Offline-Nutzung (z.Zt. für Windows-Betriebssysteme) und für die Online-Nutzung (in Form von Docker-Containern) bereitgestellt.\n\n\nDie IRTlib-Software (IRTlib Editor und IRTlib Player) für die Offline-Nutzung kann aus dem Abschnitt [Releases] des Repository https://github.com/DIPFtba/IRTlibDeploymentSoftware bezogen und heruntergeladen werden. Im Abschnitt Releases stehen zwei ZIP-Archive zum Download bereit.\n\nTestApp.Editor.Desktop.exe: Ist in TestApp.Editor.Desktop.zip und muss gestartet werden, umd den IRTlib Editor zu verwenden.\nTestApp.Player.Desktop.exe: Ist in TestApp.Player.Desktop.zip enthalten und muss gestartet werden, umd den IRTlib Player zu verwenden.\n\n\n\n\n\n\n\nHinweis: Versionen aus der aktuellen Entwicklung als Preview.\n\n\n\n\n\nBeachten Sie, dass der aktuellste Build im Abschnitt Preview des Release-Abschnitts des repository zu finden ist. Preview-Versionen sind die aktuellsten Version der Software, nach der letzten veröffentlichten Version der IRTlib Software. Um reproduzierbare Ergebnisse zu erhalten, sollten immer veröffentlichte Versionen verwendet werden.\n\n\n\n\n\n\n\n\n\nHinweis: Warnmeldung beim Programmstart\n\n\n\n\n\nDie automatisch erstellten Vorschauversionen des IRTlib Editors und IRTlib Players sind nicht signiert. Eine Warnmeldung des Betriebssystems muss akzeptiert werden, bevor die Programme ausgeführt werden können. Je nach Konfiguration des Betriebssystems können die ausführbaren Dateien der IRTlib Software auch als unbekannt eingestuft und vor ihrer Verwendung zusätzlich gewarnt werden.\n\n\n\n\n\nDer IRTlib Editor für die Offline-Nutzung wird als ZIP-Archiv (z.B. TestApp.Editor.Desktop.zip) bereitgestellt, das entpackt werden muss. Nach dem Entpacken des Editors kann die Anwendung TestApp.Editor.Desktop.exe auf einem Windows-Gerät gestartet werden.\nIn den Abschnitten Vorbereitung &gt; Übersicht, Vorbereitung &gt; Studien und Vorbereitung &gt; Erhebungsteile ist dokumentiert, wie man mit Hilfe von CBA ItemBuilder-Items Datenerhebungen vorbereitet und konfiguriert.\n\n\n\nDer IRTlib Player ist auch als Windows-Anwendung für die Offline-Nutzung verfügbar und wird als ZIP-Archiv (z.B. TestApp.Player.Desktop.zip) bereitgestellt. Nach dem Entpacken des IRTlib Player ist eine veröffentlichte Studienkonfiguration erforderlich, die zur Datenerhebung verwendet werden soll.\nNach dem Hinzufügen der als Studienkonfiguration bereitgestellten Inhalte einer veröffentlichten Studie kann die ausführbare Datei TestApp.Player.Desktop.exe gestartet werden (entweder mit oder ohne Startparameter).\n\nKiosk Mode: Der IRTlib Player kann über die ausführbare Datei TestApp.Player.Desktop.exe auf dem Computer, auf dem er lokal ausgeführt wird, direkt zur Datenerhebung verwendet werden. Die Studie kann dazu so konfiguriert werden, dass es in einem Kiosk Mode auf einem Bildschirm angezeigt wird und nur über den Task Manager oder das Testleitermenü beendet werden kann (siehe Vollbildmodus im Abschnitt Konfiguration zur Anzeige).\nLokaler Server: Der IRTlib Player kann aber auch als lokaler Server ausgeführt werden. Nach dem Start des Programms TestApp.Player.Server.exe kann eine konfigurierte Studie auch über Webbrowser oder andere Browser mit Kiosk Mode ausgeliefert werden (z.B. den Safe Exam Browser). Mit dieser Konfiguration lassen sich Datenerhebungen bspw. in Schulen ohne Internetverbindung aber mit einem als Bring-in-Server fungierenden Notebook durchführen.\n\nIn den Abschnitten Datenerhebung &gt; Übersicht, Datenerhebung &gt; Veröffentlichen & Export und Datenerhebung &gt; Integration & Auslieferung ist dokumentiert, wie man mit Hilfe des IRTlib Players in den unterschiedlichen Konstellationen Datenerhebungen durchführen kann.\n\n\n\n\nDie IRTlib-Software (IRTlib Editor und IRTlib Player) für die Online-Nutzung kann als Docker-Container bezogen werden. Ein Beispiel ist unter https://github.com/DIPFtba/IRTlibDeploymentSoftware zu finden.\nUm den Docker-Container zu verwenden, wird empfohlen, das Repository auf dem Zielgerät zu klonen und den Befehl ./start.sh im Ordner docker auszuführen (erfordert installiertes docker und docker compose), um die Software zu starten.\nWenn in der Datei docker-compose.yml nichts geändert wird, ist der Editor über Port 8002 und die Player-Software über Port 8001 erreichbar.\nIn dem Abschnitt Datenerhebung &gt; Integration & Auslieferung finden sich weitere Informationen zur Verwendung der Docker-Container."
  },
  {
    "objectID": "download.html#offline-windows",
    "href": "download.html#offline-windows",
    "title": "Download & Installation",
    "section": "",
    "text": "Die IRTlib-Software (IRTlib Editor und IRTlib Player) für die Offline-Nutzung kann aus dem Abschnitt [Releases] des Repository https://github.com/DIPFtba/IRTlibDeploymentSoftware bezogen und heruntergeladen werden. Im Abschnitt Releases stehen zwei ZIP-Archive zum Download bereit.\n\nTestApp.Editor.Desktop.exe: Ist in TestApp.Editor.Desktop.zip und muss gestartet werden, umd den IRTlib Editor zu verwenden.\nTestApp.Player.Desktop.exe: Ist in TestApp.Player.Desktop.zip enthalten und muss gestartet werden, umd den IRTlib Player zu verwenden.\n\n\n\n\n\n\n\nHinweis: Versionen aus der aktuellen Entwicklung als Preview.\n\n\n\n\n\nBeachten Sie, dass der aktuellste Build im Abschnitt Preview des Release-Abschnitts des repository zu finden ist. Preview-Versionen sind die aktuellsten Version der Software, nach der letzten veröffentlichten Version der IRTlib Software. Um reproduzierbare Ergebnisse zu erhalten, sollten immer veröffentlichte Versionen verwendet werden.\n\n\n\n\n\n\n\n\n\nHinweis: Warnmeldung beim Programmstart\n\n\n\n\n\nDie automatisch erstellten Vorschauversionen des IRTlib Editors und IRTlib Players sind nicht signiert. Eine Warnmeldung des Betriebssystems muss akzeptiert werden, bevor die Programme ausgeführt werden können. Je nach Konfiguration des Betriebssystems können die ausführbaren Dateien der IRTlib Software auch als unbekannt eingestuft und vor ihrer Verwendung zusätzlich gewarnt werden.\n\n\n\n\n\nDer IRTlib Editor für die Offline-Nutzung wird als ZIP-Archiv (z.B. TestApp.Editor.Desktop.zip) bereitgestellt, das entpackt werden muss. Nach dem Entpacken des Editors kann die Anwendung TestApp.Editor.Desktop.exe auf einem Windows-Gerät gestartet werden.\nIn den Abschnitten Vorbereitung &gt; Übersicht, Vorbereitung &gt; Studien und Vorbereitung &gt; Erhebungsteile ist dokumentiert, wie man mit Hilfe von CBA ItemBuilder-Items Datenerhebungen vorbereitet und konfiguriert.\n\n\n\nDer IRTlib Player ist auch als Windows-Anwendung für die Offline-Nutzung verfügbar und wird als ZIP-Archiv (z.B. TestApp.Player.Desktop.zip) bereitgestellt. Nach dem Entpacken des IRTlib Player ist eine veröffentlichte Studienkonfiguration erforderlich, die zur Datenerhebung verwendet werden soll.\nNach dem Hinzufügen der als Studienkonfiguration bereitgestellten Inhalte einer veröffentlichten Studie kann die ausführbare Datei TestApp.Player.Desktop.exe gestartet werden (entweder mit oder ohne Startparameter).\n\nKiosk Mode: Der IRTlib Player kann über die ausführbare Datei TestApp.Player.Desktop.exe auf dem Computer, auf dem er lokal ausgeführt wird, direkt zur Datenerhebung verwendet werden. Die Studie kann dazu so konfiguriert werden, dass es in einem Kiosk Mode auf einem Bildschirm angezeigt wird und nur über den Task Manager oder das Testleitermenü beendet werden kann (siehe Vollbildmodus im Abschnitt Konfiguration zur Anzeige).\nLokaler Server: Der IRTlib Player kann aber auch als lokaler Server ausgeführt werden. Nach dem Start des Programms TestApp.Player.Server.exe kann eine konfigurierte Studie auch über Webbrowser oder andere Browser mit Kiosk Mode ausgeliefert werden (z.B. den Safe Exam Browser). Mit dieser Konfiguration lassen sich Datenerhebungen bspw. in Schulen ohne Internetverbindung aber mit einem als Bring-in-Server fungierenden Notebook durchführen.\n\nIn den Abschnitten Datenerhebung &gt; Übersicht, Datenerhebung &gt; Veröffentlichen & Export und Datenerhebung &gt; Integration & Auslieferung ist dokumentiert, wie man mit Hilfe des IRTlib Players in den unterschiedlichen Konstellationen Datenerhebungen durchführen kann."
  },
  {
    "objectID": "download.html#online-docker",
    "href": "download.html#online-docker",
    "title": "Download & Installation",
    "section": "",
    "text": "Die IRTlib-Software (IRTlib Editor und IRTlib Player) für die Online-Nutzung kann als Docker-Container bezogen werden. Ein Beispiel ist unter https://github.com/DIPFtba/IRTlibDeploymentSoftware zu finden.\nUm den Docker-Container zu verwenden, wird empfohlen, das Repository auf dem Zielgerät zu klonen und den Befehl ./start.sh im Ordner docker auszuführen (erfordert installiertes docker und docker compose), um die Software zu starten.\nWenn in der Datei docker-compose.yml nichts geändert wird, ist der Editor über Port 8002 und die Player-Software über Port 8001 erreichbar.\nIn dem Abschnitt Datenerhebung &gt; Integration & Auslieferung finden sich weitere Informationen zur Verwendung der Docker-Container."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Über / About",
    "section": "",
    "text": "An diesem Manual mitgeholfen haben:\n\nMaximilian Sattler\nCarla Burkart\n\n\n\n\n\n\n\nIn Entwicklung\n\n\n\n\nÜberarbeitung, sprachliche Korrektur und Übersetzung der Anleitung sind gerade in Arbeit…\n\n\n\n\n\n\nDie Entwicklung der IRTlib Software erfolgt bei Software-Driven."
  },
  {
    "objectID": "about.html#danksagung",
    "href": "about.html#danksagung",
    "title": "Über / About",
    "section": "",
    "text": "An diesem Manual mitgeholfen haben:\n\nMaximilian Sattler\nCarla Burkart\n\n\n\n\n\n\n\nIn Entwicklung\n\n\n\n\nÜberarbeitung, sprachliche Korrektur und Übersetzung der Anleitung sind gerade in Arbeit…"
  },
  {
    "objectID": "about.html#entwicklung",
    "href": "about.html#entwicklung",
    "title": "Über / About",
    "section": "",
    "text": "Die Entwicklung der IRTlib Software erfolgt bei Software-Driven."
  },
  {
    "objectID": "development.html",
    "href": "development.html",
    "title": "Development",
    "section": "",
    "text": "Editor for defining Codebooks\nEditor for managing IRT Parameters for ItemPools\nIRT-Integration in Blockly for MST/CAT/MCAT/…\nWebservice Integration required for NLP/Scoring/AI"
  },
  {
    "objectID": "development.html#missing-features-in-version-1.1",
    "href": "development.html#missing-features-in-version-1.1",
    "title": "Development",
    "section": "",
    "text": "Editor for defining Codebooks\nEditor for managing IRT Parameters for ItemPools\nIRT-Integration in Blockly for MST/CAT/MCAT/…\nWebservice Integration required for NLP/Scoring/AI"
  },
  {
    "objectID": "github.html",
    "href": "github.html",
    "title": "Github Repositorien / Github Repositories",
    "section": "",
    "text": "Die IRTlib Software ist freie Forschungssoftware im Sinne von Open Science. Sie kann für nicht-kommerzielle Anwendungen verwendet werden.\nVorgeschlagene Zitierung:\n\nKroehne, U. (2023). IRTlib Documentation: Software for the administration and delivery of computer-based assessments [IRTlib Dokumentation: Software für die Verwaltung und Auslieferung computergestützter Assessments]. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10441352\n\n\n\n\n\n\n\nHinweis\n\n\n\nÜbersetzung: Wenn Sie uns bei der Übersetzung dieser Software helfen wollen, finden Sie hier weitere Informationen.\n\n\n\n\n\nAktuelle Versionen der IRTlib Software (Windows und Docker): GitHub\nDokumentation: GitHub\n\n\n\n\n\nDie IRTlib Software erlaubt die Administration von Assessmentinhalten, die mit dem CBA ItemBuilder erstellt wurden.\n\n\n\nAktuelle Versionen des CBA ItemBuilder (Windows): https://www.itembuilder.de/software\n\n\n\n\nSource Code und Material zum CBA ItemBuilder sind aufgeteilt auf mehrere Repositorien:\n\nCBA ItemBuilder (Desktop Anwendung): GitHub (In Vorbereitung / noch privat)\nLaufzeitumgebung / Runtime: GitHub (In Vorbereitung / noch privat)\nAusführungsumgebung / Execution Environment für Entwickler: GitHub (In Vorbereitung / noch privat)\nTechnische Dokumentation: GitHub (In Vorbereitung / noch privat)\nTechnische Beispielitems: GitHub(In Vorbereitung / noch privat)\n\n\n\n\nOnline-Dokumentation\n\nHTML (interaktiv): https://cba.itembuilder.de\n\nPDF (statisch): Open-Assessments-with-CBA-ItemBuilder.pdf\nQuellen GitHub (In Vorbereitung / noch privat)\n\nVorgeschlagene Zitierung:\n\nKroehne, U. (2023). Open Computer-based Assessment with the CBA ItemBuilder. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10359757"
  },
  {
    "objectID": "github.html#irtlib-software",
    "href": "github.html#irtlib-software",
    "title": "Github Repositorien / Github Repositories",
    "section": "",
    "text": "Die IRTlib Software ist freie Forschungssoftware im Sinne von Open Science. Sie kann für nicht-kommerzielle Anwendungen verwendet werden.\nVorgeschlagene Zitierung:\n\nKroehne, U. (2023). IRTlib Documentation: Software for the administration and delivery of computer-based assessments [IRTlib Dokumentation: Software für die Verwaltung und Auslieferung computergestützter Assessments]. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10441352\n\n\n\n\n\n\n\nHinweis\n\n\n\nÜbersetzung: Wenn Sie uns bei der Übersetzung dieser Software helfen wollen, finden Sie hier weitere Informationen.\n\n\n\n\n\nAktuelle Versionen der IRTlib Software (Windows und Docker): GitHub\nDokumentation: GitHub"
  },
  {
    "objectID": "github.html#cba-itembuilder",
    "href": "github.html#cba-itembuilder",
    "title": "Github Repositorien / Github Repositories",
    "section": "",
    "text": "Die IRTlib Software erlaubt die Administration von Assessmentinhalten, die mit dem CBA ItemBuilder erstellt wurden.\n\n\n\nAktuelle Versionen des CBA ItemBuilder (Windows): https://www.itembuilder.de/software\n\n\n\n\nSource Code und Material zum CBA ItemBuilder sind aufgeteilt auf mehrere Repositorien:\n\nCBA ItemBuilder (Desktop Anwendung): GitHub (In Vorbereitung / noch privat)\nLaufzeitumgebung / Runtime: GitHub (In Vorbereitung / noch privat)\nAusführungsumgebung / Execution Environment für Entwickler: GitHub (In Vorbereitung / noch privat)\nTechnische Dokumentation: GitHub (In Vorbereitung / noch privat)\nTechnische Beispielitems: GitHub(In Vorbereitung / noch privat)\n\n\n\n\nOnline-Dokumentation\n\nHTML (interaktiv): https://cba.itembuilder.de\n\nPDF (statisch): Open-Assessments-with-CBA-ItemBuilder.pdf\nQuellen GitHub (In Vorbereitung / noch privat)\n\nVorgeschlagene Zitierung:\n\nKroehne, U. (2023). Open Computer-based Assessment with the CBA ItemBuilder. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10359757"
  },
  {
    "objectID": "data-collection-player-integration.html",
    "href": "data-collection-player-integration.html",
    "title": "Datenerhebung: In IRTlib Player Importieren / Data Collection: Import into IRTlib Player",
    "section": "",
    "text": "Im Folgenden ist beschrieben, wie eine mit einem IRTlib Editor erstellte Studienkonfiguration, die als ZIP-Archiv vorliegt, verwendet werden kann.\n\n\n\n\n\n\nVeröffentlichte Version erforderlich\n\n\n\nFür die Datenerhebung mit einem IRTlib Player ist eine veröffentlichte Version einer Studie notwendig.\n\n\nWenn eine versiegelte Studienkonfiguration aus dem IRTlib Editor exportiert wurde, kann diese in einen IRTlib Player integriert werden.\nZurzeit werden zwei Optionen unterstützt:\n\nAutomatischer Import aus ZIP-Archiv\nManueller Import aus ZIP-Archiv\n\nDer Automatische Import ist nur für die erste Studie in einem IRTlib Player möglich. Sollen mehrere Studien in einem IRTlib Player parallel verwendet werden, muss ein Manueller Import durchgeführt werden.\n\n\nFür einen automatischen Import einer als ZIP-Archiv vorliegenden Studie in einem Offline IRTlib Player, kann der Player zunächst über die ausführbare Datei TestApp.Player.Desktop.exe gestartet werden.\nWurde dieser IRTlib Player noch nicht mit einer Studie konfiguriert (d.h. wurde der Player bspw. wie unter Download beschrieben direkt von dem Github-Repositoy heruntergeladen), dann erscheint folgender Dialog:\n\nDurch Klicken der Schaltfläche Studie Bereitstellen kann das ZIP-Archiv direkt geöffnet werden. Es wird dann automatisch in den IRTlib Player eingefügt und kann über die im Abschnitt Login der Studie konfigurierte Weise verwendet werden.\n\n\n\nWenn kein automatischer Import möglich oder gewollt ist, kann der Inhalt des ZIP-Archivs einer Studie auch manuell in das dafür vorgesehene Verzeichnis des IRTlib Players integriert werden.\nJedes ZIP-Archiv mit einer Studienkonfiguration, welches aus dem IRTlib Editor exportiert wurde, enthält drei Verzeichnisse. Die ZIP-Archive lassen {StudyName.zip} sich z.B. mit dem Windows Explorer öffnen:\n\nUm die Studie in einen IRTlib Player zu integrieren, kann der Inhalt dieser drei Verzeichnisse nun z.B. in das Programmverzeichnis eines Offline IRTlib Players integriert werden.\n\n\n\n\n\n\n\nSchritt\nBeschreibung\n\n\n\n\n1.\nPlayer (TestApp.Player.zip) entpacken. Das kann bspw. über den Windows Explorer erfolgen:\n\n\n\n\n\n\n2.\nIn das entpackte Verzeichnis navigieren:\n\n\n\n\n\n\n3.\nErstellen Sie einen neuen Ordner Content innerhalb des Player-Ordners (d.h. TestApp.Player/Content/). Wenn bereits eine Studie konfiguriert ist, dann existiert der Ordner Content bereits.\n\n\n\n\n\n\n4.\nKopieren Sie die drei Ordner ItemPool, Runtime und Studies aus der heruntergeladenen Studie {StudyName.zip} in den Content-Ordner des Players.\n\n\n\n\n\n\n5.\nStarten der Datei TestApp.Player.Desktop.exe\n\n\n6.\nWenn nötig akzeptieren Sie die folgende Warnung:\n\n\n\n\n\n\n\nAnalog zu dem hier beschriebenen Vorgehen erfolgt auch der Import von Studien in einen Online IRTlib Player. Hierfür ist für die Vorbereitung Zugriff auf das im docker-compse.yml-File definierte Volume /app/Content notwendig.\n\n\n\n\nDie mit einem IRTlib Editor erstellten Studienkonfigurationen sind mit unterschiedlichen Varianten des IRTlib Players verwendbar.\nIm Moment werden drei Varianten bereitgestellt:\n\nDesktop-Version (Windows)\nLokale Server-Version (Windows)\nOnline Version (Docker)\n\n\n\nBasale Konfigurationen des IRTlib Player (Darstellung in einem Fenstermodus vs. Vollbildmodus) sind Teil der Studienkonfiguration. Nur Studien mit gleichen Einstellungen bzgl. der Darstellung können in einem Offline IRTlib Player gleichzeitig verwendet werden. Mehrere Kopien eines Offline IRTlib Players auf einem Computer sind möglich.\nUm den (Offline) IRTlib Player auf einem Computer zu starten, muss die ausführbare Datei TestApp.Player.Desktop.exe gestartet werden.\nDatenspeicherung: Die während einer Datenerhebung mit dem Offline IRTlib Player erhobenen Daten werden in einem Verzeichnis lokal gespeichert. Das Verzeichnis und der Dateiname für die Rohdatenspeicherung sind in der Studie konfiguriert und können mithilfe von Startup-Parametern angepasst werden. Als Dateiname der Rohdatenarchive wird der Benutzername bzw. die erstellte UUID verwendet. Sollte in einem (Offline) IRTlib Player der Benutzername mehrfach verwendet werden, d.h. wenn beim Beenden des IRTlib Players bereits ein Rohdatenarchiv mit diesem Dateinamen existiert, wird dieses nicht überschrieben, sondern es wird ein Suffix angehängt (z.B. PersonIdentifier_1.zip).\nStartup-Parameter: Für die Integration des Offline IRTlib Players in programmierte Abläufe sind möglich. Anmeldedaten (Benutzername, Benutzername + Passwort, Token), die in einer Studie konfiguriert sind, können als so-genannte Startup-Parameter übergeben werden. Diese Parameter werden dann an den Aufruf von TestApp.Player.Desktop.exe angehängt.\nBeispiel:\n\nTestApp.Player.Desktop.exe /RawDataFolder=\"..\\\\myDataFolder\"\n\nGültige Startup-Parameter sind:\n\n/AutoLoginCreateWithTest=\"{StudienName}\": Fordert die Administration der Studie mit der Bezeichnung {StudienName} an.\n/AutoLoginUserName=\"{PersonIdentifier}\": Übergibt die Anmeldeinformation {PersonIdentifier} als Benutzername.\n/MyBlocklyVariable=\"123\": Übergibt den Wert 123 für die Blockly-Variable MyBlocklyVariable.\n/MonitoringFile=\"..\\\\last-run.json\": Pfad und Dateiname der so-genannten Monitoring-Datei.\n/RawDataFolder=\"..\\\\myDataFolder\": Pfad zu dem Verzeichnis, in welchem die Rohdatenarchive gespeichert werden.\n/volume=\"0.5\": Wert der verwendet werden soll, um die Systemlautstärke zu setzen (zwischen 0 und 1).\n/minvolume=\"0.2\": Wert der als untere Schwelle der Lautstärke verwendet werden soll (zwischen 0 und 1).\n/maxvolume=\"0.8\": Wert der als obere Schwelle der Lautstärke verwendet werden soll (zwischen 0 und 1).\n\nMehrere Startup-Parameter nacheinander sind möglich (getrennt durch Leerzeichen).\nTechnische Konfigurationen, die nicht per Startup-Parameter übergeben werden sollen, können auch über die Datei appsettings.json, welche im Verzeichnis TestApp.Player enthalten ist, festgelegt werden.\nIm Abschnitt Chromely kann bspw. die Lautstärkekonfigurationen vorgenommen werden:\n{\n  ...\n  \"Chromely\": {\n    ...\n    \"Audio\": {\n      \"MinVolume\": 0,\n      \"MaxVolume\": 1,\n      \"StartVolume\": 0.5\n    }\n  }\n}\nPrüfung von Voraussetzungen: Der IRTlib Player sollte auf Windows-Computern (aktuell unterstützt ab Windows 10) ohne weitere Installation oder Laufzeitvoraussetzungen ausgeführt werden können. Spezielle Konfigurationen, Virenscanner usw. können die Ausführung aber unterbinden. Ein Tool zum Prüfen von Voraussetzungen kann bspw. aufbauend auf diesem Beispiel (IRTlibReadiness) erstellt werden.\n\n\n\n\n\n\nWichtiger Hinweis\n\n\n\nDie bereitgestellte Windows-Version des IRTlib Player ermöglicht einen einfachen Kiosk-Modus, der nur für Computer mit nur einem Bildschirm (z.B. Notebooks) vorgesehen ist. Für eine Prüfungssichere Kiosk-Lösung kann die Offline-Version des IRTlib Players als lokaler Server mit weiterer Software (wie bspw. dem Safe Exam Browser) kombiniert werden.\n\n\n\n\n\nDie über das Github-Repository im Abschnitt Releases verfügbaren ZIP-Archive des Offline IRTlib Players enthalten parallel zu der Anwendung mit integriertem Browser (TestApp.Player.Desktop.exe) auch eine lokale Server-Version, welche über die ausführbare Datei TestApp.Player.Server.exe gestartet werden kann.\n\n\n\n\n\n\n\nWichtiger Hinweis\n\n\n\nDie Version TestApp.Player.Server.exe ist gedacht für einen Offline-Betrieb in Bring-in Netzwerken, z.B. wenn WLAN-Router und Server-Notebook in Schulen gebracht werden. Diese Version ist nicht für Online-Ehrebungen gedacht (wofür die Docker-Version bereitgestellt wird).\n\n\n\n\n\n\nIntegration: Für die Durchführung einer Datenerhebung sollte das Docker-Image des IRTlib Players nur über https-gesicherte Verbindungen erreichbar sein. Das kann bspw. mithilfe eines als Reverse Proxy konfigurierten zusätzlichen nginx realisiert werden.\nZugriff auf Editor: Für unbefugte Personen, die nicht mit der Studienvorbereitung betraut sind, darf kein Zugriff auf den IRTlib Editor möglich sein. Über das Github-Repository werden IRTlib Editor und IRTlib Player bereitgestellt. Für eine operative Datenerhebung ist es nicht notwendig, den IRTlib Editor online zu betreiben, da die Studienvorbereitung auch mit der Offline-Version des IRTlib Editors erstellt werden kann. Wird der IRTlib Editor online gehostet, muss er vor dem Zugriff Unbefugter geschützt werden.\nZugriff auf Verzeichnisse: In den im docker-compse.yml-File definierten Volumes /app/Content (IRTlib Player) und /app/data (IRTlib Editor) sind die Iteminhalte hinterlegt, die für ein Assessment konfiguriert werden. Um den Schutz von Instrumenten sicherzustellen, darf kein Zugriff für Unbefugte auf diese Volumes möglich sein.\nDatenspeicherung: Die während einer Datenerhebung mit dem Online IRTlib Player erhobenen Daten werden in dem Volume app/result gespeichert. Sie können von dort als Verzeichnisse (ein Verzeichnis je Session) oder als Rohdatenarchive über eine API abgerufen werden (wenn ein API-key definiert ist).\n\n\n\n\n\n\nHinweis\n\n\n\nBei Verwendung der Docker-Container können Assessmentinhalte und Daten online zugreifbar sein. Assessmentinhalte sind nur über den in der Studienkonfiguration definierten Loginmodus geschützt. Personendaten und Assessmentinhalte könne zusätzlich zugreifbar sein, wenn ein API-key definiert ist.\n\n\nKonfiguration des Players: Zentral für die technische Konfiguration des Players ist die Datei appsettings.json, welche im Verzeichnis TestApp.Player enthalten ist. In dieser Datei können u.a. drei verschiedene API-Keys (also Zugriffsschlüssel) hinterlegt werden, in dem sie in folgender JSON-Struktur hinterlegt werden, bevor der Docker-Container gestartet wird:\n\"API\": {\n   \"ExternalExportKey\": \"\",\n   \"DevelopmentKey\": \"\",\n   \"LoginManagementKeys\": []\n }\nDie API-Keys haben die folgenden Funktionen:\n\nExternalExportKey: Über diesen Schlüssel erhält man Zugang zu den mit dem IRTlib Player erhobenen Daten. Der Zugriff auf die Daten kann bspw. über das R-Paket LogFSM erfolgen, wie im Abschnitt Datenabruf beschrieben.\n\n\n\n\n\n\n\nRouten zum Direkten Zugriff\n\n\n\n\n\nDie Liste der bearbeiteten Session, d.h. die Session-Identifier lassen sich mit einem API-Key für ExternalExportKey über folgenden Aufruf als JSON abrufen:\nhttps://{U}/{S}/api/session/?apiKey={K}\n\n{U} ist die URL des IRTlib Players\n{S} ist der Bezeichner der Studie\n{K} ist die ExternalExportKey wie in der appsettings.json definiert\n\nMit einer bekanntem Session-Identifier lassen sich dann die Rohdaten über folgende Abruf mit einem API-Key für ExternalExportKey beziehen:\nhttps://{U}/{S}/api/session/{ID}/result?apiKey={K}\n\n{ID} ist der Session-Identifier (z.B. der Benutzername, je nach Konfiguration des Logins)\n\n\n\n\n\nDevelopmentKey: Dieser API-Key ist für das Anpassen von Studienkonfigurationen in einem laufenden Player vorgesehen.\n\n\n\n\n\n\n\nUnder Development\n\n\n\nDiese Funktion ist gerade in Entwicklung.\n\n\n\nLoginManagementKeys: Diese Liste von API-Keys ist für das Anpassen Zugangsdaten (Accounts) in einem laufenden Player vorgesehen.\n\n\n\n\n\n\n\nUnder Development\n\n\n\nDiese Funktion ist gerade in Entwicklung.\n\n\nMonitoring: (Eine Methode zur Überwachung von Docker-Containern ist in Entwicklung).\n\n\n\n\nMit der Integration einer Studienkonfiguration in einen IRTlib Player ist die Vorbereitung noch nicht abgeschlossen. Bevor eine Datenerhebung mit der IRTlib Software begonnen werden kann, sollten folgende Tests durchlaufen werden:\n(Tests innerhalb der CBA ItemBuilder-Preview): Bevor die Konfiguration einer Studie und eines Erhebungsteils mit CBA ItemBuilder-Tasks erfolgt, sollte diese im Hinblick auf Darstellung, Funktionalität und Scoring bereits in der Preview des CBA ItemBuilder getestet sein.\nFunktionale Tests: Insbesondere wenn CBA ItemBuilder-Tasks mit der Auslieferungsplattform interagieren (wie bspw. Login-Items), sollten funktionale Tests (d.h. Tests von konkreten Funktionen) in der Auslieferungssoftware erfolgen. Das betrifft auch die Navigation zwischen Items und natürlich die in der Auslieferungsumgebung konfigurierte Ablaufsteuerung.\nCross-Browser-Testung: Werden Studien nicht mit dem Offline IRTlib Player durchgeführt (welcher seinen eigenen Browser mitbringt) und insbesondere wenn über sogenannte ExternalPageFrames (d.h. iframes) neu oder spezifisch programmierte JavaScript/HTML5-Inhalte innerhalb der CBA ItemBuilder-Tasks* verwendet werde, sollte eine Testung in verschiedenen Browsern erfolgen.\nPerformanz-Tests: Wenn große Mediendateien (Videos, Audiodateien) in den CBA ItemBuilder-Tasks enthalten sind, kann es ratsam sein, die Durchführbarkeit des Assessments auch unter ungünstigen Netzwerkbedingungen (z.B. geringe Bandbreite, lange Latenzen, Verbindungsabbrüche usw.) zu testen.\nLast-Tests: Wenn sehr viele Testteilnehmer parallel (online) getestet werden sollen, kann es ratsam sein, das Lastverhalten der Auslieferung (und bspw. die für den Docker-Container verfügbaren Ressourcen) vorab abzustimmen.\nDatenablageprüfung: In jedem Fall sollte die Passung der Scoring-Definition innerhalb der CBA ItemBuilder-Tasks und der Konfiguration im IRTlib Editor geprüft und eine Datenablageprüfung gemacht werden. Damit ist gemeint, dass vor Erhebungsstart synthetische Klickmuster (also Antworten) eingegeben und mit den im Datensatz gespeicherten Antworten verglichen werden. Um bei der späteren Überprüfung Eingabefehler gut erkennen zu können, hat es sich bewährt, für die Datenablageprüfung Bildschirmvideos parallel aufzuzeichnen.\nSmoke-Test: Die abschließende Form des Testens ist ein Durchlauftest in dem fertig konfigurierten Setting aus Studie in einem IRTlib Player. Die Erhebung sollte richtig dargestellt werden und ein lesbare Rohdatenarchiv sollte entstehen.\n\n\n\n\n\n\n\n\nHinweis\n\n\n\nDie Bereitstellung der freien Forschungssoftware IRTlib Editor und IRTlib Player erfolgt ohne Gewähr und es kann keine Haftung für fehlende Daten, Datenverlust oder kompromittierte Daten usw. übernommen werden.\n\n\nAllgemeingültige Empfehlungen zu (unbedingt) notwendigen Tests sind schwer zu formulieren, die folgende Tabelle ist deshalb als unverbindliche Empfehlung zu verstehen, welche im konkrete Fall abzuwägen ist.\n\n\n\n\n\n\n\n\nTest\nEmpfehlung\nBedingung\n\n\n\n\nCBA ItemBuilder-Preview\nImmer\n(Fehler in Darstellung, Verhalten und Scoring, die sich bereits bei der Itemerstellung finden lassen, sollten vor der Erstellung einer Studienkonfiguration systematisch getestet und ausgeschlossen werden.)\n\n\nFunktionale Tests\nBei Bedarf\nNur wenn IRTlib Player und CBA ItemBuilder-Tasks interagieren müssen und bezogen auf im IRTlib Editor definierte Funktionalität (z.B. antwortabhängige Verzweigungen).\n\n\nCross-Browser-Testung\nBei Bedarf\nNur wenn IRTlib Player online verwendet wird und die Browser nicht den Browsern entsprechen, welche bereits für die CBA ItemBuilder-Preview verwendet wurden.\n\n\nPerformanz-Tests\nBei Bedarf\nWenn große Multimedia-Teile enthalten sind oder wenn mit schlechter Netzwerkverbindung zu rechnen ist.\n\n\nLast-Tests\nBei Bedarf\nNur wenn Online IRTlib Player mit vielen parallelen Tests administriert werden soll.\n\n\nDatenablageprüfung\nImmer\nPrüfung aller Daten (inkl. Log-Daten, wenn diese für die Auswertung benötigt werden).\n\n\nSmoke-Test\nImmer\nSmoke-Testung bei jeder Version, vor allem um versehentliche Konfigurationsfehler in letzter Minute auszuschließen.\n\n\n\n\n\n\nIst die Studie in einem IRTlib Player konfiguriert und getestet, kann die Datenerhebung erfolgen. Je länger die Feldzeit ist, desto wichtiger sind regelmäßige Backups der erhobenen Daten bzw. ein regelmäßiger Abzug der gesammelten Rohdatenarchive von der Erhebungshardware."
  },
  {
    "objectID": "data-collection-player-integration.html#konfiguration-importieren",
    "href": "data-collection-player-integration.html#konfiguration-importieren",
    "title": "Datenerhebung: In IRTlib Player Importieren / Data Collection: Import into IRTlib Player",
    "section": "",
    "text": "Im Folgenden ist beschrieben, wie eine mit einem IRTlib Editor erstellte Studienkonfiguration, die als ZIP-Archiv vorliegt, verwendet werden kann.\n\n\n\n\n\n\nVeröffentlichte Version erforderlich\n\n\n\nFür die Datenerhebung mit einem IRTlib Player ist eine veröffentlichte Version einer Studie notwendig.\n\n\nWenn eine versiegelte Studienkonfiguration aus dem IRTlib Editor exportiert wurde, kann diese in einen IRTlib Player integriert werden.\nZurzeit werden zwei Optionen unterstützt:\n\nAutomatischer Import aus ZIP-Archiv\nManueller Import aus ZIP-Archiv\n\nDer Automatische Import ist nur für die erste Studie in einem IRTlib Player möglich. Sollen mehrere Studien in einem IRTlib Player parallel verwendet werden, muss ein Manueller Import durchgeführt werden.\n\n\nFür einen automatischen Import einer als ZIP-Archiv vorliegenden Studie in einem Offline IRTlib Player, kann der Player zunächst über die ausführbare Datei TestApp.Player.Desktop.exe gestartet werden.\nWurde dieser IRTlib Player noch nicht mit einer Studie konfiguriert (d.h. wurde der Player bspw. wie unter Download beschrieben direkt von dem Github-Repositoy heruntergeladen), dann erscheint folgender Dialog:\n\nDurch Klicken der Schaltfläche Studie Bereitstellen kann das ZIP-Archiv direkt geöffnet werden. Es wird dann automatisch in den IRTlib Player eingefügt und kann über die im Abschnitt Login der Studie konfigurierte Weise verwendet werden.\n\n\n\nWenn kein automatischer Import möglich oder gewollt ist, kann der Inhalt des ZIP-Archivs einer Studie auch manuell in das dafür vorgesehene Verzeichnis des IRTlib Players integriert werden.\nJedes ZIP-Archiv mit einer Studienkonfiguration, welches aus dem IRTlib Editor exportiert wurde, enthält drei Verzeichnisse. Die ZIP-Archive lassen {StudyName.zip} sich z.B. mit dem Windows Explorer öffnen:\n\nUm die Studie in einen IRTlib Player zu integrieren, kann der Inhalt dieser drei Verzeichnisse nun z.B. in das Programmverzeichnis eines Offline IRTlib Players integriert werden.\n\n\n\n\n\n\n\nSchritt\nBeschreibung\n\n\n\n\n1.\nPlayer (TestApp.Player.zip) entpacken. Das kann bspw. über den Windows Explorer erfolgen:\n\n\n\n\n\n\n2.\nIn das entpackte Verzeichnis navigieren:\n\n\n\n\n\n\n3.\nErstellen Sie einen neuen Ordner Content innerhalb des Player-Ordners (d.h. TestApp.Player/Content/). Wenn bereits eine Studie konfiguriert ist, dann existiert der Ordner Content bereits.\n\n\n\n\n\n\n4.\nKopieren Sie die drei Ordner ItemPool, Runtime und Studies aus der heruntergeladenen Studie {StudyName.zip} in den Content-Ordner des Players.\n\n\n\n\n\n\n5.\nStarten der Datei TestApp.Player.Desktop.exe\n\n\n6.\nWenn nötig akzeptieren Sie die folgende Warnung:\n\n\n\n\n\n\n\nAnalog zu dem hier beschriebenen Vorgehen erfolgt auch der Import von Studien in einen Online IRTlib Player. Hierfür ist für die Vorbereitung Zugriff auf das im docker-compse.yml-File definierte Volume /app/Content notwendig."
  },
  {
    "objectID": "data-collection-player-integration.html#auslieferungen-konfigurieren",
    "href": "data-collection-player-integration.html#auslieferungen-konfigurieren",
    "title": "Datenerhebung: In IRTlib Player Importieren / Data Collection: Import into IRTlib Player",
    "section": "",
    "text": "Die mit einem IRTlib Editor erstellten Studienkonfigurationen sind mit unterschiedlichen Varianten des IRTlib Players verwendbar.\nIm Moment werden drei Varianten bereitgestellt:\n\nDesktop-Version (Windows)\nLokale Server-Version (Windows)\nOnline Version (Docker)\n\n\n\nBasale Konfigurationen des IRTlib Player (Darstellung in einem Fenstermodus vs. Vollbildmodus) sind Teil der Studienkonfiguration. Nur Studien mit gleichen Einstellungen bzgl. der Darstellung können in einem Offline IRTlib Player gleichzeitig verwendet werden. Mehrere Kopien eines Offline IRTlib Players auf einem Computer sind möglich.\nUm den (Offline) IRTlib Player auf einem Computer zu starten, muss die ausführbare Datei TestApp.Player.Desktop.exe gestartet werden.\nDatenspeicherung: Die während einer Datenerhebung mit dem Offline IRTlib Player erhobenen Daten werden in einem Verzeichnis lokal gespeichert. Das Verzeichnis und der Dateiname für die Rohdatenspeicherung sind in der Studie konfiguriert und können mithilfe von Startup-Parametern angepasst werden. Als Dateiname der Rohdatenarchive wird der Benutzername bzw. die erstellte UUID verwendet. Sollte in einem (Offline) IRTlib Player der Benutzername mehrfach verwendet werden, d.h. wenn beim Beenden des IRTlib Players bereits ein Rohdatenarchiv mit diesem Dateinamen existiert, wird dieses nicht überschrieben, sondern es wird ein Suffix angehängt (z.B. PersonIdentifier_1.zip).\nStartup-Parameter: Für die Integration des Offline IRTlib Players in programmierte Abläufe sind möglich. Anmeldedaten (Benutzername, Benutzername + Passwort, Token), die in einer Studie konfiguriert sind, können als so-genannte Startup-Parameter übergeben werden. Diese Parameter werden dann an den Aufruf von TestApp.Player.Desktop.exe angehängt.\nBeispiel:\n\nTestApp.Player.Desktop.exe /RawDataFolder=\"..\\\\myDataFolder\"\n\nGültige Startup-Parameter sind:\n\n/AutoLoginCreateWithTest=\"{StudienName}\": Fordert die Administration der Studie mit der Bezeichnung {StudienName} an.\n/AutoLoginUserName=\"{PersonIdentifier}\": Übergibt die Anmeldeinformation {PersonIdentifier} als Benutzername.\n/MyBlocklyVariable=\"123\": Übergibt den Wert 123 für die Blockly-Variable MyBlocklyVariable.\n/MonitoringFile=\"..\\\\last-run.json\": Pfad und Dateiname der so-genannten Monitoring-Datei.\n/RawDataFolder=\"..\\\\myDataFolder\": Pfad zu dem Verzeichnis, in welchem die Rohdatenarchive gespeichert werden.\n/volume=\"0.5\": Wert der verwendet werden soll, um die Systemlautstärke zu setzen (zwischen 0 und 1).\n/minvolume=\"0.2\": Wert der als untere Schwelle der Lautstärke verwendet werden soll (zwischen 0 und 1).\n/maxvolume=\"0.8\": Wert der als obere Schwelle der Lautstärke verwendet werden soll (zwischen 0 und 1).\n\nMehrere Startup-Parameter nacheinander sind möglich (getrennt durch Leerzeichen).\nTechnische Konfigurationen, die nicht per Startup-Parameter übergeben werden sollen, können auch über die Datei appsettings.json, welche im Verzeichnis TestApp.Player enthalten ist, festgelegt werden.\nIm Abschnitt Chromely kann bspw. die Lautstärkekonfigurationen vorgenommen werden:\n{\n  ...\n  \"Chromely\": {\n    ...\n    \"Audio\": {\n      \"MinVolume\": 0,\n      \"MaxVolume\": 1,\n      \"StartVolume\": 0.5\n    }\n  }\n}\nPrüfung von Voraussetzungen: Der IRTlib Player sollte auf Windows-Computern (aktuell unterstützt ab Windows 10) ohne weitere Installation oder Laufzeitvoraussetzungen ausgeführt werden können. Spezielle Konfigurationen, Virenscanner usw. können die Ausführung aber unterbinden. Ein Tool zum Prüfen von Voraussetzungen kann bspw. aufbauend auf diesem Beispiel (IRTlibReadiness) erstellt werden.\n\n\n\n\n\n\nWichtiger Hinweis\n\n\n\nDie bereitgestellte Windows-Version des IRTlib Player ermöglicht einen einfachen Kiosk-Modus, der nur für Computer mit nur einem Bildschirm (z.B. Notebooks) vorgesehen ist. Für eine Prüfungssichere Kiosk-Lösung kann die Offline-Version des IRTlib Players als lokaler Server mit weiterer Software (wie bspw. dem Safe Exam Browser) kombiniert werden.\n\n\n\n\n\nDie über das Github-Repository im Abschnitt Releases verfügbaren ZIP-Archive des Offline IRTlib Players enthalten parallel zu der Anwendung mit integriertem Browser (TestApp.Player.Desktop.exe) auch eine lokale Server-Version, welche über die ausführbare Datei TestApp.Player.Server.exe gestartet werden kann.\n\n\n\n\n\n\n\nWichtiger Hinweis\n\n\n\nDie Version TestApp.Player.Server.exe ist gedacht für einen Offline-Betrieb in Bring-in Netzwerken, z.B. wenn WLAN-Router und Server-Notebook in Schulen gebracht werden. Diese Version ist nicht für Online-Ehrebungen gedacht (wofür die Docker-Version bereitgestellt wird).\n\n\n\n\n\n\nIntegration: Für die Durchführung einer Datenerhebung sollte das Docker-Image des IRTlib Players nur über https-gesicherte Verbindungen erreichbar sein. Das kann bspw. mithilfe eines als Reverse Proxy konfigurierten zusätzlichen nginx realisiert werden.\nZugriff auf Editor: Für unbefugte Personen, die nicht mit der Studienvorbereitung betraut sind, darf kein Zugriff auf den IRTlib Editor möglich sein. Über das Github-Repository werden IRTlib Editor und IRTlib Player bereitgestellt. Für eine operative Datenerhebung ist es nicht notwendig, den IRTlib Editor online zu betreiben, da die Studienvorbereitung auch mit der Offline-Version des IRTlib Editors erstellt werden kann. Wird der IRTlib Editor online gehostet, muss er vor dem Zugriff Unbefugter geschützt werden.\nZugriff auf Verzeichnisse: In den im docker-compse.yml-File definierten Volumes /app/Content (IRTlib Player) und /app/data (IRTlib Editor) sind die Iteminhalte hinterlegt, die für ein Assessment konfiguriert werden. Um den Schutz von Instrumenten sicherzustellen, darf kein Zugriff für Unbefugte auf diese Volumes möglich sein.\nDatenspeicherung: Die während einer Datenerhebung mit dem Online IRTlib Player erhobenen Daten werden in dem Volume app/result gespeichert. Sie können von dort als Verzeichnisse (ein Verzeichnis je Session) oder als Rohdatenarchive über eine API abgerufen werden (wenn ein API-key definiert ist).\n\n\n\n\n\n\nHinweis\n\n\n\nBei Verwendung der Docker-Container können Assessmentinhalte und Daten online zugreifbar sein. Assessmentinhalte sind nur über den in der Studienkonfiguration definierten Loginmodus geschützt. Personendaten und Assessmentinhalte könne zusätzlich zugreifbar sein, wenn ein API-key definiert ist.\n\n\nKonfiguration des Players: Zentral für die technische Konfiguration des Players ist die Datei appsettings.json, welche im Verzeichnis TestApp.Player enthalten ist. In dieser Datei können u.a. drei verschiedene API-Keys (also Zugriffsschlüssel) hinterlegt werden, in dem sie in folgender JSON-Struktur hinterlegt werden, bevor der Docker-Container gestartet wird:\n\"API\": {\n   \"ExternalExportKey\": \"\",\n   \"DevelopmentKey\": \"\",\n   \"LoginManagementKeys\": []\n }\nDie API-Keys haben die folgenden Funktionen:\n\nExternalExportKey: Über diesen Schlüssel erhält man Zugang zu den mit dem IRTlib Player erhobenen Daten. Der Zugriff auf die Daten kann bspw. über das R-Paket LogFSM erfolgen, wie im Abschnitt Datenabruf beschrieben.\n\n\n\n\n\n\n\nRouten zum Direkten Zugriff\n\n\n\n\n\nDie Liste der bearbeiteten Session, d.h. die Session-Identifier lassen sich mit einem API-Key für ExternalExportKey über folgenden Aufruf als JSON abrufen:\nhttps://{U}/{S}/api/session/?apiKey={K}\n\n{U} ist die URL des IRTlib Players\n{S} ist der Bezeichner der Studie\n{K} ist die ExternalExportKey wie in der appsettings.json definiert\n\nMit einer bekanntem Session-Identifier lassen sich dann die Rohdaten über folgende Abruf mit einem API-Key für ExternalExportKey beziehen:\nhttps://{U}/{S}/api/session/{ID}/result?apiKey={K}\n\n{ID} ist der Session-Identifier (z.B. der Benutzername, je nach Konfiguration des Logins)\n\n\n\n\n\nDevelopmentKey: Dieser API-Key ist für das Anpassen von Studienkonfigurationen in einem laufenden Player vorgesehen.\n\n\n\n\n\n\n\nUnder Development\n\n\n\nDiese Funktion ist gerade in Entwicklung.\n\n\n\nLoginManagementKeys: Diese Liste von API-Keys ist für das Anpassen Zugangsdaten (Accounts) in einem laufenden Player vorgesehen.\n\n\n\n\n\n\n\nUnder Development\n\n\n\nDiese Funktion ist gerade in Entwicklung.\n\n\nMonitoring: (Eine Methode zur Überwachung von Docker-Containern ist in Entwicklung)."
  },
  {
    "objectID": "data-collection-player-integration.html#auslieferungen-testen-und-freigeben",
    "href": "data-collection-player-integration.html#auslieferungen-testen-und-freigeben",
    "title": "Datenerhebung: In IRTlib Player Importieren / Data Collection: Import into IRTlib Player",
    "section": "",
    "text": "Mit der Integration einer Studienkonfiguration in einen IRTlib Player ist die Vorbereitung noch nicht abgeschlossen. Bevor eine Datenerhebung mit der IRTlib Software begonnen werden kann, sollten folgende Tests durchlaufen werden:\n(Tests innerhalb der CBA ItemBuilder-Preview): Bevor die Konfiguration einer Studie und eines Erhebungsteils mit CBA ItemBuilder-Tasks erfolgt, sollte diese im Hinblick auf Darstellung, Funktionalität und Scoring bereits in der Preview des CBA ItemBuilder getestet sein.\nFunktionale Tests: Insbesondere wenn CBA ItemBuilder-Tasks mit der Auslieferungsplattform interagieren (wie bspw. Login-Items), sollten funktionale Tests (d.h. Tests von konkreten Funktionen) in der Auslieferungssoftware erfolgen. Das betrifft auch die Navigation zwischen Items und natürlich die in der Auslieferungsumgebung konfigurierte Ablaufsteuerung.\nCross-Browser-Testung: Werden Studien nicht mit dem Offline IRTlib Player durchgeführt (welcher seinen eigenen Browser mitbringt) und insbesondere wenn über sogenannte ExternalPageFrames (d.h. iframes) neu oder spezifisch programmierte JavaScript/HTML5-Inhalte innerhalb der CBA ItemBuilder-Tasks* verwendet werde, sollte eine Testung in verschiedenen Browsern erfolgen.\nPerformanz-Tests: Wenn große Mediendateien (Videos, Audiodateien) in den CBA ItemBuilder-Tasks enthalten sind, kann es ratsam sein, die Durchführbarkeit des Assessments auch unter ungünstigen Netzwerkbedingungen (z.B. geringe Bandbreite, lange Latenzen, Verbindungsabbrüche usw.) zu testen.\nLast-Tests: Wenn sehr viele Testteilnehmer parallel (online) getestet werden sollen, kann es ratsam sein, das Lastverhalten der Auslieferung (und bspw. die für den Docker-Container verfügbaren Ressourcen) vorab abzustimmen.\nDatenablageprüfung: In jedem Fall sollte die Passung der Scoring-Definition innerhalb der CBA ItemBuilder-Tasks und der Konfiguration im IRTlib Editor geprüft und eine Datenablageprüfung gemacht werden. Damit ist gemeint, dass vor Erhebungsstart synthetische Klickmuster (also Antworten) eingegeben und mit den im Datensatz gespeicherten Antworten verglichen werden. Um bei der späteren Überprüfung Eingabefehler gut erkennen zu können, hat es sich bewährt, für die Datenablageprüfung Bildschirmvideos parallel aufzuzeichnen.\nSmoke-Test: Die abschließende Form des Testens ist ein Durchlauftest in dem fertig konfigurierten Setting aus Studie in einem IRTlib Player. Die Erhebung sollte richtig dargestellt werden und ein lesbare Rohdatenarchiv sollte entstehen.\n\n\n\n\n\n\n\n\nHinweis\n\n\n\nDie Bereitstellung der freien Forschungssoftware IRTlib Editor und IRTlib Player erfolgt ohne Gewähr und es kann keine Haftung für fehlende Daten, Datenverlust oder kompromittierte Daten usw. übernommen werden.\n\n\nAllgemeingültige Empfehlungen zu (unbedingt) notwendigen Tests sind schwer zu formulieren, die folgende Tabelle ist deshalb als unverbindliche Empfehlung zu verstehen, welche im konkrete Fall abzuwägen ist.\n\n\n\n\n\n\n\n\nTest\nEmpfehlung\nBedingung\n\n\n\n\nCBA ItemBuilder-Preview\nImmer\n(Fehler in Darstellung, Verhalten und Scoring, die sich bereits bei der Itemerstellung finden lassen, sollten vor der Erstellung einer Studienkonfiguration systematisch getestet und ausgeschlossen werden.)\n\n\nFunktionale Tests\nBei Bedarf\nNur wenn IRTlib Player und CBA ItemBuilder-Tasks interagieren müssen und bezogen auf im IRTlib Editor definierte Funktionalität (z.B. antwortabhängige Verzweigungen).\n\n\nCross-Browser-Testung\nBei Bedarf\nNur wenn IRTlib Player online verwendet wird und die Browser nicht den Browsern entsprechen, welche bereits für die CBA ItemBuilder-Preview verwendet wurden.\n\n\nPerformanz-Tests\nBei Bedarf\nWenn große Multimedia-Teile enthalten sind oder wenn mit schlechter Netzwerkverbindung zu rechnen ist.\n\n\nLast-Tests\nBei Bedarf\nNur wenn Online IRTlib Player mit vielen parallelen Tests administriert werden soll.\n\n\nDatenablageprüfung\nImmer\nPrüfung aller Daten (inkl. Log-Daten, wenn diese für die Auswertung benötigt werden).\n\n\nSmoke-Test\nImmer\nSmoke-Testung bei jeder Version, vor allem um versehentliche Konfigurationsfehler in letzter Minute auszuschließen.\n\n\n\n\n\n\nIst die Studie in einem IRTlib Player konfiguriert und getestet, kann die Datenerhebung erfolgen. Je länger die Feldzeit ist, desto wichtiger sind regelmäßige Backups der erhobenen Daten bzw. ein regelmäßiger Abzug der gesammelten Rohdatenarchive von der Erhebungshardware."
  },
  {
    "objectID": "data-collection-post-processing.html",
    "href": "data-collection-post-processing.html",
    "title": "Datenerhebung: Datenaufbereitung / Data Collection: Data Post-Processing",
    "section": "",
    "text": "Daten werden vom IRTlib Player in Rohdatenarchiven pro Session (d.h. pro Testdurchführung mit einer Studie) gespeichert. Die Rohdatenarchive sind ZIP-Archive, deren Dateinamen dem Benutzernamen oder dem Universally Unique Identifier (UUID) entsprechen. Abweichungen von diesem Schema sind möglich, wenn zum Zeitpunkt der Speicherung bereits ein Rohdatenarchiv mit diesem Dateinamen vorhanden war. In diesem Fall werden die Daten vim IRTlib Player nicht überschrieben, sondern es wird ein Suffix _1, _2, … angehängt, bis der Dateiname verwendbar ist.\n\nOffline IRTlib Player: Wenn nicht anders konfiguriert wurde, werden die Ergebnisdaten im Verzeichnis Temp/{Studien-Name}/Results gespeichert. Die Rohdatenarchive werden erstellt, wenn eine Session beendet, d.h. die letzte definierte CBA ItemBuilder-Task mit NEXT_TASK verlassen wird. Erst wenn die Rohdatenarchive erstellt wurden, ist ein Fortsetzen der angefangenen Session, wie es beispielsweise bei einem Computerabsturz notwendig sein kann, nicht mehr möglich.\n\n\nAnalog verhält es sich auch, wenn die Offline-Version des IRTlib Player als lokaler Server eingesetzt wird. Die Rohdatenarchive werden nach der Testbearbeitung im Verzeichnis Temp/{Studien-Name}/Results gespeichert.\n\n\nDie Sammlung von Daten aus den Offline IRTlib Playern entspricht dem Einsammeln der Rohdatenarchive, die auf den verschiedenen Geräten erhoben werden.\n\n\n\n\n\n\n\nHinweis\n\n\n\nDa die Offline IRTlib Player untereinander nicht in Verbindung stehen, können - je nach Loginmodus - identische Anmeldedaten in verschiedenen IRTlib Playern parallel erstellt werden. Nach einer Datenerhebung müssen die Rohdatenarchive deshalb mit Sorgfalt zusammengefügt und ggf. durch Unterordner getrennt werden.\n\n\n\nOnline IRTlib Player: Der Online-Player sammelt die Daten, wenn nicht anders konfiguriert, in dem Volume, welches für die Ergebnisdaten konfiguriert ist (vgl. /app/results in docker-compse.yml-File). Jede Session wird dort in einem separaten Unterverzeichnis gespeichert und kann von Administratoren, die Zugriff auf das Volume haben (!), heruntergeladen werden.\n\nWenn ein API-key für den Datenzugriff definiert ist, kann der Download der Ergebnisdaten auch über das R-Paket LogFSM erfolgen.\n\n\nDazu kann mit folgendem Aufruf zunächst (einmalig) das R-Paket installiert werden:\n\nsource(\"http://logfsm.com/latest\")\n\nDanach ist der Download der Rohdatenarchive mit folgendem R-Skript möglich:\n\n\nlibrary(LogFSM)\n\nif (!dir.exists(paste0(getwd(),\"/in/\")))\n  dir.create(paste0(getwd(),\"/in/\"))\n\nif (!dir.exists(paste0(getwd(),\"/out/\")))\n  dir.create(paste0(getwd(),\"/out/\"))\n\nSECRET_KEY &lt;- \"(your secret key)\"\nAPI_URL &lt;- \"(your API-URL)\"\n\nLogFSM::TransformToUniversalLogFormat(inputfolders = paste0(getwd(),\"/in/\"),\n                              inputformat = \"irtlibv01a\", \n                              zcsvoutput  = paste0(getwd(),\"/out/data_csv.zip\"),  \n                              stataoutput = paste0(getwd(),\"/out/data_dta.zip\"),\n                              spssoutput =  paste0(getwd(),\"/out/data_sav.zip\"),\n                              key = SECRET_KEY,\n                              web = API_URL, \n                              outputtimestampformatstring=\"dd.MM.yyyy HH:mm:ss.fff\")\n\nresults &lt;- read.csv(unz(paste0(getwd(),\"/out/data_csv.zip\"), \"Results.csv\"),\n                    sep=\";\", encoding = \"UTF-8\")\n\nDatenabruf und Konvertierung der Daten mit LogFSM\n\nMit dem Aufruf der Funktion TransformToUniversalLogFormat aus dem Paket LogFSM werden die Daten heruntergeladen und in das spezifizierte Verzeichnis infolders abgelegt, wenn ein API-Key (key) und eine API-Url (web) übergeben werden.\n\n\n\n\n\n\nHinweis zur SECRET_KEY und API_URL\n\n\n\n\n\nDer Wert für SECRET_KEY muss dem Eintrag entsprechen, der bei der Konfiguration des Docker-Images in der appsettings.json als ExternalExportKey definiert wurde, siehe Abschnitt Online-Version (Docker).\nDer Wert für die API_URL bildet sich nach folgendem Schema: https://{U}/{S}/api/session/\n\n{U} ist die URL des IRTlib Players\n{S} ist der Bezeichner der Studie\n\n\n\n\nDie Funktion TransformToUniversalLogFormat aus dem Paket LogFSM (oder analog dem im Folgenden beschriebenen Kommandozeilenwerkzeug) können auch verwendet werden, um bereits lokal vorhandene Rohdatenarchive auszulesen.\n\n\n\nDie für den Datenabruf und die Datenkonvertierung über LogFSM verwendete Anwendung TransformToUniversalLogFormat ist als Konsolen-Anwendung aus dem Releases-Abschnitt von https://github.com/kroehne/LogFSM/ verfügbar.\nDarüber lassen sich Datenabruf und Datenumwandlung auch ohne R ausführen.\n\n\n\n\n\n\n\nIn Entwicklung\n\n\n\nEine zertifizierte Version von TransformToUniversalLogFormat für Apple ist im Moment in Entwicklung.\n\n\n\n\n\nWenn die Daten über LogFSM von einem Online IRTlib Player abgerufen oder Offline eingesammelt wurden, liegen sie am Ende in einem Verzeichnis vor. Je Session (d.h. je Person oder Person x Zeitpunkt) als Rohdaten-Archiv.\nDie Funktion TransformToUniversalLogFormat in LogFSM oder über die Kommando-Zeile kann auch verwendet werden, um die Rohdatenarchive aus einem Verzeichnis auszulesen und die Ergebnisdaten zu extrahieren:\n\n\nlibrary(LogFSM)\n\nif (!dir.exists(paste0(getwd(),\"/out/\")))\n  dir.create(paste0(getwd(),\"/out/\"))\n\nLogFSM::TransformToUniversalLogFormat(inputfolders = paste0(getwd(),\"/in/\"),\n                              inputformat = \"irtlibv01a\", \n                              zcsvoutput  = paste0(getwd(),\"/out/data_csv.zip\"),  \n                              stataoutput = paste0(getwd(),\"/out/data_dta.zip\"),\n                              spssoutput =  paste0(getwd(),\"/out/data_sav.zip\"),\n                              outputtimestampformatstring=\"dd.MM.yyyy HH:mm:ss.fff\")\n\nresults &lt;- read.csv(unz(paste0(getwd(),\"/out/data_csv.zip\"), \"Results.csv\"),\n                    sep=\";\", encoding = \"UTF-8\")\n\n\n\n\n\nDie Konvertierung der Daten mit TransformToUniversalLogFormat in LogFSM oder über die Kommando-Zeile wandelt die erhobenen Log-Daten, welche von den CBA ItemBuilder-Tasks bereitgestellt werden, in folgende Formate um:\n\nFlat and Sparse Log-Data Table: Eine große Tabelle (als CSV, Stata, SPSS) mit einer Zeile je Event. Da die eventspezifischen Attribute (d.h. die unterschiedlichen zusätzlichen Informationen, die von einem Event vorhanden sind) sich auf viele Spalten verteilen, die aber jeweils nur je Event-Typ gefüllt sind, ist diese Tabelle zwar flach, aber ggf. auch sehr löchrig.\nUniversal Log-Format: Alternativ enthalten die von LogFSM bzw. dem Kommandozeilen-Werkzeug TransformToUniversalLogFormat erstellten ZIP-Archive auch einzelne Datensatz-Tabellen je Event-Typ. Die eventspezifischen Attribute in diesen Tabellen sind weniger löchrig (d.h. sie enthalten nur fehlende Werte für optionale Attribute) und können zu einer Flat and Sparse Log-Data Table kombiniert werden, wenn erforderlich.\nXES (eXtensible Event Stream): Die Log-Daten können auch in dem standardisierten XML-Format (https://xes-standard.org/) umgewandelt werden.\n\n\n\n\n\n\n\nHinweis zu Zeitstempeln\n\n\n\nDie mit der IRTlib Software erhobenen Zeitstempel sind im UTC-Format (Coordinated Universal Time).\n\n\n\n\n\nDie Rohdatenarchive enthalten folgende Dateien:\n\nTrace.json: Log-Daten (Traces) wie von der CBA ItemBuilder-Runtime geliefert, zusammen mit dem Kontext aus dem IRTlib Player.\n\n\nDie Datei enthält folgende Struktur, mit Komma getrennt. Die Datei ist kein gültiges JSON, bis nicht das letzte Komma entfernt und ein [ vor und ein ] nach dem Inhalt eingefügt wird.\n\n\nDer Eintrag Trace enthält die Log-Daten (Traces) in Päckchen (wie von der CBA ItemBuilder-Runtime geliefert) quotiert (d.h. \" wird als \\u0022 dargestellt). Die TraceId ist ein Zähler, welcher die übermittelten Päckchen durchzählt. Timestamp ist der Zeitstempel der Übermittlung. SessionId der Benutzername oder die UUID (PersonIdentifier). Der Context gibt über den Namen des CBA ItemBuilder-Projekts, Task und Scope eine Referenz zum Assessmentinhalt (Element). Unter Assemblies sind die Informationen zum verwendeten IRTlib Player gespeichert und StudyRevision verweist auf die Revision einer (veröffentlichten) Studie.\n\n{\n    \"Trace\": \"(TRACE-JSON)\",\n    \"TraceId\": 1,\n    \"Timestamp\": \"2023-12-04T20:53:06.297Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n    },\n    \"Assemblies\": [\n        {\n            \"Name\": \"TestApp.Player.Desktop\",\n            \"Version\": \"(APPLICATION VERSION)\",\n            \"GitHash\": \"(APPLICATION BUILD HASH)\"\n        }\n    ],\n    \"StudyRevision\": \"(STUDY REVISION)\"\n},\n\nSnapshot.json: Snapshot-Daten wie von der CBA ItemBuilder-Runtime geliefert, zusammen mit dem Kontext aus dem IRTlib Player.\n\n\nDie Datei enthält folgende Struktur, mit Komma getrennt. Die Datei ist kein gültiges JSON, bis nicht das letzte Komma entfernt und ein [ vor und ein ] nach dem Inhalt eingefügt wird.\n\n\nDer Eintrag Snapshot enthält die Snapshot-Informationen (wie von der CBA ItemBuilder-Runtime geliefert) quotiert (d.h. \" wird als \\u0022 dargestellt). Der ContextFlag gibt an, wie der CBA ItemBuilder-Task verlassen wurde (NextTask, PreviousTask oder Cancel).  Timestamp ist der Zeitstempel der Übermittlung. SessionId der Benutzername oder die UUID (PersonIdentifier). Der Context gibt über Name des CBA ItemBuilder-Projekts, Task und Scope eine Referenz zum Assessmentinhalt (Element). Unter Assemblies sind die Informationen zum verwendeten IRTlib Player gespeichert und StudyRevision verweist auf die Revision einer (veröffentlichten) Studie.\n\n\n{\n    \"Snapshot\": \"(SNAPSHOT-JSON)\",\n    \"ContextFlag\": \"NextTask\",\n    \"ContextScope\": 0,\n    \"Timestamp\": \"2023-12-04T20:53:06.497Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n    },\n    \"Assemblies\": null,\n    \"StudyRevision\": null\n},\n\nItemScore.json: Scoring-Information (wie von CBA ItemBuilder-Runtime geliefert).\n\n\nDie Datei enthält folgende Struktur, mit Komma getrennt. Die Datei ist kein gültiges JSON, bis nicht das letzte Komma entfernt und ein [ vor und ein ] nach dem Inhalt eingefügt wird.\n\n\nDer Eintrag ItemScore enthält den ItemScore (wie von der CBA ItemBuilder-Runtime geliefert) quotiert (d.h. \" wird als \\u0022 dargestellt).Der ContextFlag gibt an, wie der CBA ItemBuilder-Task verlassen wurde (NextTask, PreviousTask oder Cancel).  Timestamp ist der Zeitstempel der Übermittlung. SessionId der Benutzername oder die UUID (PersonIdentifier). Der Context gibt über Name des CBA ItemBuilder-Projekts, Task und Scope eine Referenz zum Assessmentinhalt (Element). Unter Assemblies sind die Informationen zum verwendeten IRTlib Player gespeichert und StudyRevision verweist auf die Revision einer (veröffentlichten) Studie.\n\n{\n    \"ItemScore\": \"(SCORING-JSON)\",\n    \"ContextFlag\": \"NextTask\",\n    \"ContextScope\": 0,\n    \"Timestamp\": \"2023-12-04T20:53:06.474Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n     },\n    \"Assemblies\": [\n        {\n            \"Name\": \"TestApp.Player.Desktop\",\n            \"Version\": \"(APPLICATION VERSION)\",\n            \"GitHash\": \"(APPLICATION BUILD HASH)\"\n        }\n    ],\n    \"StudyRevision\": \"(STUDY REVISION)\"\n},\n\nSession.json: Die Datei enthält Daten des IRTlib Players, welche die Ausführung der Session beschreiben.\nLog.json: Log-Events der IRTlib Player (enthält u.A. Log-Informationen zur Verarbeitung des Blockly-Routings).\nbrowser.log: Ausgabe der Konsole, die während der Bearbeitung der Aufgaben im Browser gesammelt wurden (unstrukturierter Text, für Entwickler).\nserver.log: Log-Ausgaben des Servers des IRTlib Players (unstruktruierter Text, für Entwickler)\nKeyboard.json: Tastatureingaben und Zeitstempel.\nMonitoring.json: Kopie der Monitoring-Datei, welche erstellt wurde."
  },
  {
    "objectID": "data-collection-post-processing.html#datenaufbereitung",
    "href": "data-collection-post-processing.html#datenaufbereitung",
    "title": "Datenerhebung: Datenaufbereitung / Data Collection: Data Post-Processing",
    "section": "",
    "text": "Daten werden vom IRTlib Player in Rohdatenarchiven pro Session (d.h. pro Testdurchführung mit einer Studie) gespeichert. Die Rohdatenarchive sind ZIP-Archive, deren Dateinamen dem Benutzernamen oder dem Universally Unique Identifier (UUID) entsprechen. Abweichungen von diesem Schema sind möglich, wenn zum Zeitpunkt der Speicherung bereits ein Rohdatenarchiv mit diesem Dateinamen vorhanden war. In diesem Fall werden die Daten vim IRTlib Player nicht überschrieben, sondern es wird ein Suffix _1, _2, … angehängt, bis der Dateiname verwendbar ist.\n\nOffline IRTlib Player: Wenn nicht anders konfiguriert wurde, werden die Ergebnisdaten im Verzeichnis Temp/{Studien-Name}/Results gespeichert. Die Rohdatenarchive werden erstellt, wenn eine Session beendet, d.h. die letzte definierte CBA ItemBuilder-Task mit NEXT_TASK verlassen wird. Erst wenn die Rohdatenarchive erstellt wurden, ist ein Fortsetzen der angefangenen Session, wie es beispielsweise bei einem Computerabsturz notwendig sein kann, nicht mehr möglich.\n\n\nAnalog verhält es sich auch, wenn die Offline-Version des IRTlib Player als lokaler Server eingesetzt wird. Die Rohdatenarchive werden nach der Testbearbeitung im Verzeichnis Temp/{Studien-Name}/Results gespeichert.\n\n\nDie Sammlung von Daten aus den Offline IRTlib Playern entspricht dem Einsammeln der Rohdatenarchive, die auf den verschiedenen Geräten erhoben werden.\n\n\n\n\n\n\n\nHinweis\n\n\n\nDa die Offline IRTlib Player untereinander nicht in Verbindung stehen, können - je nach Loginmodus - identische Anmeldedaten in verschiedenen IRTlib Playern parallel erstellt werden. Nach einer Datenerhebung müssen die Rohdatenarchive deshalb mit Sorgfalt zusammengefügt und ggf. durch Unterordner getrennt werden.\n\n\n\nOnline IRTlib Player: Der Online-Player sammelt die Daten, wenn nicht anders konfiguriert, in dem Volume, welches für die Ergebnisdaten konfiguriert ist (vgl. /app/results in docker-compse.yml-File). Jede Session wird dort in einem separaten Unterverzeichnis gespeichert und kann von Administratoren, die Zugriff auf das Volume haben (!), heruntergeladen werden.\n\nWenn ein API-key für den Datenzugriff definiert ist, kann der Download der Ergebnisdaten auch über das R-Paket LogFSM erfolgen.\n\n\nDazu kann mit folgendem Aufruf zunächst (einmalig) das R-Paket installiert werden:\n\nsource(\"http://logfsm.com/latest\")\n\nDanach ist der Download der Rohdatenarchive mit folgendem R-Skript möglich:\n\n\nlibrary(LogFSM)\n\nif (!dir.exists(paste0(getwd(),\"/in/\")))\n  dir.create(paste0(getwd(),\"/in/\"))\n\nif (!dir.exists(paste0(getwd(),\"/out/\")))\n  dir.create(paste0(getwd(),\"/out/\"))\n\nSECRET_KEY &lt;- \"(your secret key)\"\nAPI_URL &lt;- \"(your API-URL)\"\n\nLogFSM::TransformToUniversalLogFormat(inputfolders = paste0(getwd(),\"/in/\"),\n                              inputformat = \"irtlibv01a\", \n                              zcsvoutput  = paste0(getwd(),\"/out/data_csv.zip\"),  \n                              stataoutput = paste0(getwd(),\"/out/data_dta.zip\"),\n                              spssoutput =  paste0(getwd(),\"/out/data_sav.zip\"),\n                              key = SECRET_KEY,\n                              web = API_URL, \n                              outputtimestampformatstring=\"dd.MM.yyyy HH:mm:ss.fff\")\n\nresults &lt;- read.csv(unz(paste0(getwd(),\"/out/data_csv.zip\"), \"Results.csv\"),\n                    sep=\";\", encoding = \"UTF-8\")\n\nDatenabruf und Konvertierung der Daten mit LogFSM\n\nMit dem Aufruf der Funktion TransformToUniversalLogFormat aus dem Paket LogFSM werden die Daten heruntergeladen und in das spezifizierte Verzeichnis infolders abgelegt, wenn ein API-Key (key) und eine API-Url (web) übergeben werden.\n\n\n\n\n\n\nHinweis zur SECRET_KEY und API_URL\n\n\n\n\n\nDer Wert für SECRET_KEY muss dem Eintrag entsprechen, der bei der Konfiguration des Docker-Images in der appsettings.json als ExternalExportKey definiert wurde, siehe Abschnitt Online-Version (Docker).\nDer Wert für die API_URL bildet sich nach folgendem Schema: https://{U}/{S}/api/session/\n\n{U} ist die URL des IRTlib Players\n{S} ist der Bezeichner der Studie\n\n\n\n\nDie Funktion TransformToUniversalLogFormat aus dem Paket LogFSM (oder analog dem im Folgenden beschriebenen Kommandozeilenwerkzeug) können auch verwendet werden, um bereits lokal vorhandene Rohdatenarchive auszulesen.\n\n\n\nDie für den Datenabruf und die Datenkonvertierung über LogFSM verwendete Anwendung TransformToUniversalLogFormat ist als Konsolen-Anwendung aus dem Releases-Abschnitt von https://github.com/kroehne/LogFSM/ verfügbar.\nDarüber lassen sich Datenabruf und Datenumwandlung auch ohne R ausführen.\n\n\n\n\n\n\n\nIn Entwicklung\n\n\n\nEine zertifizierte Version von TransformToUniversalLogFormat für Apple ist im Moment in Entwicklung.\n\n\n\n\n\nWenn die Daten über LogFSM von einem Online IRTlib Player abgerufen oder Offline eingesammelt wurden, liegen sie am Ende in einem Verzeichnis vor. Je Session (d.h. je Person oder Person x Zeitpunkt) als Rohdaten-Archiv.\nDie Funktion TransformToUniversalLogFormat in LogFSM oder über die Kommando-Zeile kann auch verwendet werden, um die Rohdatenarchive aus einem Verzeichnis auszulesen und die Ergebnisdaten zu extrahieren:\n\n\nlibrary(LogFSM)\n\nif (!dir.exists(paste0(getwd(),\"/out/\")))\n  dir.create(paste0(getwd(),\"/out/\"))\n\nLogFSM::TransformToUniversalLogFormat(inputfolders = paste0(getwd(),\"/in/\"),\n                              inputformat = \"irtlibv01a\", \n                              zcsvoutput  = paste0(getwd(),\"/out/data_csv.zip\"),  \n                              stataoutput = paste0(getwd(),\"/out/data_dta.zip\"),\n                              spssoutput =  paste0(getwd(),\"/out/data_sav.zip\"),\n                              outputtimestampformatstring=\"dd.MM.yyyy HH:mm:ss.fff\")\n\nresults &lt;- read.csv(unz(paste0(getwd(),\"/out/data_csv.zip\"), \"Results.csv\"),\n                    sep=\";\", encoding = \"UTF-8\")\n\n\n\n\n\nDie Konvertierung der Daten mit TransformToUniversalLogFormat in LogFSM oder über die Kommando-Zeile wandelt die erhobenen Log-Daten, welche von den CBA ItemBuilder-Tasks bereitgestellt werden, in folgende Formate um:\n\nFlat and Sparse Log-Data Table: Eine große Tabelle (als CSV, Stata, SPSS) mit einer Zeile je Event. Da die eventspezifischen Attribute (d.h. die unterschiedlichen zusätzlichen Informationen, die von einem Event vorhanden sind) sich auf viele Spalten verteilen, die aber jeweils nur je Event-Typ gefüllt sind, ist diese Tabelle zwar flach, aber ggf. auch sehr löchrig.\nUniversal Log-Format: Alternativ enthalten die von LogFSM bzw. dem Kommandozeilen-Werkzeug TransformToUniversalLogFormat erstellten ZIP-Archive auch einzelne Datensatz-Tabellen je Event-Typ. Die eventspezifischen Attribute in diesen Tabellen sind weniger löchrig (d.h. sie enthalten nur fehlende Werte für optionale Attribute) und können zu einer Flat and Sparse Log-Data Table kombiniert werden, wenn erforderlich.\nXES (eXtensible Event Stream): Die Log-Daten können auch in dem standardisierten XML-Format (https://xes-standard.org/) umgewandelt werden.\n\n\n\n\n\n\n\nHinweis zu Zeitstempeln\n\n\n\nDie mit der IRTlib Software erhobenen Zeitstempel sind im UTC-Format (Coordinated Universal Time).\n\n\n\n\n\nDie Rohdatenarchive enthalten folgende Dateien:\n\nTrace.json: Log-Daten (Traces) wie von der CBA ItemBuilder-Runtime geliefert, zusammen mit dem Kontext aus dem IRTlib Player.\n\n\nDie Datei enthält folgende Struktur, mit Komma getrennt. Die Datei ist kein gültiges JSON, bis nicht das letzte Komma entfernt und ein [ vor und ein ] nach dem Inhalt eingefügt wird.\n\n\nDer Eintrag Trace enthält die Log-Daten (Traces) in Päckchen (wie von der CBA ItemBuilder-Runtime geliefert) quotiert (d.h. \" wird als \\u0022 dargestellt). Die TraceId ist ein Zähler, welcher die übermittelten Päckchen durchzählt. Timestamp ist der Zeitstempel der Übermittlung. SessionId der Benutzername oder die UUID (PersonIdentifier). Der Context gibt über den Namen des CBA ItemBuilder-Projekts, Task und Scope eine Referenz zum Assessmentinhalt (Element). Unter Assemblies sind die Informationen zum verwendeten IRTlib Player gespeichert und StudyRevision verweist auf die Revision einer (veröffentlichten) Studie.\n\n{\n    \"Trace\": \"(TRACE-JSON)\",\n    \"TraceId\": 1,\n    \"Timestamp\": \"2023-12-04T20:53:06.297Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n    },\n    \"Assemblies\": [\n        {\n            \"Name\": \"TestApp.Player.Desktop\",\n            \"Version\": \"(APPLICATION VERSION)\",\n            \"GitHash\": \"(APPLICATION BUILD HASH)\"\n        }\n    ],\n    \"StudyRevision\": \"(STUDY REVISION)\"\n},\n\nSnapshot.json: Snapshot-Daten wie von der CBA ItemBuilder-Runtime geliefert, zusammen mit dem Kontext aus dem IRTlib Player.\n\n\nDie Datei enthält folgende Struktur, mit Komma getrennt. Die Datei ist kein gültiges JSON, bis nicht das letzte Komma entfernt und ein [ vor und ein ] nach dem Inhalt eingefügt wird.\n\n\nDer Eintrag Snapshot enthält die Snapshot-Informationen (wie von der CBA ItemBuilder-Runtime geliefert) quotiert (d.h. \" wird als \\u0022 dargestellt). Der ContextFlag gibt an, wie der CBA ItemBuilder-Task verlassen wurde (NextTask, PreviousTask oder Cancel).  Timestamp ist der Zeitstempel der Übermittlung. SessionId der Benutzername oder die UUID (PersonIdentifier). Der Context gibt über Name des CBA ItemBuilder-Projekts, Task und Scope eine Referenz zum Assessmentinhalt (Element). Unter Assemblies sind die Informationen zum verwendeten IRTlib Player gespeichert und StudyRevision verweist auf die Revision einer (veröffentlichten) Studie.\n\n\n{\n    \"Snapshot\": \"(SNAPSHOT-JSON)\",\n    \"ContextFlag\": \"NextTask\",\n    \"ContextScope\": 0,\n    \"Timestamp\": \"2023-12-04T20:53:06.497Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n    },\n    \"Assemblies\": null,\n    \"StudyRevision\": null\n},\n\nItemScore.json: Scoring-Information (wie von CBA ItemBuilder-Runtime geliefert).\n\n\nDie Datei enthält folgende Struktur, mit Komma getrennt. Die Datei ist kein gültiges JSON, bis nicht das letzte Komma entfernt und ein [ vor und ein ] nach dem Inhalt eingefügt wird.\n\n\nDer Eintrag ItemScore enthält den ItemScore (wie von der CBA ItemBuilder-Runtime geliefert) quotiert (d.h. \" wird als \\u0022 dargestellt).Der ContextFlag gibt an, wie der CBA ItemBuilder-Task verlassen wurde (NextTask, PreviousTask oder Cancel).  Timestamp ist der Zeitstempel der Übermittlung. SessionId der Benutzername oder die UUID (PersonIdentifier). Der Context gibt über Name des CBA ItemBuilder-Projekts, Task und Scope eine Referenz zum Assessmentinhalt (Element). Unter Assemblies sind die Informationen zum verwendeten IRTlib Player gespeichert und StudyRevision verweist auf die Revision einer (veröffentlichten) Studie.\n\n{\n    \"ItemScore\": \"(SCORING-JSON)\",\n    \"ContextFlag\": \"NextTask\",\n    \"ContextScope\": 0,\n    \"Timestamp\": \"2023-12-04T20:53:06.474Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n     },\n    \"Assemblies\": [\n        {\n            \"Name\": \"TestApp.Player.Desktop\",\n            \"Version\": \"(APPLICATION VERSION)\",\n            \"GitHash\": \"(APPLICATION BUILD HASH)\"\n        }\n    ],\n    \"StudyRevision\": \"(STUDY REVISION)\"\n},\n\nSession.json: Die Datei enthält Daten des IRTlib Players, welche die Ausführung der Session beschreiben.\nLog.json: Log-Events der IRTlib Player (enthält u.A. Log-Informationen zur Verarbeitung des Blockly-Routings).\nbrowser.log: Ausgabe der Konsole, die während der Bearbeitung der Aufgaben im Browser gesammelt wurden (unstrukturierter Text, für Entwickler).\nserver.log: Log-Ausgaben des Servers des IRTlib Players (unstruktruierter Text, für Entwickler)\nKeyboard.json: Tastatureingaben und Zeitstempel.\nMonitoring.json: Kopie der Monitoring-Datei, welche erstellt wurde."
  },
  {
    "objectID": "translation.html",
    "href": "translation.html",
    "title": "Translation",
    "section": "",
    "text": "Hinweis\n\n\n\nThe software has been designed so that it can also be translated into other languages. If you would like to support us in this, please contact us.\n\n\n\n\n\n\nThis editor can be used to created localized resx-files for the application: ResXResourceManager\n\nThe source file can be found here: (TODO)\n\nHelp (included in the application) is generated using quarto useing all markdown files starting with InlineHelp_* in this folder.\n\nHelp.de-DE.resx\nHelp.en-US.resx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMarkdown (DEU)\nen-US\nde-DEU\n…\n\n\n\n\n*IRTlib Player*\nIRTlib Player\nIRTlib Player\n\n\n\n*IRTlib Editor*\nIRTlib Editor\nIRTlib Editor\n\n\n\n*IRTlib Software*\nIRTlib Software\nIRTlib Software\n\n\n\nOffline-*IRTlib Player*\nOffline-IRTlib Player\nOffline-IRTlib Player\n\n\n\nOnline-*IRTlib Player*\nOnline-IRTlib Player\nOnline-IRTlib Player\n\n\n\n*Studie*\nStudy\nStudie\n\n\n\n*Erhebungsteil*\nStudy Part \nErhebungsteil\n\n\n\n*Einstellungen*\nSettings\nEinstellungen\n\n\n\n*Testleitermenü*\nSession Menu\nTestleitermenü\n\n\n\n*Bearbeitungszeit*\nCompletion time\nBearbeitungszeit\n\n\n\n*Bearbeitungszeit begrenzen*\nRestrict time allowed\nBearbeitungszeit begrenzen\n\n\n\n*Studienversion*\nStudy version\nStudienversion\n\n\n\n*Revision*\nRevision\nRevision\n\n\n\n*Vorspann-Item(s)*\nProlog Item(s)\nVorspann-Item(s)\n\n\n\n*Nachspann-Items(s)*\nEpilog Item(s)\nNachspann-Items(s)\n\n\n\n*Testleiter*\nTest Administrator\nTestleiter\n\n\n\n*CBA ItemBuilder*-Items\nCBA ItemBuilder-Items\nCBA ItemBuilder-Items\n\n\n\n*Docker*-Container\nDocker-Container\nDocker-Container"
  },
  {
    "objectID": "translation.html#help-requested",
    "href": "translation.html#help-requested",
    "title": "Translation",
    "section": "",
    "text": "Hinweis\n\n\n\nThe software has been designed so that it can also be translated into other languages. If you would like to support us in this, please contact us."
  },
  {
    "objectID": "translation.html#current-translations",
    "href": "translation.html#current-translations",
    "title": "Translation",
    "section": "",
    "text": "This editor can be used to created localized resx-files for the application: ResXResourceManager\n\nThe source file can be found here: (TODO)\n\nHelp (included in the application) is generated using quarto useing all markdown files starting with InlineHelp_* in this folder.\n\nHelp.de-DE.resx\nHelp.en-US.resx"
  },
  {
    "objectID": "translation.html#terminology-and-standardizing-the-notation",
    "href": "translation.html#terminology-and-standardizing-the-notation",
    "title": "Translation",
    "section": "",
    "text": "Markdown (DEU)\nen-US\nde-DEU\n…\n\n\n\n\n*IRTlib Player*\nIRTlib Player\nIRTlib Player\n\n\n\n*IRTlib Editor*\nIRTlib Editor\nIRTlib Editor\n\n\n\n*IRTlib Software*\nIRTlib Software\nIRTlib Software\n\n\n\nOffline-*IRTlib Player*\nOffline-IRTlib Player\nOffline-IRTlib Player\n\n\n\nOnline-*IRTlib Player*\nOnline-IRTlib Player\nOnline-IRTlib Player\n\n\n\n*Studie*\nStudy\nStudie\n\n\n\n*Erhebungsteil*\nStudy Part \nErhebungsteil\n\n\n\n*Einstellungen*\nSettings\nEinstellungen\n\n\n\n*Testleitermenü*\nSession Menu\nTestleitermenü\n\n\n\n*Bearbeitungszeit*\nCompletion time\nBearbeitungszeit\n\n\n\n*Bearbeitungszeit begrenzen*\nRestrict time allowed\nBearbeitungszeit begrenzen\n\n\n\n*Studienversion*\nStudy version\nStudienversion\n\n\n\n*Revision*\nRevision\nRevision\n\n\n\n*Vorspann-Item(s)*\nProlog Item(s)\nVorspann-Item(s)\n\n\n\n*Nachspann-Items(s)*\nEpilog Item(s)\nNachspann-Items(s)\n\n\n\n*Testleiter*\nTest Administrator\nTestleiter\n\n\n\n*CBA ItemBuilder*-Items\nCBA ItemBuilder-Items\nCBA ItemBuilder-Items\n\n\n\n*Docker*-Container\nDocker-Container\nDocker-Container"
  },
  {
    "objectID": "preparation-overview.html",
    "href": "preparation-overview.html",
    "title": "Vorbereitung: Übersicht / Preparation: Overview",
    "section": "",
    "text": "Die Vorbereitung eines computerbasierten Assessments auf der Grundlage von CBA ItemBuilder-Inhalten beginnt mit der Verwendung des IRTlib-Editors zur Erstellung einer Studienkonfiguration. Dies umfasst in der Regel die folgenden Schritte:\n\n\n\n\n\n\nOptional: Verwenden eine Runtime für CBA ItemBuilder vor Version 9.9?\n\n\n\n\n\n\nVoraussetzung: Überprüfen Sie die Verfügbarkeit der Runtime. Der IRTlib Editor kann zur Vorbereitung von Assessments mit im CBA ItemBuilder erstellten Inhalten verwendet werden. Für die Verwendung von CBA ItemBuilder Tasks, die in Projektdateien gespeichert sind, ist eine Runtime (d.h. die Dateien main.*.js und main.*.css) in der Version erforderlich, die genau der Version des CBA ItemBuilders entspricht, der zur Erstellung der Items verwendet wurde (z.B. 9.9.0). Bevor Sie den IRTLib-Editor verwenden, vergewissern Sie sich, dass die erforderliche Runtime enthalten ist, oder importieren Sie die Runtime-Dateien (siehe Abschnitt Einstellungen für Details).\n\nHinweis: Für die Verwendung von CBA ItemBuilder-Items ab Version 9.9 ist dieser Schritt in der Regel nicht notwendig.\n\n\n\n\nErstellen einer neuen Studie: Der IRTlib-Editor wird verwendet, um sogenannte Studien zu konfigurieren. Die Versionen von Studien können im Editor nachverfolgt werden, Studien können dort veröffentlicht (d.h. für die Datenerfassung versiegelt) werden. Um mit dem IRTlib-Editor mit der Erstellung von Inhalten zu beginnen, muss zuerst eine Studie erstellt werden (siehe Abschnitt Studien für Details).\n\n\n\n\n\n\n\nHinweis: Das Anlegen einer Studie ist immer notwendig.\n\n\n\n\n\nBeachten Sie, dass mindestens eine Studie im IRTlib Editor definiert sein muss, bevor eine Studienkonfiguration zur Datenerfassung mit einem IRTlib Player verwendet werden kann.\n\n\n\n\nBasiskonfigurationen für Studie festlegen (Info): Zu den Basiskonfigurationen, die sich auf den Inhalt einer vorbereiteten Studie beziehen, gehören die Studienbezeichnung und -beschreibung, der Anmeldemodus, die Anzeigekonfiguration, das Menü für die Testadministratoren und die Angabe, wie nach Abschluss aller in einer Studie definierten Inhalte fortgefahren werden soll (siehe Abschnitt Studien für weitere Einzelheiten).\nErstellen eines neuen Erhebungsteils: Jede Studie besteht aus einem oder mehreren Erhebungsteilen. Erhebungsteile werden als Bausteine von Assessments betrachtet, die zusammen verwaltet werden, wie z.B. Items aus einer bestimmte Domäne. Erhebungsteile vom Typ CBA ItemBuilder können verwendet werden, um CBA ItemBuilder-Aufgaben in einer linearen Sequenz oder mit Blockly-basiertem Routing zu administrieren.\n\n\n\n\n\n\n\nHinweis: Das Anlegen eines Erhebungsteils ist immer notwendig.\n\n\n\n\n\nBeachten Sie, dass jede Studie mindestens einen im IRTlib Editor definierten Erhebungsteil benötigt, bevor eine Studienkonfiguration zur Datenerhebung mit einem IRTlib Player verwendet werden kann.\n\n\n\n\nGrundeinstellungen für Erhebungsteil konfigurieren (Info): Ein Erhebungsteil vom Typ CBA ItemBuilder basiert auf einer Menge von CBA ItemBuilder-Tasks. Jede CBA ItemBuilder-Projektdatei benötigt mindestens einen Task, es werden aber auch Projekte mit mehreren Tasks unterstützt. Wenn CBA ItemBuilder-Inhalte mit einem gemeinsamen Zeitlimit über Tasks hinweg administriert werden sollen, erlauben Erhebungsteile die Zuordnung von Aufgaben zu einer Struktur, die Assessmentinhalte unterscheidet, welche vor einem zeitlich begrenzten Abschnitt administriert werden (z.B. Instruktionen, im Abschnitt Vorspann-Items), Inhalte die nach einem zeitlich begrenzten Abschnitt administriert werden (z.B. Danksagung, im Abschnitt Nachspann-Items) und dazwischen liegende Aufgaben mit begrenzter Zeit (Items, siehe Abschnitt Erhebungsteile).\nItems Hinzufügen: Um die Definition eines Erhebungsteils abzuschließen, müssen die CBA ItemBuilder-Projektdateien in den Abschnitt Items importiert werden. Standardmäßig wird davon ausgegangen, dass die Reihenfolge der CBA ItemBuilder-Tasks linear ist. Wenn jedoch das Routing für einen Studienteil aktiviert ist, kann das Blockly-basierte Ablaufdefinition verwendet werden, um verschiedene Testdesigns zu implementieren (z. B. mehrere Hefte, mehrstufige Tests usw.).\n\n\n\nFür die Verwendung des IRTlib Editors ist eine Programmhilfe direkt in die Anwendung integriert, welche über das kleine ?-Symbol oben rechts eingeblendet werden kann.\n\n\n\nBeispiel des IRTlib Editors mit eingeblendeter Hilfe\n\n\n\n\n\n\n\n\nEingebettete Programmhilfe\n\n\n\nDie Inhalte dieser Hilfe-Seiten aus dem IRTlib Editor sind in diese IRTlib Dokumentation integriert und werden immer in diesem Rahmen mit der überschrift Eingebettete Programmhilfe dargestellt.\n\n\n\n\n\nDie IRTlib Software wird benötigt, um die mit dem CBA ItemBuilder erstellten Assessmentinhalte anzuzeigen und für Datenerhebungen zu verwenden. Dafür müssen die Projektdateien (ZIP-Archive), die mit dem CBA ItemBuilder erstellt werden können, vorliegen.\n\n\nJede CBA ItemBuilder-Projektdatei muss mindestens einen Task definieren. Nur Tasks können in der IRTlib Software verwendet werden. Dass ein Task vollständig definiert ist, lässt sich in der Preview des CBA ItemBuilder leicht überprüfen:\n\n\n\nBeispiel aus CBA ItemBuilder zur Anforderung einer Preview für einen Task\n\n\n\n\n\n\n\n\nDie IRTlib Software benötigt definierte Tasks.\n\n\n\nAssessmentinhalte können mit der IRTlib Software aus einzelnen Task zusammgengesetzt werden. Die Reihenfolge von Tasks kann statisch als lineare Sequenz oder als programmierter Ablauf in Blockly definiert werden. Aus der IRTlib Software heraus können keine einzelnen Seiten innerhalb von CBA ItemBuilder-Tasks angesteuert werden.\n\n\nCBA ItemBuilder-Projektdateien welche nur über die Option Project oder Page in der Preview angezeigt werden können, lassen sich in der IRTlib Software nicht verwenden.\n\n\n\nMit Hilfe der Preview des CBA ItemBuilder kann auch geprüft werden, ob die Assessmentinhalte in der gewünschten Skalierung, die unter Scaling Options eingestellt werden kann, den Erfordernissen entsprechend angezeigt werden.\n\n\n\nEinstellungen zu Scaling Options aus CBA ItemBuilder-Preview\n\n\nEinstellungen analog zur Preview können in dem IRTlib Editor für die Anzeigeeinstellungen einer Studie definiert werden (siehe Abschnitt Studien).\n\n\n\nDie IRTlib Software ist dafür gedacht, Daten mit Hilfe von CBA ItemBuilder-Task zu erheben. Was aus der Bearbeitung eines Tasks an Ergebnisvariablen gespeichert wird, können Itemautoren in der Scoring-Definition eines Tasks definieren.\n\n\n\n\n\n\nDas Scoring muss bereits im CBA ItemBuilder definiert werden.\n\n\n\nAus der Bearbeitung von Tasks werden die als Classes definierten Ergebnisvariablen gespeichert, deren Werte entweder einzelne Hits sein können, oder die Übernahme von Informationen mit Hilfe des sogenannten ResultText-Operators im CBA ItemBuilder.\n\n\nMit Hilfe des eingebauten Scoring Debug Window sollte das Scoring einzelner CBA ItemBuider-Tasks bereits im CBA ItemBuilder geprüft werden, bevor die Assessmentinhalte mit Hilfe der IRTlib Software zu Studien mit einem oder mehreren Erhebungsteilen kombiniert werden. Weitere Hinweise zu vorgeschlagenen Prüfungen sind im Abschnitt Auslieferungen Testen und Freigeben formuliert.\n\n\n\n\n\n\nLog-Daten werden automatisch gesammelt.\n\n\n\nOhne weitere Konfiguration werden Log-Daten in den mit dem CBA ItemBuilder erstellten Assessmentinhalten automatisch erfasst und über die IRTlib Software gesammelt.\n\n\n\n\n\nDie mit dem CBA ItemBuilder erstellten Assessmentinhalte können Multimedia-Inhalte (Bilder, Videos, Audiodateien) enthalten. Bilder und Videos werden dabei in einer Größe angezeigt, die in der entsprechenden Komponente des CBA ItemBuilder im Page Editor verwendet wird. In den Projektdateien werden Bilder, Videos und Audiodateien als Ressourcen gespeichert, sobald diese über den Ressource Browser eingefügt wurden. Nicht verwendete Ressourcen bleiben dabei in den Projektdateien enthalten.\n\n\n\n\n\n\nDateigröße von CBA ItemBuilder-Projektdateien sollte möglichst klein sein.\n\n\n\nDie Dateigröße von CBA ItemBuilder-Projekdateien ist für die Verwendung insbesondere in Online-Auslieferungen relevant und sollte so klein wie möglich gehalten werden.\n\n\nVor der Verwendung von CBA ItemBuilder-Projektdateien wird empfohlen, folgende Punkte zu berücksichtigen:\n\nBilder und Videos nur in der benötigten Größe: Bilder und Videos können ohne Qualitätsverlust auf die Größe (Breite/Width udn Höhe/Height) reduziert werden, in welcher sie in CBA ItemBuilder-Projekten auch wirklich verwendet werden.\nBilder wenn möglich komprimieren: Ohne die Bildgröße zu verändern können Bilder häufig in der Dateigröße weiter reduziert werden.\nVideos wenn möglich komprimieren: Ohne die Video zu verändern können Videos häufig in der Dateigröße weiter reduziert werden.\nAudios nicht in höchster Qualität: Wenn nicht notwendig, sollten Audio-Dateien in ihrer Qualität soweit reduziert werden, dass sie noch akzeptabel klingen, aber bzgl. der Übertragungszeiten optimiert sind.\nEntfernen nicht verwendeter Ressourcen: Der CBA ItemBuilder stellt eine Schaltfläche im Resource Browser zur verfügung, um nicht verwendeten Ressourcen automatisch zu entfernen. Diese Funktion sollte abschließend genutzt werden, damit die Projekt-Dateien keine unnötigen Ressourcen enthalten.\n\nEin sorgsamer Umgang mit Ressourcen und eine Optimierung der Dateigröße von CBA ItemBuilder-Projektdateien kann entscheidend für ein flüssiges und reibungsfreies Assessment sein, was sich mit der IRTlib Software online ausliefern und bspw. über Mobilgeräte mit beschränkter Internetbandbreite nutze lässt."
  },
  {
    "objectID": "preparation-overview.html#eingebettete-programhilfe",
    "href": "preparation-overview.html#eingebettete-programhilfe",
    "title": "Vorbereitung: Übersicht / Preparation: Overview",
    "section": "",
    "text": "Für die Verwendung des IRTlib Editors ist eine Programmhilfe direkt in die Anwendung integriert, welche über das kleine ?-Symbol oben rechts eingeblendet werden kann.\n\n\n\nBeispiel des IRTlib Editors mit eingeblendeter Hilfe\n\n\n\n\n\n\n\n\nEingebettete Programmhilfe\n\n\n\nDie Inhalte dieser Hilfe-Seiten aus dem IRTlib Editor sind in diese IRTlib Dokumentation integriert und werden immer in diesem Rahmen mit der überschrift Eingebettete Programmhilfe dargestellt."
  },
  {
    "objectID": "preparation-overview.html#vorbereitung-von-cba-itembuilder-inhalten",
    "href": "preparation-overview.html#vorbereitung-von-cba-itembuilder-inhalten",
    "title": "Vorbereitung: Übersicht / Preparation: Overview",
    "section": "",
    "text": "Die IRTlib Software wird benötigt, um die mit dem CBA ItemBuilder erstellten Assessmentinhalte anzuzeigen und für Datenerhebungen zu verwenden. Dafür müssen die Projektdateien (ZIP-Archive), die mit dem CBA ItemBuilder erstellt werden können, vorliegen.\n\n\nJede CBA ItemBuilder-Projektdatei muss mindestens einen Task definieren. Nur Tasks können in der IRTlib Software verwendet werden. Dass ein Task vollständig definiert ist, lässt sich in der Preview des CBA ItemBuilder leicht überprüfen:\n\n\n\nBeispiel aus CBA ItemBuilder zur Anforderung einer Preview für einen Task\n\n\n\n\n\n\n\n\nDie IRTlib Software benötigt definierte Tasks.\n\n\n\nAssessmentinhalte können mit der IRTlib Software aus einzelnen Task zusammgengesetzt werden. Die Reihenfolge von Tasks kann statisch als lineare Sequenz oder als programmierter Ablauf in Blockly definiert werden. Aus der IRTlib Software heraus können keine einzelnen Seiten innerhalb von CBA ItemBuilder-Tasks angesteuert werden.\n\n\nCBA ItemBuilder-Projektdateien welche nur über die Option Project oder Page in der Preview angezeigt werden können, lassen sich in der IRTlib Software nicht verwenden.\n\n\n\nMit Hilfe der Preview des CBA ItemBuilder kann auch geprüft werden, ob die Assessmentinhalte in der gewünschten Skalierung, die unter Scaling Options eingestellt werden kann, den Erfordernissen entsprechend angezeigt werden.\n\n\n\nEinstellungen zu Scaling Options aus CBA ItemBuilder-Preview\n\n\nEinstellungen analog zur Preview können in dem IRTlib Editor für die Anzeigeeinstellungen einer Studie definiert werden (siehe Abschnitt Studien).\n\n\n\nDie IRTlib Software ist dafür gedacht, Daten mit Hilfe von CBA ItemBuilder-Task zu erheben. Was aus der Bearbeitung eines Tasks an Ergebnisvariablen gespeichert wird, können Itemautoren in der Scoring-Definition eines Tasks definieren.\n\n\n\n\n\n\nDas Scoring muss bereits im CBA ItemBuilder definiert werden.\n\n\n\nAus der Bearbeitung von Tasks werden die als Classes definierten Ergebnisvariablen gespeichert, deren Werte entweder einzelne Hits sein können, oder die Übernahme von Informationen mit Hilfe des sogenannten ResultText-Operators im CBA ItemBuilder.\n\n\nMit Hilfe des eingebauten Scoring Debug Window sollte das Scoring einzelner CBA ItemBuider-Tasks bereits im CBA ItemBuilder geprüft werden, bevor die Assessmentinhalte mit Hilfe der IRTlib Software zu Studien mit einem oder mehreren Erhebungsteilen kombiniert werden. Weitere Hinweise zu vorgeschlagenen Prüfungen sind im Abschnitt Auslieferungen Testen und Freigeben formuliert.\n\n\n\n\n\n\nLog-Daten werden automatisch gesammelt.\n\n\n\nOhne weitere Konfiguration werden Log-Daten in den mit dem CBA ItemBuilder erstellten Assessmentinhalten automatisch erfasst und über die IRTlib Software gesammelt.\n\n\n\n\n\nDie mit dem CBA ItemBuilder erstellten Assessmentinhalte können Multimedia-Inhalte (Bilder, Videos, Audiodateien) enthalten. Bilder und Videos werden dabei in einer Größe angezeigt, die in der entsprechenden Komponente des CBA ItemBuilder im Page Editor verwendet wird. In den Projektdateien werden Bilder, Videos und Audiodateien als Ressourcen gespeichert, sobald diese über den Ressource Browser eingefügt wurden. Nicht verwendete Ressourcen bleiben dabei in den Projektdateien enthalten.\n\n\n\n\n\n\nDateigröße von CBA ItemBuilder-Projektdateien sollte möglichst klein sein.\n\n\n\nDie Dateigröße von CBA ItemBuilder-Projekdateien ist für die Verwendung insbesondere in Online-Auslieferungen relevant und sollte so klein wie möglich gehalten werden.\n\n\nVor der Verwendung von CBA ItemBuilder-Projektdateien wird empfohlen, folgende Punkte zu berücksichtigen:\n\nBilder und Videos nur in der benötigten Größe: Bilder und Videos können ohne Qualitätsverlust auf die Größe (Breite/Width udn Höhe/Height) reduziert werden, in welcher sie in CBA ItemBuilder-Projekten auch wirklich verwendet werden.\nBilder wenn möglich komprimieren: Ohne die Bildgröße zu verändern können Bilder häufig in der Dateigröße weiter reduziert werden.\nVideos wenn möglich komprimieren: Ohne die Video zu verändern können Videos häufig in der Dateigröße weiter reduziert werden.\nAudios nicht in höchster Qualität: Wenn nicht notwendig, sollten Audio-Dateien in ihrer Qualität soweit reduziert werden, dass sie noch akzeptabel klingen, aber bzgl. der Übertragungszeiten optimiert sind.\nEntfernen nicht verwendeter Ressourcen: Der CBA ItemBuilder stellt eine Schaltfläche im Resource Browser zur verfügung, um nicht verwendeten Ressourcen automatisch zu entfernen. Diese Funktion sollte abschließend genutzt werden, damit die Projekt-Dateien keine unnötigen Ressourcen enthalten.\n\nEin sorgsamer Umgang mit Ressourcen und eine Optimierung der Dateigröße von CBA ItemBuilder-Projektdateien kann entscheidend für ein flüssiges und reibungsfreies Assessment sein, was sich mit der IRTlib Software online ausliefern und bspw. über Mobilgeräte mit beschränkter Internetbandbreite nutze lässt."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home | IRTlib",
    "section": "",
    "text": "IRTlib ist eine Software zur Auslieferung computerbasierter Tests. Die Software besteht aus zwei Komponenten:\n\nIRTLib Editor: Eine Software für Test-Autoren, welche verwendet wird um Studien zu konfigurieren.\nIRTlib Player: Eine Software zur Datenerhebung, mit welcher Zielpersonen Aufgaben bearbeiten, die in Form einer Studie konfiguriert sind.\n\nHinweise zur Installation und Einrichtung beider Programme zur ersten Verwendung finden sich unter Download & Installation.\n\n\n\nVor der Verwendung der IRTlib Software zur Konfiguration und Erstellung von Auslieferungen, müssen mit dem CBA ItemBuilder die Assessmentinhalte (Aufgaben, Instruktionen, Zwischenbildschirme usw.) in Form von einzelnen Tasks erstellt werden.\n\nDer CBA ItemBuilder kann hier heruntergeladen werden: www.itembuilder.de/software\nEine interaktive Dokumentation des CBA ItemBuilder ist hier zugänglich: cba.itembuilder.de\n\nVorgeschlagene Zitierung:\n\nKroehne, U. (2023). Open Computer-based Assessment with the CBA ItemBuilder. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10359757\n\n\n\n\n\n\nCBA ItemBuilder Dokumentation (PDF)\n\n\n\n\n\n\n\nFür die Verwendung der IRTlib Software ist eine kontext-sensitive Programmhilfe direkt in die Anwendung hinterlegt. Die Dokumentation mit der eingebetteten Hilfe ist auf dieser Seite online verfügbar und steht auch als PDF zur Verfügung.\nVorgeschlagene Zitierung:\n\nKroehne, U. (2023). IRTlib Documentation: Software for the administration and delivery of computer-based assessments [IRTlib Dokumentation: Software für die Verwaltung und Auslieferung computergestützter Assessments]. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10441352\n\n\n\n\n\n\nIRTlib Software Dokumentation (PDF)\n\n\n\n\n\nDie Entwicklung vom CBA ItemBuilder und der IRTlib Software wird vom Zentrum für technologiebasiertes Assessment (TBA) am DIPF | Leibniz-Institut für Bildungsforschung und Bildungsinformation koordiniert."
  },
  {
    "objectID": "data-collection-overview.html",
    "href": "data-collection-overview.html",
    "title": "Datenerhebung: Übersicht / Data Collection: Overview",
    "section": "",
    "text": "Nachdem eine Studie mit dem IRTlib Editor angelegt und konfiguriert wurde, muss eine finalisierte Version dieser Konfiguration erstellt werden. Versionen versiegeln und vervollständigen alle Konfigurationen und haben eine eindeutige Versionsnummer (bezeichnet als Revision). Die Verwendung von Revisionen macht die Durchführung von Datensammlungen mit dem IRTlib Editor und IRTlib Player reproduzierbar, da die Revisionsnummer einer Konfiguration auch in den Datensätzen gespeichert wird.\n\nKonfigurationen Prüfen: Vor der Fertigstellung und dem Versiegeln einer Version ist es ratsam, alle Einstellungen noch einmal zu überprüfen. Der IRTlib-Editor stellt dafür eine zusätzliche Funktion der Validierung zur Verfügung.\nVersiegelte Version Erstellen: Wenn keine weiteren Änderungen erforderlich sind, kann die Version versiegelt werden. Dies geschieht durch das Auswählen der noch nicht gespeicherten Änderungen und einen Klick auf das Schloss-Symbol im IRTlib Editor in der Ansicht Veröffentlichen, in welcher die Studienrevisionen angezeigt werden.\nVersion Exportieren: Versionen von Studien, die im IRTlib-Editor verfügbar sind, können exportiert werden. Der Export der Konfiguration ist notwendig, bevor diese mit dem IRTlib-Player verwendet werden können. Beim Exportieren wird die vollständige Studienkonfiguration inklusive der importierten CBA ItemBuilder-Inhalte als ZIP-Archiv heruntergeladen.\nStudie in IRTlib Player Importieren: Exportierte Versionen von Studien aus dem IRTlib-Editor können zur Verwendung in einen IRTlib-Player importiert werden. Für einzelne Studien gibt es einen automatischen Modus, wenn mehrere Studien in einem IRTlib Player simultan verwendet werden sollen, kann diese manuell erfolgen.\nTesten der Studie: Bevor mit der eigentlichen Datenerfassung begonnen werden kann, sollte jede Konfiguration zunächst mit synthetischen Testfällen (d.h. systematisch) getestet werden.\n\nFalls in einer exportierten Studie noch Probleme festgestellt werden, ist es möglich, zur Vorbereitung (siehe Vorbereitung von Studien und Vorbereitung von Erhebungsteilen) zurückzukehren, die Studiendefinition und die Konfiguration der Testteile zu ändern, eine weitere versiegelte Version zu erstellen und mit der geänderten Konfiguration fortzufahren."
  },
  {
    "objectID": "data-collection-overview.html#übersicht-schritte-zur-verwendung-eines-irtlib-player-zur-datenerhebung",
    "href": "data-collection-overview.html#übersicht-schritte-zur-verwendung-eines-irtlib-player-zur-datenerhebung",
    "title": "Datenerhebung: Übersicht / Data Collection: Overview",
    "section": "",
    "text": "Nachdem eine Studie mit dem IRTlib Editor angelegt und konfiguriert wurde, muss eine finalisierte Version dieser Konfiguration erstellt werden. Versionen versiegeln und vervollständigen alle Konfigurationen und haben eine eindeutige Versionsnummer (bezeichnet als Revision). Die Verwendung von Revisionen macht die Durchführung von Datensammlungen mit dem IRTlib Editor und IRTlib Player reproduzierbar, da die Revisionsnummer einer Konfiguration auch in den Datensätzen gespeichert wird.\n\nKonfigurationen Prüfen: Vor der Fertigstellung und dem Versiegeln einer Version ist es ratsam, alle Einstellungen noch einmal zu überprüfen. Der IRTlib-Editor stellt dafür eine zusätzliche Funktion der Validierung zur Verfügung.\nVersiegelte Version Erstellen: Wenn keine weiteren Änderungen erforderlich sind, kann die Version versiegelt werden. Dies geschieht durch das Auswählen der noch nicht gespeicherten Änderungen und einen Klick auf das Schloss-Symbol im IRTlib Editor in der Ansicht Veröffentlichen, in welcher die Studienrevisionen angezeigt werden.\nVersion Exportieren: Versionen von Studien, die im IRTlib-Editor verfügbar sind, können exportiert werden. Der Export der Konfiguration ist notwendig, bevor diese mit dem IRTlib-Player verwendet werden können. Beim Exportieren wird die vollständige Studienkonfiguration inklusive der importierten CBA ItemBuilder-Inhalte als ZIP-Archiv heruntergeladen.\nStudie in IRTlib Player Importieren: Exportierte Versionen von Studien aus dem IRTlib-Editor können zur Verwendung in einen IRTlib-Player importiert werden. Für einzelne Studien gibt es einen automatischen Modus, wenn mehrere Studien in einem IRTlib Player simultan verwendet werden sollen, kann diese manuell erfolgen.\nTesten der Studie: Bevor mit der eigentlichen Datenerfassung begonnen werden kann, sollte jede Konfiguration zunächst mit synthetischen Testfällen (d.h. systematisch) getestet werden.\n\nFalls in einer exportierten Studie noch Probleme festgestellt werden, ist es möglich, zur Vorbereitung (siehe Vorbereitung von Studien und Vorbereitung von Erhebungsteilen) zurückzukehren, die Studiendefinition und die Konfiguration der Testteile zu ändern, eine weitere versiegelte Version zu erstellen und mit der geänderten Konfiguration fortzufahren."
  }
]