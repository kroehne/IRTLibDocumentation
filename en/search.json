[
  {
    "objectID": "github.html",
    "href": "github.html",
    "title": "Github Repositorien / Github Repositories",
    "section": "",
    "text": "The IRTlib Software is free research software in the sense of Open Science. It can be used for non-commercial applications.\nSuggested Citation:\n\nKroehne, U. (2023). IRTlib Documentation: Software for the administration and delivery of computer-based assessments [IRTlib Dokumentation: Software für die Verwaltung und Auslieferung computergestützter Assessments]. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10441352\n\n\n\n\n\n\n\nNote\n\n\n\nTranslation: If you want to help us translate this software, you can find more information here.\n\n\n\n\n\nCurrent versions of the IRTlib software (Windows and Docker): GitHub\nDocumentation: GitHub\n\n\n\n\n\nThe IRTlib software allows the administration of assessment content created with the CBA ItemBuilder.\n\n\n\nCurrent versions of the CBA ItemBuilder (Windows): https://www.itembuilder.de/software\n\n\n\n\nSource code and material for the CBA ItemBuilder are divided into several repositories:\n\nCBA ItemBuilder (desktop application): GitHub (In preparation / still private)\nRuntime environment: GitHub (In preparation / still private)\nExecution environment for developers: GitHub (In preparation / still private)\nTechnical documentation: GitHub (In preparation / still private)\nTechnical example items: GitHub(In preparation / still private)\n\n\n\n\nOnline documentation\n\nHTML (interactive): https://cba.itembuilder.de\n\nPDF (static): Open-Assessments-with-CBA-ItemBuilder.pdf\nSources GitHub (In preparation / still private)\n\nSuggested Citation:\n\nKroehne, U. (2023). Open Computer-based Assessment with the CBA ItemBuilder. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10359757"
  },
  {
    "objectID": "github.html#irtlib-software-2",
    "href": "github.html#irtlib-software-2",
    "title": "Github Repositorien / Github Repositories",
    "section": "",
    "text": "The IRTlib Software is free research software in the sense of Open Science. It can be used for non-commercial applications.\nSuggested Citation:\n\nKroehne, U. (2023). IRTlib Documentation: Software for the administration and delivery of computer-based assessments [IRTlib Dokumentation: Software für die Verwaltung und Auslieferung computergestützter Assessments]. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10441352\n\n\n\n\n\n\n\nNote\n\n\n\nTranslation: If you want to help us translate this software, you can find more information here.\n\n\n\n\n\nCurrent versions of the IRTlib software (Windows and Docker): GitHub\nDocumentation: GitHub"
  },
  {
    "objectID": "github.html#cba-itembuilder-2",
    "href": "github.html#cba-itembuilder-2",
    "title": "Github Repositorien / Github Repositories",
    "section": "",
    "text": "The IRTlib software allows the administration of assessment content created with the CBA ItemBuilder.\n\n\n\nCurrent versions of the CBA ItemBuilder (Windows): https://www.itembuilder.de/software\n\n\n\n\nSource code and material for the CBA ItemBuilder are divided into several repositories:\n\nCBA ItemBuilder (desktop application): GitHub (In preparation / still private)\nRuntime environment: GitHub (In preparation / still private)\nExecution environment for developers: GitHub (In preparation / still private)\nTechnical documentation: GitHub (In preparation / still private)\nTechnical example items: GitHub(In preparation / still private)\n\n\n\n\nOnline documentation\n\nHTML (interactive): https://cba.itembuilder.de\n\nPDF (static): Open-Assessments-with-CBA-ItemBuilder.pdf\nSources GitHub (In preparation / still private)\n\nSuggested Citation:\n\nKroehne, U. (2023). Open Computer-based Assessment with the CBA ItemBuilder. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10359757"
  },
  {
    "objectID": "preparation-studies.html",
    "href": "preparation-studies.html",
    "title": "Vorbereitung Studien / Preparation Studies",
    "section": "",
    "text": "Configurations that are created with the IRTlib editor are summarized in so-called studies. A study is intended to summarize the assessment content that is administered in a survey or session.\n\n\nAfter starting the IRTlib Editor, the Studies view is displayed. In this view, the first step to prepare a new configuration is to add a new study:\n\nThe created studies appear as cards in the Studies view. Note that the order in which the studies are displayed in the Study view does not matter.\nDetailed instructions on how to create a study can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\n\nThe IRTLib Editor is used to create configurations for studies, which can then be used in an IRTLib Player to carry out computer-based assessments.\n\n\nTo start configuring a study, click on the plus icon at the bottom right:\n\n\n\n\n\nThen enter a name and optionally a description in the Create new study dialogue.\nMake sure that only letters (upper and lower case), numbers and a _ are allowed for the name.\n\n\n\n\n\nThen click on Save.\nIf required, you can also assign an image to a study using the following icon. This image is used in the IRTLib Editor for this study:\n\n\n\n\n\n\n\n\nCreated studies are displayed as tiles in the study overview:\n\n\n\n\n\nTo continue with the creation and configuration of a study, click on the small edit icon:\n\n\n\n\n\n\n\n\n\n\nDelete Study: You can also delete studies using the recycle bin icon. The deletion of studies cannot be undone:\n\n\n\n\n\n\n\nChange Language: The menu item Settings takes you to the item General settings, where you can change the language of the IRTLib Editor.\n\n\n\n\n\n\nThis item also gives you access to the CBA ItemBuilder Runtimes available in the IRTLib Editor (support for the use of CBA ItemBuilder content created with different versions of the programme).\n\n\n\n\n\n\n\nThe configurations of a particular study, including versioning and publishing, are managed within studies (i.e. after opening a study for editing by clicking on the edit icon at the bottom right of the card).\nCreated studies that are displayed in the IRTlib Editor in the Studies view can be opened for editing.\n\nDetailed information on the basic configuration of a study can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\n\nName: How should the study be named? Make sure that only letters (upper and lower case), numbers and a _ are allowed for the name.\nDescription: This optional field is provided so that you can enter a detailed description of the study. Special characters and umlauts etc. can also be entered here.\nActivate Routing for Survey Parts: Studies consist of one or more survey parts. The survey parts are administered as a linear sequence by default. If the option Enable Routing for Survey Parts is selected, the order of the Survey Parts can be defined with Blockly-based routing. This enables dynamic sequences of Survey Parts, whereby call parameters of the study can also be used, for example, to assign different sequences.\nCheck screen size: In surveys where the screen size is not known, this option can be used to compare the size of objects (EC card, banknote, ID card) with representations on the screen.\n\n\nThe device check is carried out with the following dialogue:\n\n\n\n\n\nIf the option Force Suitable Screen Size (in the Display section) is not activated, test processing can still be started. If the resolution is too small, the following dialogue is displayed:\n\n\n\n\n\nNote: This option is currently not configurable.\n\n\nIf changed settings are to be retained, the changes must be saved using the disc symbol. Otherwise, the discard icon can be used:\n\n\n\n\n\n\n\n\n\n\n\nThe IRTlib software supports various ways in which people (test participants, respondents, …) can authenticate themselves for an assessment. The configurations include two aspects:\n\nLogin mode: Is access required (login, login+password, passphrases/token) or not? And if credentials are required, what are valid values?\nLogin source: How is the login information retrieved (direct input on the platform, CBA ItemBuilder item, ….) or passed (login parameter or call parameter)?\n\nDetailed information on the configuration of the login of a study can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\nIn the Login section, you can configure how test participants who start an assessment (either by calling up a link in a browser that refers to the online IRTlib Player or by starting the offline IRTlib Player) are to be identified or authenticated.\n\nLogin Mode: The IRTlib Software supports various Login Modes.\n\nRandom identifier: When a session is started for the first time, an identifier is generated in this Login Mode. This random but unique character string (a so-called UUID, i.e. a Universally Unique Identifier) is used as a personal identifier in all data (i.e. result data) and all other stored data (e.g., log data/trace data, snapshot data, etc.).\nUsername: If test participants are expected to identify themselves by a unique string (e.g. a number or text used as an access identifier), a Study can be configured with the Login Mode username. Access to the assessment is then only possible if the character string entered as username is valid. The underlying idea is that the study configuration is loaded with a list of valid usernames and that a test participant must enter a valid username before he or she can start the assessment. Only authenticated test takers can access the assessment content defined as Study and answer the tasks or questions.\nUser Name and Password: If not only valid usernames but also a password is to be used in a Study to authenticate test takers, the Login Mode Username and Password allows a username and password to be entered. Analogue to username, both pieces of information must then be stored in the study configuration.\nAccess Token: If the valid user names are not to be saved in the study configuration, the option Access Token can be used. Each token that corresponds to a defined schema is then accepted and used as an identifier for the test participants.\n\nStorage for Session Data: In the case of online deliveries, an assessment can be continued after an interruption. This functionality is also required, for example, if the page is reloaded in the browser (e.g. by forcing a Reload/F5, or by closing and reopening the URL). To ensure that sessions originating from the same person (i.e. from the same browser) can also be continued, the software can be configured so that the identifier is saved in the client.\nValid Values: The IRTlib Software provides the following credential validation mechanisms for the Login Modes Username, Username and Password and Access Token:\n\nList: A list of valid authorisations (username or username and password, depending on the configuration of the login mode) can be defined as part of the study configuration. The information can either be edited in the IRTlib Editor or imported from a CSV file. Defined values can also be exported as a CSV file.\nCode for checking: A Blockly-function can be specified, which returns True if the transferred login data is valid (otherwise False).\n\nGroup login: Depending on the Login mode, the user name or access token is used as the person identifier. If the Group login option is activated, these transferred login data are used for authentication to identify the test participant as a member of a group (i.e. only test participants who know the user name can authenticate themselves as part of the group). An additional random identifier is then generated within the group to distinguish different people from a group.\nLogin source: The IRTlib Software supports several possible options for how login credentials can be provided.\n\nPlatform: A login dialogue is displayed by the IRTlib Player (i.e. the platform). The heading for entering the access data, the labelling of the input for user name and password, the labelling of the Next button, a welcome text and an instruction text as well as an error text for failed login attempts can be configured.\nParameters: Valid login data for test participants can also be provided via the command line (i.e. parameters when calling up the offline version of the IRTlib Player) or via URL parameters (i.e. parameters when calling up the study via a link to an online version of the IRTlib Player). In this case, no login dialogue or login item is displayed.\nItem: As an alternative to an IRTlib Player dialogue, a CBA ItemBuilder task can also be configured, which serves as a login input mask. Within the item, a so-called ExternalPageFrame is used to send a specific JavaScript command to the IRTlib-Player to validate an input (an example can be found here).\n\n\n\n\nThe login item must be available as a CBA ItemBuilder project file for the configured runtime environment (Runtime) and added to the study configuration. The integrated import dialogue can be used to add a login item to the study configuration. More information on importing CBA ItemBuilder projects can be found in the help for the Items section of a Survey part.\n\n\n\nAdditional parameters: In addition to the authentication of test participants, the login information can also be stored in the IRTlib software as an additional parameter, which can then be used in the flow control, for example.\n\nParameters for file names: The RawDataPath (i.e. the relative path under which the offline IRTlib player saves the results data) and the MonitoringFile (i.e. the name of the file in which the offline IRTlib player writes information for study monitoring) can be configured as part of the login data.\nBlockly variables: Additional parameters can also be stored as so-called preload variables with the login information.\n\n\n\n\n\nTable 1: Summary of Options that can be Combined as Configuration of the Login\n\n\n\n\n\n\n\n\n\n\nLogin Mode\nStorage for Session Data\nGroup Login\nValid Values\nLogin Source\nAdditional Parameters\n\n\n\n\nRandom indictor\nyes\nno\nno\nnone\nno\n\n\nusername\nyes\nyes\nlist or code\nplatform, item + parameter\nvalues or parameter\n\n\nusername and password\nyes\nyes\nlist or code\nplatform, item + parameters\nvalues or parameters\n\n\naccess token\nyes\nyes\nscheme or code\nplatform, item + parameters\nparameters\n\n\n\n\n\n\n\n\n\n\nStudies can define how the CBA ItemBuilder content is to be displayed. The settings in the Display section can relate to the scaling and alignment of the content as well as the behavior of the IRTlib Player application.\nDetailed information on configuring the Display of a Study can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\n\nSelected options are available for configuring the display, which relate to the presentation of the assessment content and the use of CBA ItemBuilder content, which is created with a defined aspect ratio (width and height).\n\n\nIn the Window Mode selection, it can be configured whether an additional window is displayed in the IRTlib Player. The configuration is implemented differently depending on the environment:\n\nWindow: In the configuration Window, a regular programm window is used in the offline IRTlib Player, in the online IRTlib Player the assessment content is displayed in the normal browser area, and the address bar and navigation buttons of the browser are visible in this mode.\n\n\n\n\n\nFull screen: The offline IRTlib Player starts directly in full screen mode if this option is configured. This is also associated with a Kiosk Mode, i.e. access to other programms and (accidental) termination of the programm is only possible via the Task Manager. If a test manager, for example, is to be able to end the test, a Test Administrator Menu must be configured.\n\n\nThe online IRTlib Player can also display assessment content in full-screen mode if this option is selected. If full screen mode is exited in the browser, the assessment content is then hidden. As it is not possible to automatically switch to full-screen mode in a browser, the target person first sees the following message from the platform:\n\n\n\n\n\nBy clicking on the button Activate Full Screen the full screen mode is started and the assessment content is then displayed without window frames and navigation areas of the browser. For a short time, the browser then typically displays a message that full screen mode can be cancelled again with Esc.\n\n\n\n\n\nNote that this function is only available in browsers that support full screen mode (especially on older mobile devices, full screen mode is not fully supported; see for details e.g. on caniuse.com).\n\n\nFull Screen, if Supported: In this mode, the assessment in the online IRTlib Player is only displayed in full screen mode if the browser supports full screen mode. However, the content of the computer-based assessment is displayed in windowed mode when a study is delivered online and a browser that does not support full-screen mode is used. For the IRlLib Player offline, this configuration is identical to full screen.\n\n\n\n\n\nDebug: This mode allows access to the browser’s developer tools during test execution, which are intended for debugging by software developers.\n\n\nIf the offline IRTlib Player is started with a study that has the Debug entry configured as Fixed mode, the so-called developer tools (DevTools) can be called up via the right mouse button during the task presentation.\n\n\n\n\n\n\n\n\nAssessment content created with the CBA ItemBuilder is created for a specific size in pixels (width times height). The content can then be scaled for display on devices with different screen sizes and screen resolutions. In the CBA ItemBuilder, the option under Scaling Options is therefore available in the Preview:\n\n\n\nAnalogue settings can be made in the IRTlib Editor.\n\nScaling: Setting how content should be adjusted if the available space and size of the items differ (Scaling Mode).\n\nNone: The content is displayed without adaptation to the available window or screen size (corresponds to None).\nUpscale: Content is enlarged so that the available space is utilised (corresponds to Up).\nDownscale: Content is scaled down so that it fits on the screen/in the window (corresponds to Down).\nWindow size: Contents are enlarged and reduced (corresponds to Both).\n\nHorizontal Alignment: The options centred / left / right are used to align item content horizontally if the width of the window or screen is greater than the width of the content.\nVertical Alignment: The options centred / top / bottom are used to align item content vertically if the height of the window or screen is greater than the height of the content.\n\n\n\n\nForce suitable screen size: If Scale down or Window size is not selected for Scaling, this option can be used to force that you can only start task editing if the available size of the window or screen is larger than the required width/height of the items. Otherwise, the following message is displayed:\n\n\n\n\n\nNote: The display settings refer to all survey parts within a study. If several studies are configured in an IRTlib player, the settings must match each other, i.e. it is not possible to administer a study in window mode: window or in window mode: full screen at the same time with one instance of an IRTlib player.\n\nIf changed settings are to be retained, the changes must be saved using the disc symbol. Otherwise, the discard icon can be used:\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf the execution of assessments is accompanied by test administrators or interviewers, functions can be defined password-protected for test administrators.\n\n\n\n\n\n\nWarning\n\n\n\nEven if you do not need the functionality of a test administrator menu to carry out your data collection, you should still define a test administrator menu if you plan to collect data offline with the IRTlib Player. This is the only way to ensure that you can exit the application without the Task Manager (and without possible data loss) in the event of unforeseen events.\n\n\nDetailed information on the configuration of the Test Manager menu can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\nThe Test Administrator Menu is configured in two steps. Firstly, a key combination must be defined with which the test administrator menu can be requested. If this key combination is pressed during test taking, a window for entering the password appears. Test administrators enter the password known (only) to them and thus gain access to selected functions. For this purpose, one or more roles can be defined in the IRTlib Editor in a second step.\n\n\nFirstly, a key combination must be defined.\n\nKey: The configuration of the key combination for the test manager menu first requires the definition of a key. To define a key, click in the field and press the key that is to be used for the test manager menu.\nModifiers (Alt, Ctrl and Shift): For a key, you can also specify whether one or more modifiers must be pressed to open the test conductor menu.\n\nExample:\n\nThe following configuration defines the key combination Ctrl + Shift+ X:\n\n\n\n\nThe defined key combination only opens the option to enter a password for test administrators during test processing in the IRTlib Player. To use the function, a password is required, which is defined together with a role in the second step.\n\n\n\nAfter calling up the defined key combination, the prompt to enter a password is displayed during test processing:\n\nWhich functions are actually accessible is controlled by which password is entered. Only if a valid password is known, functions of the test line can be called.\nExample:\n\nIn the following configuration, test administrators can use this password to jump to the next task (Next) or end the application (End session):\n\n\n\n\n\nTo define a role, first click on the + symbol at the bottom right. The name of a role and a password can then be defined:\n\n\n\n\n\nThe name of the role is for documentation purposes only. The assignment of a unique password and the selection of one or more of the following functions are decisive for the functionality:\n\n\nTask back: Enables navigation to the previous task.\nTask forward: Enables navigation to the next task.\nCancel Item List: Allows you to cancel the processing of the current item list. This option is particularly useful if the Routing option is activated in a Survey section and the definition of CBA ItemBuilder tasks is implemented using item lists.\nCancel Survey Part: Enables the cancellation of the current survey part.\nCancel session: Enables the current session to be ended.\nVolume control: Enables the volume to be changed.\n\nThe audio file that is played to control the audio output after the volume has been changed can be inserted in the Audio for sound test section and stored in the study configuration.\n\nIf changed settings are to be retained, the changes must be saved using the disc symbol. Otherwise, the discard icon can be used:\n\n\n\n\n\n\n\n\n\n\n\n\nFor the integration of assessments into external processes, it is possible to configure how to proceed after processing the assessment content in a session, i.e. what will happen at the end of the session.\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\nA Session refers to the execution of a survey with one person at a specific time. The content displayed in a session corresponds to a configured Study as it can be created in the IRTlib Editor. After all parts of the survey defined in a Study have been carried out, the End of Session is reached.\n\n\nWhat happens after a Session End, i.e. how the IRTlib Player behaves at the end of a session, can be defined with the following options:\n\nStart new Session: A new session is started. This behaviour is not useful if the login data is transferred (either as Startup parameter or as URL parameter).\nDisplay End Text: If this option is selected, the platform displays the configured text. The text can be configured as a Message on End Page.\nDisplay End Item: Analogue to a Login Item, a CBA ItemBuilder item can also be defined to be displayed at the end of a session.\n\n\nThe End-Item can finally trigger the termination of the offline IRTlib Player. An example of an End Item with the necessary JavaScript call can be found here.\n\n\nRedirect to Exit URL (Redirect to Exit-Url): For online deliveries with the IRTlib Player it is possible to redirect to a URL. The Redirect URL can then be configured.\n\n\n\n\nSession ID can be Reused: If this option is activated, multiple data captures can be administered with one session ID.\n\nIf changed settings are to be retained, the changes must be saved using the disc symbol. Otherwise, the discard icon can be used:"
  },
  {
    "objectID": "preparation-studies.html#study-administration",
    "href": "preparation-studies.html#study-administration",
    "title": "Vorbereitung Studien / Preparation Studies",
    "section": "",
    "text": "After starting the IRTlib Editor, the Studies view is displayed. In this view, the first step to prepare a new configuration is to add a new study:\n\nThe created studies appear as cards in the Studies view. Note that the order in which the studies are displayed in the Study view does not matter.\nDetailed instructions on how to create a study can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\n\nThe IRTLib Editor is used to create configurations for studies, which can then be used in an IRTLib Player to carry out computer-based assessments.\n\n\nTo start configuring a study, click on the plus icon at the bottom right:\n\n\n\n\n\nThen enter a name and optionally a description in the Create new study dialogue.\nMake sure that only letters (upper and lower case), numbers and a _ are allowed for the name.\n\n\n\n\n\nThen click on Save.\nIf required, you can also assign an image to a study using the following icon. This image is used in the IRTLib Editor for this study:\n\n\n\n\n\n\n\n\nCreated studies are displayed as tiles in the study overview:\n\n\n\n\n\nTo continue with the creation and configuration of a study, click on the small edit icon:\n\n\n\n\n\n\n\n\n\n\nDelete Study: You can also delete studies using the recycle bin icon. The deletion of studies cannot be undone:\n\n\n\n\n\n\n\nChange Language: The menu item Settings takes you to the item General settings, where you can change the language of the IRTLib Editor.\n\n\n\n\n\n\nThis item also gives you access to the CBA ItemBuilder Runtimes available in the IRTLib Editor (support for the use of CBA ItemBuilder content created with different versions of the programme)."
  },
  {
    "objectID": "preparation-studies.html#basic-configurations",
    "href": "preparation-studies.html#basic-configurations",
    "title": "Vorbereitung Studien / Preparation Studies",
    "section": "",
    "text": "The configurations of a particular study, including versioning and publishing, are managed within studies (i.e. after opening a study for editing by clicking on the edit icon at the bottom right of the card).\nCreated studies that are displayed in the IRTlib Editor in the Studies view can be opened for editing.\n\nDetailed information on the basic configuration of a study can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\n\nName: How should the study be named? Make sure that only letters (upper and lower case), numbers and a _ are allowed for the name.\nDescription: This optional field is provided so that you can enter a detailed description of the study. Special characters and umlauts etc. can also be entered here.\nActivate Routing for Survey Parts: Studies consist of one or more survey parts. The survey parts are administered as a linear sequence by default. If the option Enable Routing for Survey Parts is selected, the order of the Survey Parts can be defined with Blockly-based routing. This enables dynamic sequences of Survey Parts, whereby call parameters of the study can also be used, for example, to assign different sequences.\nCheck screen size: In surveys where the screen size is not known, this option can be used to compare the size of objects (EC card, banknote, ID card) with representations on the screen.\n\n\nThe device check is carried out with the following dialogue:\n\n\n\n\n\nIf the option Force Suitable Screen Size (in the Display section) is not activated, test processing can still be started. If the resolution is too small, the following dialogue is displayed:\n\n\n\n\n\nNote: This option is currently not configurable.\n\n\nIf changed settings are to be retained, the changes must be saved using the disc symbol. Otherwise, the discard icon can be used:"
  },
  {
    "objectID": "preparation-studies.html#access-to-studies-login",
    "href": "preparation-studies.html#access-to-studies-login",
    "title": "Vorbereitung Studien / Preparation Studies",
    "section": "",
    "text": "The IRTlib software supports various ways in which people (test participants, respondents, …) can authenticate themselves for an assessment. The configurations include two aspects:\n\nLogin mode: Is access required (login, login+password, passphrases/token) or not? And if credentials are required, what are valid values?\nLogin source: How is the login information retrieved (direct input on the platform, CBA ItemBuilder item, ….) or passed (login parameter or call parameter)?\n\nDetailed information on the configuration of the login of a study can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\nIn the Login section, you can configure how test participants who start an assessment (either by calling up a link in a browser that refers to the online IRTlib Player or by starting the offline IRTlib Player) are to be identified or authenticated.\n\nLogin Mode: The IRTlib Software supports various Login Modes.\n\nRandom identifier: When a session is started for the first time, an identifier is generated in this Login Mode. This random but unique character string (a so-called UUID, i.e. a Universally Unique Identifier) is used as a personal identifier in all data (i.e. result data) and all other stored data (e.g., log data/trace data, snapshot data, etc.).\nUsername: If test participants are expected to identify themselves by a unique string (e.g. a number or text used as an access identifier), a Study can be configured with the Login Mode username. Access to the assessment is then only possible if the character string entered as username is valid. The underlying idea is that the study configuration is loaded with a list of valid usernames and that a test participant must enter a valid username before he or she can start the assessment. Only authenticated test takers can access the assessment content defined as Study and answer the tasks or questions.\nUser Name and Password: If not only valid usernames but also a password is to be used in a Study to authenticate test takers, the Login Mode Username and Password allows a username and password to be entered. Analogue to username, both pieces of information must then be stored in the study configuration.\nAccess Token: If the valid user names are not to be saved in the study configuration, the option Access Token can be used. Each token that corresponds to a defined schema is then accepted and used as an identifier for the test participants.\n\nStorage for Session Data: In the case of online deliveries, an assessment can be continued after an interruption. This functionality is also required, for example, if the page is reloaded in the browser (e.g. by forcing a Reload/F5, or by closing and reopening the URL). To ensure that sessions originating from the same person (i.e. from the same browser) can also be continued, the software can be configured so that the identifier is saved in the client.\nValid Values: The IRTlib Software provides the following credential validation mechanisms for the Login Modes Username, Username and Password and Access Token:\n\nList: A list of valid authorisations (username or username and password, depending on the configuration of the login mode) can be defined as part of the study configuration. The information can either be edited in the IRTlib Editor or imported from a CSV file. Defined values can also be exported as a CSV file.\nCode for checking: A Blockly-function can be specified, which returns True if the transferred login data is valid (otherwise False).\n\nGroup login: Depending on the Login mode, the user name or access token is used as the person identifier. If the Group login option is activated, these transferred login data are used for authentication to identify the test participant as a member of a group (i.e. only test participants who know the user name can authenticate themselves as part of the group). An additional random identifier is then generated within the group to distinguish different people from a group.\nLogin source: The IRTlib Software supports several possible options for how login credentials can be provided.\n\nPlatform: A login dialogue is displayed by the IRTlib Player (i.e. the platform). The heading for entering the access data, the labelling of the input for user name and password, the labelling of the Next button, a welcome text and an instruction text as well as an error text for failed login attempts can be configured.\nParameters: Valid login data for test participants can also be provided via the command line (i.e. parameters when calling up the offline version of the IRTlib Player) or via URL parameters (i.e. parameters when calling up the study via a link to an online version of the IRTlib Player). In this case, no login dialogue or login item is displayed.\nItem: As an alternative to an IRTlib Player dialogue, a CBA ItemBuilder task can also be configured, which serves as a login input mask. Within the item, a so-called ExternalPageFrame is used to send a specific JavaScript command to the IRTlib-Player to validate an input (an example can be found here).\n\n\n\n\nThe login item must be available as a CBA ItemBuilder project file for the configured runtime environment (Runtime) and added to the study configuration. The integrated import dialogue can be used to add a login item to the study configuration. More information on importing CBA ItemBuilder projects can be found in the help for the Items section of a Survey part.\n\n\n\nAdditional parameters: In addition to the authentication of test participants, the login information can also be stored in the IRTlib software as an additional parameter, which can then be used in the flow control, for example.\n\nParameters for file names: The RawDataPath (i.e. the relative path under which the offline IRTlib player saves the results data) and the MonitoringFile (i.e. the name of the file in which the offline IRTlib player writes information for study monitoring) can be configured as part of the login data.\nBlockly variables: Additional parameters can also be stored as so-called preload variables with the login information.\n\n\n\n\n\nTable 1: Summary of Options that can be Combined as Configuration of the Login\n\n\n\n\n\n\n\n\n\n\nLogin Mode\nStorage for Session Data\nGroup Login\nValid Values\nLogin Source\nAdditional Parameters\n\n\n\n\nRandom indictor\nyes\nno\nno\nnone\nno\n\n\nusername\nyes\nyes\nlist or code\nplatform, item + parameter\nvalues or parameter\n\n\nusername and password\nyes\nyes\nlist or code\nplatform, item + parameters\nvalues or parameters\n\n\naccess token\nyes\nyes\nscheme or code\nplatform, item + parameters\nparameters"
  },
  {
    "objectID": "preparation-studies.html#display-of-assessment-content",
    "href": "preparation-studies.html#display-of-assessment-content",
    "title": "Vorbereitung Studien / Preparation Studies",
    "section": "",
    "text": "Studies can define how the CBA ItemBuilder content is to be displayed. The settings in the Display section can relate to the scaling and alignment of the content as well as the behavior of the IRTlib Player application.\nDetailed information on configuring the Display of a Study can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\n\nSelected options are available for configuring the display, which relate to the presentation of the assessment content and the use of CBA ItemBuilder content, which is created with a defined aspect ratio (width and height).\n\n\nIn the Window Mode selection, it can be configured whether an additional window is displayed in the IRTlib Player. The configuration is implemented differently depending on the environment:\n\nWindow: In the configuration Window, a regular programm window is used in the offline IRTlib Player, in the online IRTlib Player the assessment content is displayed in the normal browser area, and the address bar and navigation buttons of the browser are visible in this mode.\n\n\n\n\n\nFull screen: The offline IRTlib Player starts directly in full screen mode if this option is configured. This is also associated with a Kiosk Mode, i.e. access to other programms and (accidental) termination of the programm is only possible via the Task Manager. If a test manager, for example, is to be able to end the test, a Test Administrator Menu must be configured.\n\n\nThe online IRTlib Player can also display assessment content in full-screen mode if this option is selected. If full screen mode is exited in the browser, the assessment content is then hidden. As it is not possible to automatically switch to full-screen mode in a browser, the target person first sees the following message from the platform:\n\n\n\n\n\nBy clicking on the button Activate Full Screen the full screen mode is started and the assessment content is then displayed without window frames and navigation areas of the browser. For a short time, the browser then typically displays a message that full screen mode can be cancelled again with Esc.\n\n\n\n\n\nNote that this function is only available in browsers that support full screen mode (especially on older mobile devices, full screen mode is not fully supported; see for details e.g. on caniuse.com).\n\n\nFull Screen, if Supported: In this mode, the assessment in the online IRTlib Player is only displayed in full screen mode if the browser supports full screen mode. However, the content of the computer-based assessment is displayed in windowed mode when a study is delivered online and a browser that does not support full-screen mode is used. For the IRlLib Player offline, this configuration is identical to full screen.\n\n\n\n\n\nDebug: This mode allows access to the browser’s developer tools during test execution, which are intended for debugging by software developers.\n\n\nIf the offline IRTlib Player is started with a study that has the Debug entry configured as Fixed mode, the so-called developer tools (DevTools) can be called up via the right mouse button during the task presentation.\n\n\n\n\n\n\n\n\nAssessment content created with the CBA ItemBuilder is created for a specific size in pixels (width times height). The content can then be scaled for display on devices with different screen sizes and screen resolutions. In the CBA ItemBuilder, the option under Scaling Options is therefore available in the Preview:\n\n\n\nAnalogue settings can be made in the IRTlib Editor.\n\nScaling: Setting how content should be adjusted if the available space and size of the items differ (Scaling Mode).\n\nNone: The content is displayed without adaptation to the available window or screen size (corresponds to None).\nUpscale: Content is enlarged so that the available space is utilised (corresponds to Up).\nDownscale: Content is scaled down so that it fits on the screen/in the window (corresponds to Down).\nWindow size: Contents are enlarged and reduced (corresponds to Both).\n\nHorizontal Alignment: The options centred / left / right are used to align item content horizontally if the width of the window or screen is greater than the width of the content.\nVertical Alignment: The options centred / top / bottom are used to align item content vertically if the height of the window or screen is greater than the height of the content.\n\n\n\n\nForce suitable screen size: If Scale down or Window size is not selected for Scaling, this option can be used to force that you can only start task editing if the available size of the window or screen is larger than the required width/height of the items. Otherwise, the following message is displayed:\n\n\n\n\n\nNote: The display settings refer to all survey parts within a study. If several studies are configured in an IRTlib player, the settings must match each other, i.e. it is not possible to administer a study in window mode: window or in window mode: full screen at the same time with one instance of an IRTlib player.\n\nIf changed settings are to be retained, the changes must be saved using the disc symbol. Otherwise, the discard icon can be used:"
  },
  {
    "objectID": "preparation-studies.html#menu-for-test-administrators",
    "href": "preparation-studies.html#menu-for-test-administrators",
    "title": "Vorbereitung Studien / Preparation Studies",
    "section": "",
    "text": "If the execution of assessments is accompanied by test administrators or interviewers, functions can be defined password-protected for test administrators.\n\n\n\n\n\n\nWarning\n\n\n\nEven if you do not need the functionality of a test administrator menu to carry out your data collection, you should still define a test administrator menu if you plan to collect data offline with the IRTlib Player. This is the only way to ensure that you can exit the application without the Task Manager (and without possible data loss) in the event of unforeseen events.\n\n\nDetailed information on the configuration of the Test Manager menu can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\nThe Test Administrator Menu is configured in two steps. Firstly, a key combination must be defined with which the test administrator menu can be requested. If this key combination is pressed during test taking, a window for entering the password appears. Test administrators enter the password known (only) to them and thus gain access to selected functions. For this purpose, one or more roles can be defined in the IRTlib Editor in a second step.\n\n\nFirstly, a key combination must be defined.\n\nKey: The configuration of the key combination for the test manager menu first requires the definition of a key. To define a key, click in the field and press the key that is to be used for the test manager menu.\nModifiers (Alt, Ctrl and Shift): For a key, you can also specify whether one or more modifiers must be pressed to open the test conductor menu.\n\nExample:\n\nThe following configuration defines the key combination Ctrl + Shift+ X:\n\n\n\n\nThe defined key combination only opens the option to enter a password for test administrators during test processing in the IRTlib Player. To use the function, a password is required, which is defined together with a role in the second step.\n\n\n\nAfter calling up the defined key combination, the prompt to enter a password is displayed during test processing:\n\nWhich functions are actually accessible is controlled by which password is entered. Only if a valid password is known, functions of the test line can be called.\nExample:\n\nIn the following configuration, test administrators can use this password to jump to the next task (Next) or end the application (End session):\n\n\n\n\n\nTo define a role, first click on the + symbol at the bottom right. The name of a role and a password can then be defined:\n\n\n\n\n\nThe name of the role is for documentation purposes only. The assignment of a unique password and the selection of one or more of the following functions are decisive for the functionality:\n\n\nTask back: Enables navigation to the previous task.\nTask forward: Enables navigation to the next task.\nCancel Item List: Allows you to cancel the processing of the current item list. This option is particularly useful if the Routing option is activated in a Survey section and the definition of CBA ItemBuilder tasks is implemented using item lists.\nCancel Survey Part: Enables the cancellation of the current survey part.\nCancel session: Enables the current session to be ended.\nVolume control: Enables the volume to be changed.\n\nThe audio file that is played to control the audio output after the volume has been changed can be inserted in the Audio for sound test section and stored in the study configuration.\n\nIf changed settings are to be retained, the changes must be saved using the disc symbol. Otherwise, the discard icon can be used:"
  },
  {
    "objectID": "preparation-studies.html#completion-of-surveys",
    "href": "preparation-studies.html#completion-of-surveys",
    "title": "Vorbereitung Studien / Preparation Studies",
    "section": "",
    "text": "For the integration of assessments into external processes, it is possible to configure how to proceed after processing the assessment content in a session, i.e. what will happen at the end of the session.\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\nA Session refers to the execution of a survey with one person at a specific time. The content displayed in a session corresponds to a configured Study as it can be created in the IRTlib Editor. After all parts of the survey defined in a Study have been carried out, the End of Session is reached.\n\n\nWhat happens after a Session End, i.e. how the IRTlib Player behaves at the end of a session, can be defined with the following options:\n\nStart new Session: A new session is started. This behaviour is not useful if the login data is transferred (either as Startup parameter or as URL parameter).\nDisplay End Text: If this option is selected, the platform displays the configured text. The text can be configured as a Message on End Page.\nDisplay End Item: Analogue to a Login Item, a CBA ItemBuilder item can also be defined to be displayed at the end of a session.\n\n\nThe End-Item can finally trigger the termination of the offline IRTlib Player. An example of an End Item with the necessary JavaScript call can be found here.\n\n\nRedirect to Exit URL (Redirect to Exit-Url): For online deliveries with the IRTlib Player it is possible to redirect to a URL. The Redirect URL can then be configured.\n\n\n\n\nSession ID can be Reused: If this option is activated, multiple data captures can be administered with one session ID.\n\nIf changed settings are to be retained, the changes must be saved using the disc symbol. Otherwise, the discard icon can be used:"
  },
  {
    "objectID": "preparation-overview.html",
    "href": "preparation-overview.html",
    "title": "Vorbereitung: Übersicht / Preparation: Overview",
    "section": "",
    "text": "The preparation of a computer-based assessment based on CBA ItemBuilder content begins with the use of the IRTlib Editor to create a study configuration. This usually involves the following steps:\n\n\n\n\n\n\nOptional: Using a Runtime for CBA ItemBuilder before version 9.9?\n\n\n\n\n\n\nRequirement: Check the availability of the Runtime. The IRTlib Editor can be used to prepare assessments with content created using the CBA ItemBuilder. To use CBA ItemBuilder Tasks stored in project files, a runtime (i.e. the files main.*.js and main.*.css) is required in the version that corresponds exactly to the version of the CBA ItemBuilder used to create the items (e.g. 9.9.0). Before using the IRTLib-Editor, make sure that the required Runtime is included or import the runtime files (see section Settings for details).\n\nNote: When using CBA ItemBuilder items from version 9.9, this step is generally not necessary.\n\n\n\n\nCreating a new Study: The IRTlib Editor is used to configure so-called Studies. The versions of studies can be tracked in the editor, studies can be published there (i.e. sealed for data collections). To start creating content with the IRTlib Editor, a study must first be created (see section Studies for‚ details).\n\n\n\n\n\n\n\nNote: Creating a Study is always necessary.\n\n\n\n\n\nNote that at least one Study must be defined in the IRTlib Editor before a study configuration can be used for data collection with an IRTlib Player.\n\n\n\n\nDefine Basic Configurations for Study (Info): Basic configurations related to the content of a prepared study include the study name and description, login mode, display configuration, test administrator menu, and how to proceed after completing all content defined in a study (see Studies section for more details).\nCreating a new Survey Part: Each Study consists of one or more Survey Parts. Survey Parts are considered to be building blocks of assessments that are administered together, such as items from a particular domain. Survey Parts of type CBA ItemBuilder can be used to administer CBA ItemBuilder tasks in a linear sequence or with Blockly-based routing.\n\n\n\n\n\n\n\nNote: Creating a Survey Part is always necessary.\n\n\n\n\n\nNote that each Study requires at least one Survey Part defined in the IRTlib Editor before a Study configuration can be used for data collection with an IRTlib Player.\n\n\n\n\nConfigure basic settings for survey part (Info): A Survey Part of type CBA ItemBuilder is based on a set of CBA ItemBuilder-Tasks. Each CBA ItemBuilder-project file requires at least one task, but projects with multiple tasks are also supported. If CBA ItemBuilder content with a common time limit is to be administered across tasks, assessment sections allow the assignment of tasks to a structure that distinguishes assessment content that is administered before a time-limited section (e.g. instructions, in the task section). e.g. instructions, in the section preparation-parts), content that is administered after a time-limited section (e.g. acknowledgements, in the section post-parts) and tasks with limited time in between (items, see section [preparation-parts.qmd]).\nAdd Items: To finalise the definition of a Survey Part, the CBA ItemBuilder project files must be imported into the Items section. By default, it is assumed that the order of the CBA ItemBuilder-Tasks is linear. However, if Routing is enabled for a study section, the Blockly-based sequence definition can be used to implement different test designs (e.g. multiple booklets, multi-stage tests, etc.).\n\n\n\nFor the use of the IRTlib Editor, a programme help is integrated directly into the application, which can be displayed via the small ? symbol in the top right-hand corner.\n\n\n\nExample of the IRTlib Editor with embedded help\n\n\n\n\n\n\n\n\nEmbedded Programm Help\n\n\n\nThe contents of these help pages from the IRTlib Editor are integrated into this IRTlib Documentation and are always displayed in this frame with the title Embedded Programme Help.\n\n\n\n\n\nThe IRTlib Software is required to display the assessment content created with the CBA ItemBuilder and to use CBA ItemBuilder content for data collections. The project files (ZIP archives) that can be created with the CBA ItemBuilder must be available for this.\n\n\nEach CBA ItemBuilder project file must define at least one task. Only tasks can be used in the IRTlib software. It is easy to check that a task is fully defined in the Preview of the CBA ItemBuilder:\n\n\n\nExample from CBA ItemBuilder to request a Preview for a Task\n\n\n\n\n\n\n\n\nThe IRTlib software requires defined tasks.\n\n\n\nAssessment content can be assembled from individual Tasks using the IRTlib Software. The sequence of Tasks can be defined statically as a linear sequence or as a programmed sequence in Blockly. No individual pages within CBA ItemBuilder-Tasks can be controlled from the IRTlib Software.\n\n\nCBA ItemBuilder-Project files which can only be displayed via the Project or Page option in the Preview cannot be used in the IRTlib Software.\n\n\n\nThe Preview of the CBA ItemBuilder can also be used to check whether the assessment contents are displayed in the desired scaling, which can be set under Scaling Options, according to the requirements.\n\n\n\nSettings for Scaling Options from CBA ItemBuilder-Preview\n\n\nSettings similar to Preview can be defined in the IRTlib Editor for the display settings of a Study (see section Studies).\n\n\n\nThe IRTlib software is designed to collect data with the help of CBA ItemBuilder-Task. What result variables are saved from the processing of a task can be defined by item authors in the scoring definition of a task.\n\n\n\n\n\n\nThe scoring must already be defined in the CBA ItemBuilder.\n\n\n\nThe result variables defined as Classes are saved from the processing of Tasks, the values of which can either be individual Hits or the transfer of information using the so-called ResultText operator in the CBA ItemBuilder.\n\n\nUsing the built-in Scoring Debug Window, the scoring of individual CBA ItemBuider tasks should already be checked in the CBA ItemBuilder before the assessment contents are combined into studies with one or more survey parts using the IRTlib software. Further information on suggested checks is formulated in the section Deliveries Testing and Release.\n\n\n\n\n\n\nLog data is collected automatically.\n\n\n\nWithout further configuration, log data is automatically recorded in the assessment content created with the CBA ItemBuilder and collected via the IRTlib software.\n\n\n\n\n\nThe assessment content created with the CBA ItemBuilder can contain multimedia content (images, videos, audio files). Images and videos are displayed in a size that is used in the corresponding component of the CBA ItemBuilder in the Page Editor. Images, videos and audio files are saved as resources in the project files as soon as they have been inserted via the Resource Browser. Unused resources remain in the project files.\n\n\n\n\n\n\nFile size of CBA ItemBuilder project files should be as small as possible\n\n\n\nThe file size of CBA ItemBuilder project files is particularly relevant for use in online deliveries and should be kept as small as possible.\n\n\nBefore using CBA ItemBuilder-project files, it is recommended to consider the following points:\n\nImages and videos only in the required size: Images and videos can be reduced to the size (width and height) in which they are actually used in CBA ItemBuilder-Projects without any loss of quality.\nCompress images if possible: Without changing the image size, images can often be further reduced in file size.\nCompress videos if possible: Without changing the video, videos can often be further reduced in file size.\nAudio not in the highest quality: If not necessary, audio files should be reduced in quality so that they still sound acceptable but are optimised in terms of transmission times.\nRemove unused resources: The CBA ItemBuilder provides a button in the Resource Browser to automatically remove unused resources. This function should be used at the end so that the project files do not contain any unnecessary resources.\n\nCareful handling of resources and optimisation of the file size of CBA ItemBuilder project files can be decisive for a smooth and trouble-free assessment, which can be delivered online with the IRTlib software and used, for example, via mobile devices with limited internet bandwidth."
  },
  {
    "objectID": "preparation-overview.html#embedded-programme-help",
    "href": "preparation-overview.html#embedded-programme-help",
    "title": "Vorbereitung: Übersicht / Preparation: Overview",
    "section": "",
    "text": "For the use of the IRTlib Editor, a programme help is integrated directly into the application, which can be displayed via the small ? symbol in the top right-hand corner.\n\n\n\nExample of the IRTlib Editor with embedded help\n\n\n\n\n\n\n\n\nEmbedded Programm Help\n\n\n\nThe contents of these help pages from the IRTlib Editor are integrated into this IRTlib Documentation and are always displayed in this frame with the title Embedded Programme Help."
  },
  {
    "objectID": "preparation-overview.html#preparation-of-cba-itembuilder-content",
    "href": "preparation-overview.html#preparation-of-cba-itembuilder-content",
    "title": "Vorbereitung: Übersicht / Preparation: Overview",
    "section": "",
    "text": "The IRTlib Software is required to display the assessment content created with the CBA ItemBuilder and to use CBA ItemBuilder content for data collections. The project files (ZIP archives) that can be created with the CBA ItemBuilder must be available for this.\n\n\nEach CBA ItemBuilder project file must define at least one task. Only tasks can be used in the IRTlib software. It is easy to check that a task is fully defined in the Preview of the CBA ItemBuilder:\n\n\n\nExample from CBA ItemBuilder to request a Preview for a Task\n\n\n\n\n\n\n\n\nThe IRTlib software requires defined tasks.\n\n\n\nAssessment content can be assembled from individual Tasks using the IRTlib Software. The sequence of Tasks can be defined statically as a linear sequence or as a programmed sequence in Blockly. No individual pages within CBA ItemBuilder-Tasks can be controlled from the IRTlib Software.\n\n\nCBA ItemBuilder-Project files which can only be displayed via the Project or Page option in the Preview cannot be used in the IRTlib Software.\n\n\n\nThe Preview of the CBA ItemBuilder can also be used to check whether the assessment contents are displayed in the desired scaling, which can be set under Scaling Options, according to the requirements.\n\n\n\nSettings for Scaling Options from CBA ItemBuilder-Preview\n\n\nSettings similar to Preview can be defined in the IRTlib Editor for the display settings of a Study (see section Studies).\n\n\n\nThe IRTlib software is designed to collect data with the help of CBA ItemBuilder-Task. What result variables are saved from the processing of a task can be defined by item authors in the scoring definition of a task.\n\n\n\n\n\n\nThe scoring must already be defined in the CBA ItemBuilder.\n\n\n\nThe result variables defined as Classes are saved from the processing of Tasks, the values of which can either be individual Hits or the transfer of information using the so-called ResultText operator in the CBA ItemBuilder.\n\n\nUsing the built-in Scoring Debug Window, the scoring of individual CBA ItemBuider tasks should already be checked in the CBA ItemBuilder before the assessment contents are combined into studies with one or more survey parts using the IRTlib software. Further information on suggested checks is formulated in the section Deliveries Testing and Release.\n\n\n\n\n\n\nLog data is collected automatically.\n\n\n\nWithout further configuration, log data is automatically recorded in the assessment content created with the CBA ItemBuilder and collected via the IRTlib software.\n\n\n\n\n\nThe assessment content created with the CBA ItemBuilder can contain multimedia content (images, videos, audio files). Images and videos are displayed in a size that is used in the corresponding component of the CBA ItemBuilder in the Page Editor. Images, videos and audio files are saved as resources in the project files as soon as they have been inserted via the Resource Browser. Unused resources remain in the project files.\n\n\n\n\n\n\nFile size of CBA ItemBuilder project files should be as small as possible\n\n\n\nThe file size of CBA ItemBuilder project files is particularly relevant for use in online deliveries and should be kept as small as possible.\n\n\nBefore using CBA ItemBuilder-project files, it is recommended to consider the following points:\n\nImages and videos only in the required size: Images and videos can be reduced to the size (width and height) in which they are actually used in CBA ItemBuilder-Projects without any loss of quality.\nCompress images if possible: Without changing the image size, images can often be further reduced in file size.\nCompress videos if possible: Without changing the video, videos can often be further reduced in file size.\nAudio not in the highest quality: If not necessary, audio files should be reduced in quality so that they still sound acceptable but are optimised in terms of transmission times.\nRemove unused resources: The CBA ItemBuilder provides a button in the Resource Browser to automatically remove unused resources. This function should be used at the end so that the project files do not contain any unnecessary resources.\n\nCareful handling of resources and optimisation of the file size of CBA ItemBuilder project files can be decisive for a smooth and trouble-free assessment, which can be delivered online with the IRTlib software and used, for example, via mobile devices with limited internet bandwidth."
  },
  {
    "objectID": "data-collection-publish-and-export.html",
    "href": "data-collection-publish-and-export.html",
    "title": "Datenerhebung: Veröffentlichen & Exportieren / Data Collection: Publish & Export",
    "section": "",
    "text": "The configuration of Studies and the Survey Part(s) contained therein is carried out in the IRTlib Editor. Changes are always saved within the IRTlib Editor when the disc symbol at the bottom right is clicked. During the preparation of a study, the changes are saved if they are to be applied. But once the preparation is completed, changes should no longer be possible or at least be tracked so that the version in the IRTlib Editor corresponds to the version in the IRTlib Player.\nTo support this process of using IRTlib Editor and IRTlib Player, the following concept has been implemented. To ensure that the configuration of a Study used for data collection can be clearly identified at all times, the configuration must be sealed before it is transferred to an IRTlib Player.\nThis is done in the Publish view of a study, in which the Study versions are listed. For a new study, this view initially looks like this:\n\nIn this state, you can make changes to the settings of the Study and all contained Survey Parts.\nThe buttons for Validate, Download and Publish studies are greyed out because no revision is selected. The buttons can be activated by clicking on the line with the unpublished revision 1:\n\nBefore you continue, please check that you have thought of everything. Use the following checklist to do this.\n\n\n\nIs the login configured?\n\n\nTo ensure that the correct study can be started after starting the IRTlib Player, a login mode suitable for the planned use must be configured. The login mode can be defined in the Study configuration in the Login section.\n\n\nIs a test leader menu configured?\n\n\nIf kiosk mode is activated in the offline IRTlib Player, it may be difficult or impossible to exit the application without a configured test conductor menu. Key combinations and passwords with roles are defined in the Study configuration in the Test leader menu section.\n\n\nAre the items inserted?\n\n\nThe assessment content is configured in one or more survey-parts. Most CBA ItemBuilder-tasks will be located in the Items section of a survey part.\n\n\nAre the runtime environments (Runtimes) available?\n\n\nRuntimes* are configured in the Settings.\n\nOnce you have checked this checklist, you can continue as described in the next section.\n\n\n\nThe process to validate, publish and download study configurations is described in the embedded help:\n\n\n\n\n\n\nEmbedded programme help\n\n\n\n\n\n\nBefore a Version of a Study is published, the Validate button can be used to check whether the Study has been configured correctly.\n\n\n\nFor example, a Study must always contain at least one Survey Part definition If this is not the case, the following message appears when validating:\n\nNote: If no errors are found during Validation, no further message is displayed and the study can be published.\nIf there are no more errors and the Study is to be prepared for export, a Version can be created. The following button is used for this purpose:\n\n\n\nThe following dialogue then appears:\n\n\n\n\nData can be collected with an IRTlib Player if a published study has been downloaded from the IRTlib Editor as a ZIP archive."
  },
  {
    "objectID": "data-collection-publish-and-export.html#checklist-before-publishing",
    "href": "data-collection-publish-and-export.html#checklist-before-publishing",
    "title": "Datenerhebung: Veröffentlichen & Exportieren / Data Collection: Publish & Export",
    "section": "",
    "text": "Is the login configured?\n\n\nTo ensure that the correct study can be started after starting the IRTlib Player, a login mode suitable for the planned use must be configured. The login mode can be defined in the Study configuration in the Login section.\n\n\nIs a test leader menu configured?\n\n\nIf kiosk mode is activated in the offline IRTlib Player, it may be difficult or impossible to exit the application without a configured test conductor menu. Key combinations and passwords with roles are defined in the Study configuration in the Test leader menu section.\n\n\nAre the items inserted?\n\n\nThe assessment content is configured in one or more survey-parts. Most CBA ItemBuilder-tasks will be located in the Items section of a survey part.\n\n\nAre the runtime environments (Runtimes) available?\n\n\nRuntimes* are configured in the Settings.\n\nOnce you have checked this checklist, you can continue as described in the next section."
  },
  {
    "objectID": "data-collection-publish-and-export.html#publish-export",
    "href": "data-collection-publish-and-export.html#publish-export",
    "title": "Datenerhebung: Veröffentlichen & Exportieren / Data Collection: Publish & Export",
    "section": "",
    "text": "The process to validate, publish and download study configurations is described in the embedded help:\n\n\n\n\n\n\nEmbedded programme help\n\n\n\n\n\n\nBefore a Version of a Study is published, the Validate button can be used to check whether the Study has been configured correctly.\n\n\n\nFor example, a Study must always contain at least one Survey Part definition If this is not the case, the following message appears when validating:\n\nNote: If no errors are found during Validation, no further message is displayed and the study can be published.\nIf there are no more errors and the Study is to be prepared for export, a Version can be created. The following button is used for this purpose:\n\n\n\nThe following dialogue then appears:\n\n\n\n\nData can be collected with an IRTlib Player if a published study has been downloaded from the IRTlib Editor as a ZIP archive."
  },
  {
    "objectID": "download.html",
    "href": "download.html",
    "title": "Download & Installation",
    "section": "",
    "text": "The IRTlib software is provided for offline use (currently for Windows operating systems) and for online use (in the form of Docker containers).\n\n\nThe IRTlib software (IRTlib Editor and IRTlib Player) for offline use can be obtained and downloaded from the [Releases] section of the repository https://github.com/DIPFtba/IRTlibDeploymentSoftware. Two ZIP archives are available for download in the Releases section.\nTestApp.Editor.Desktop.exe: Is in TestApp.Editor.Desktop.zip and must be started to use the IRTlib Editor.\nTestApp.Player.Desktop.exe: Is included in TestApp.Player.Desktop.zip and must be started to use the IRTlib Player.\n\n\n\n\n\n\nNote: Versions from the current development as Preview.\n\n\n\n\n\nNote that the latest build can be found in the Preview section of the Release section of the repository. Preview versions are the latest version of the software, after the last published version of the IRTlib Software. To obtain reproducible results, published versions should always be used.\n\n\n\n\n\n\n\n\n\nNote: Warning message at programme start\n\n\n\n\n\nThe automatically created preview versions of the IRTlib Editor and IRTlib Player are not signed. A warning message from the operating system must be accepted before the programmes can be executed. Depending on the configuration of the operating system, the executable files of the IRTlib software can also be classified as unknown and additionally warned against their use.\n\n\n\n\n\nThe IRTlib Editor for offline use is provided as a ZIP archive (e.g. TestApp.Editor.Desktop.zip), which must be unpacked. After unpacking the editor, the application TestApp.Editor.Desktop.exe can be started on a Windows device.\nThe sections Preparation &gt; Overview, Preparation &gt; Studies and Preparation &gt; Survey parts document how to prepare and configure data surveys with the help of CBA ItemBuilder items.\n\n\n\nThe IRTlib Player is also available as a Windows application for offline use and is provided as a ZIP archive (e.g. TestApp.Player.Desktop.zip). After unpacking the IRTlib Player, a published study configuration is required that is to be used for data collection.\nAfter adding the contents of a published study provided as study configuration, the executable file TestApp.Player.Desktop.exe can be started (either with or without start parameters).\n\nKiosk Mode: The IRTlib Player can be used directly for data collection via the executable file TestApp.Player.Desktop.exe on the computer on which it is running locally. The Study can be configured so that it is displayed in a Kiosk Mode on one screen and can only be terminated via the Task Manager or the Test Manager Menu (see Full Screen Mode in the section Configuration for display).\nLocal Server: The IRTlib Player can also be run as a local server. After starting the programme TestApp.Player.Server.exe, a configured Study can also be delivered via Webbrowser or other browsers with Kiosk Mode (e.g. the Safe Exam Browser). With this configuration, data can be collected, for example, in schools without an internet connection but with a notebook acting as a bring-in server.\n\nThe sections Data collection &gt; Overview, Data collection &gt; Publish & export and Data collection &gt; Integration & delivery document how data collection can be carried out using the IRTlib Player in the various constellations.\n\n\n\n\nThe IRTlib software (IRTlib Editor and IRTlib Player) for online use can be obtained as a Docker container. An example can be found at https://github.com/DIPFtba/IRTlibDeploymentSoftware.\nTo use the Docker container, it is recommended to clone the repository on the target device and execute the command ./start.sh in the docker folder (requires installed docker and docker compose) to start the software.\nIf nothing is changed in the docker-compose.yml file, the editor is accessible via port 8002 and the player software via port 8001.\nThe section Data collection &gt; Integration & delivery contains further information on using the Docker containers."
  },
  {
    "objectID": "download.html#offline-windows-2",
    "href": "download.html#offline-windows-2",
    "title": "Download & Installation",
    "section": "",
    "text": "The IRTlib software (IRTlib Editor and IRTlib Player) for offline use can be obtained and downloaded from the [Releases] section of the repository https://github.com/DIPFtba/IRTlibDeploymentSoftware. Two ZIP archives are available for download in the Releases section.\nTestApp.Editor.Desktop.exe: Is in TestApp.Editor.Desktop.zip and must be started to use the IRTlib Editor.\nTestApp.Player.Desktop.exe: Is included in TestApp.Player.Desktop.zip and must be started to use the IRTlib Player.\n\n\n\n\n\n\nNote: Versions from the current development as Preview.\n\n\n\n\n\nNote that the latest build can be found in the Preview section of the Release section of the repository. Preview versions are the latest version of the software, after the last published version of the IRTlib Software. To obtain reproducible results, published versions should always be used.\n\n\n\n\n\n\n\n\n\nNote: Warning message at programme start\n\n\n\n\n\nThe automatically created preview versions of the IRTlib Editor and IRTlib Player are not signed. A warning message from the operating system must be accepted before the programmes can be executed. Depending on the configuration of the operating system, the executable files of the IRTlib software can also be classified as unknown and additionally warned against their use.\n\n\n\n\n\nThe IRTlib Editor for offline use is provided as a ZIP archive (e.g. TestApp.Editor.Desktop.zip), which must be unpacked. After unpacking the editor, the application TestApp.Editor.Desktop.exe can be started on a Windows device.\nThe sections Preparation &gt; Overview, Preparation &gt; Studies and Preparation &gt; Survey parts document how to prepare and configure data surveys with the help of CBA ItemBuilder items.\n\n\n\nThe IRTlib Player is also available as a Windows application for offline use and is provided as a ZIP archive (e.g. TestApp.Player.Desktop.zip). After unpacking the IRTlib Player, a published study configuration is required that is to be used for data collection.\nAfter adding the contents of a published study provided as study configuration, the executable file TestApp.Player.Desktop.exe can be started (either with or without start parameters).\n\nKiosk Mode: The IRTlib Player can be used directly for data collection via the executable file TestApp.Player.Desktop.exe on the computer on which it is running locally. The Study can be configured so that it is displayed in a Kiosk Mode on one screen and can only be terminated via the Task Manager or the Test Manager Menu (see Full Screen Mode in the section Configuration for display).\nLocal Server: The IRTlib Player can also be run as a local server. After starting the programme TestApp.Player.Server.exe, a configured Study can also be delivered via Webbrowser or other browsers with Kiosk Mode (e.g. the Safe Exam Browser). With this configuration, data can be collected, for example, in schools without an internet connection but with a notebook acting as a bring-in server.\n\nThe sections Data collection &gt; Overview, Data collection &gt; Publish & export and Data collection &gt; Integration & delivery document how data collection can be carried out using the IRTlib Player in the various constellations."
  },
  {
    "objectID": "download.html#online-docker-2",
    "href": "download.html#online-docker-2",
    "title": "Download & Installation",
    "section": "",
    "text": "The IRTlib software (IRTlib Editor and IRTlib Player) for online use can be obtained as a Docker container. An example can be found at https://github.com/DIPFtba/IRTlibDeploymentSoftware.\nTo use the Docker container, it is recommended to clone the repository on the target device and execute the command ./start.sh in the docker folder (requires installed docker and docker compose) to start the software.\nIf nothing is changed in the docker-compose.yml file, the editor is accessible via port 8002 and the player software via port 8001.\nThe section Data collection &gt; Integration & delivery contains further information on using the Docker containers."
  },
  {
    "objectID": "data-collection-overview.html",
    "href": "data-collection-overview.html",
    "title": "Datenerhebung: Übersicht / Data Collection: Overview",
    "section": "",
    "text": "Once a Study has been created and configured using the IRTlib Editor, a finalised Version of this configuration must be created. Versions seal and finalise all configurations and have a unique version number (referred to as a Revision). The use of Revisions makes the administration of data collections with the IRTlib Editor and IRTlib Player reproducible, as the revision number of a configuration is also saved in the data sets.\n\nCheck Configurations:Before finalising and sealing a version, it is suggested to check all settings again. The IRTlib Editor provides an additional Validation feature for this purpose.\nCreate Sealed Version: If no further changes are required, the version can be sealed. This is done by selecting the changes that have not yet been saved and clicking on the lock symbol in the IRTlib Editor in the Publish view, in which the Study revisions are displayed.\nExport version: Versions of studies that are available in the IRTlib Editor can be exported. It is necessary to export the configuration before it can be used with the IRTlib Player. When exporting, the complete study configuration including the imported CBA ItemBuilder content is downloaded as a ZIP archive.\nImport Study into IRTlib Player: Exported versions of studies from the IRTlib Editor can be imported into an IRTlib Player for use. There is an automatic mode for individual Studies. If several Studies are to be used simultaneously in one IRTlib Player, this can be configured manually.\nTesting the Study: Before the actual data collection can begin, each configuration should first be tested with synthetic test cases (i.e. systematically).\n\nIf problems are still detected in an exported study, it is possible to return to the preparation (see Preparation of studies and Preparation of survey parts), modify the study definition and the configuration of the test parts, create another sealed version and continue with the modified configuration."
  },
  {
    "objectID": "data-collection-overview.html#overview-steps-for-using-an-irtlib-player-for-data-collections",
    "href": "data-collection-overview.html#overview-steps-for-using-an-irtlib-player-for-data-collections",
    "title": "Datenerhebung: Übersicht / Data Collection: Overview",
    "section": "",
    "text": "Once a Study has been created and configured using the IRTlib Editor, a finalised Version of this configuration must be created. Versions seal and finalise all configurations and have a unique version number (referred to as a Revision). The use of Revisions makes the administration of data collections with the IRTlib Editor and IRTlib Player reproducible, as the revision number of a configuration is also saved in the data sets.\n\nCheck Configurations:Before finalising and sealing a version, it is suggested to check all settings again. The IRTlib Editor provides an additional Validation feature for this purpose.\nCreate Sealed Version: If no further changes are required, the version can be sealed. This is done by selecting the changes that have not yet been saved and clicking on the lock symbol in the IRTlib Editor in the Publish view, in which the Study revisions are displayed.\nExport version: Versions of studies that are available in the IRTlib Editor can be exported. It is necessary to export the configuration before it can be used with the IRTlib Player. When exporting, the complete study configuration including the imported CBA ItemBuilder content is downloaded as a ZIP archive.\nImport Study into IRTlib Player: Exported versions of studies from the IRTlib Editor can be imported into an IRTlib Player for use. There is an automatic mode for individual Studies. If several Studies are to be used simultaneously in one IRTlib Player, this can be configured manually.\nTesting the Study: Before the actual data collection can begin, each configuration should first be tested with synthetic test cases (i.e. systematically).\n\nIf problems are still detected in an exported study, it is possible to return to the preparation (see Preparation of studies and Preparation of survey parts), modify the study definition and the configuration of the test parts, create another sealed version and continue with the modified configuration."
  },
  {
    "objectID": "preparation-parts.html",
    "href": "preparation-parts.html",
    "title": "Vorbereitung: Erhebungsteile / Preparation: Study Parts",
    "section": "",
    "text": "Assessments that are administered with the IRTlib software consist of so-called survey parts.After configuring a study, at least one survey part must be created.\n\n\nAfter creating a study, the next step in preparing a test evaluation is to add a new survey part in the Survey parts view:\n\nThe created survey parts appear as cards in the Survey parts view. If studies consist of several survey parts, the order of the survey parts can be adjusted in the Survey parts / Overview view for linear processes. If survey parts are to be controlled depending on variables (e.g. passed preload variables or other blockly variables), routing between survey parts can be configured as an alternative.\nDetailed instructions for creating survey parts can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\nThe IRTLib Editor is used to create configurations for Studies, which can then be used in an IRTLib Player to carry out computer-based assessments. Studies consist of one or more Survey Parts.\n\n\nOnce a Study has been created, a Survey Part can now be added via the plus icon at the bottom right:\n\n\n\n\n\nThen enter a Name and optionally a Description in the Create new Survey Part dialogue.\nMake sure that only letters (upper and lower case), numbers and a _ are allowed for the name.\nThen click on Save.\n\n\n\n\n\nIf required, you can also assign an image to a survey part using the following icon. This image is used in the IRTLib Editor for this Survey Part:\n\n\n\n\n\n\n\n\nCreated survey parts are displayed as tiles in the survey part overview:\n\n\n\n\n\n\nTo continue with the configuration of a survey part, click on the small edit icon:\n\n\n\n\n\n\n\nDelete survey section: You can also use the recycle bin icon to delete survey parts. The deletion of survey parts cannot be undone:\n\n\n\n\n\n\n\n\n\nIf the option Enable Routing for Survey Parts is not selected in the Info view (section Overview) in the configuration of a Study, then Survey Parts are administered in the order in which they are displayed in the survey part administration.\n\nMove Survey Parts: To change the order of Survey Parts using drag-and-drop, the Change Order mode must first be activated using the following toggle icon:\n\n\n\n\n\n\n\nThe tiles can then be put in the desired order. The Change Order mode is ended when the disc icon is clicked or the changes are discarded:\n\n\n\n\n\n\n\n\n\n\nThe order of study parts can be changed in the study parts view:\n\nBefore adding or selecting CBA ItemBuilder projects, as described in the section Assessment contents (items), selected items can be configured in the Info view.\nA detailed description can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\n\n\n\nDesignation: The internal name of the survey part, which is displayed in the IRTlib Editor for editing and defining the process. Designations must not contain any special characters, spaces or umlauts and must not begin with a number.\nDescription:Optional, additional description of a survey part.\n\n\n\n\n\nEnable Routing: The configured assessment contents in the Items section can be administered as a linear sequence, i.e. in the configured order.If a different sequence is to be used, the Enable Routing option can be selected here. The sequence can then be specified as a visual program in the Routing section.\n\n\n\n\n\nUse snapshot: So that CBA ItemBuilder tasks can be visited multiple times, their content is saved in so-called snapshots when the item is exited. Snapshots can also be used to display the contents of a CBA ItemBuilder task again at a later time. This option should only be deactivated if there is an important reason and the consequences (i.e. the unsaved snapshot data) have been carefully considered.\n\n\n\n\n\nAdding and managing CBA ItemBuilder projects within the IRTlib Editor is done in the Items section.\n\n\n\n\n\n\nNote on time limit\n\n\n\n\n\nFor the administration of time-limited survey parts, a time limit can be defined under processing-time. If the option Limit processing time is activated, one or more tasks can be defined, which are displayed in the event of a timeout. In addition, content can be defined in the pre-item(s) and post-item(s) section, which is administered before or after the time-limited part.\n\n\n\n\n\n\nThe contents that are to be used in a survey section of type CBA ItemBuilder are transferred to the configuration via the IRTlib Editor, i.e. the configuration created with the IRTlib Editor also contains the CBA ItemBuilder Project Files. The Items view is available for adding or updating CBA ItemBuilder projects.\nA detailed description can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\n\n\nImporting CBA ItemBuilder project files: The IRTlib Editor maintains a list of known items to which CBA ItemBuilder project files that are not yet known can be added. To add a project file, first open the List of known items with the + symbol and then select the Import button.\n\n\n\n\n\n\n\n\n\n\nUpdate already imported CBA ItemBuilder project files: If a CBA ItemBuilder project file is already included in the List of Known Items, the project files can be updated. They are then not added to the List of known items, but the existing CBA ItemBuilder project file is stored in a newer version. To update an item, it must first be selected in the list of items in a survey section. This activates the update symbol. In the Update item dialogue that then opens, an updated version of a CBA ItemBuilder project file can be added using the Import button.\n\n\n\n\n\n\n\n\n\n\n\nPreview of CBA ItemBuilder project files: Items added in a Survey Part section can be viewed directly in the IRTlib Editor in a built-in preview function. To view an item, it must first be selected in the list of items in a survey section. The Preview can then be called up using the eye symbol:\n\n\n\n\n\n\n\nExporting CBA ItemBuilder project files: CBA ItemBuilder project files that have been imported into the IRTlib Editor can be exported for further editing with the CBA ItemBuilder. To export a selected item from the list of items in a Survey Part, the download icon can be called up:\n\n\n\n\n\n\n\nDeletion of CBA ItemBuilder project files: The items inserted in Survey Parts can be deleted from a Survey Part. The delete symbol removes the item from a Survey Part, but it remains in the list of known items:\n\n\n\n\n\n\n\nNote: It is not yet possible to delete CBA ItemBuilder project files from the List of known items. This functionality is not necessary because CBA ItemBuilder project files are only transferred from the IRTlib Editor to the configuration of a Study if Tasks from a CBA ItemBuilder project file are used in a Survey Part.\n\n\n\n\n\nSorting CBA ItemBuilder project files: If the Enable Routing option is not selected for a Survey Part, then the order can be adjusted in the list of items using the following button:\n\n\n\n\n\n\n\nThe items are then administered exactly as they appear for a Survey Part in this list.\n\nNote: Changes to the Items view must be saved using the disc symbol or discarded using the undo symbol:\n\n\n\n\n\n\n\n\n\n\n\n\nIf the administration of a linear sequence of CBA ItemBuilder tasks is to be administered with a limited processing time, this can be implemented by defining a maximum processing time (in seconds). If, for example, a test content is to be administered for a maximum of 28 minutes, a time of 1680 seconds is defined as the processing time. The message that is to be displayed when the processing time expires can be defined as one (or more) CBA ItemBuilder tasks.\nA detailed description can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\nSurvey Parts without Routing can easily contain a time-limited section. To do this, the option Restrict Item Time is activated in the Time Limit view and a time limit in seconds (&gt;0) is entered.\nFour groups of CBA ItemBuilder Tasks are distinguished for a time limit, which are defined in different places in the IRTlib Editor. The items for which the time limit is to apply are defined in the Items view (analogue to non-time-limited Survey Parts):\n\nItems: Items that are displayed until the time limit has been reached.\n\nIn the Time Limit view, the following can also be defined:\n\nTimeout Items: Items that are only displayed if the time-limited items have not been completed within the limited processing time.\n\nFinally, the following tasks can be defined as individual views of the configuration of survey items:\n\nPrologue Items: Items that are displayed before the time-limited section.\nEpilog items: Items that are displayed after the time-limited section.\n\nThe icons for the following operations are available in all the above dialogues:\n\nAdd: \nRefresh: \nPreview: \nDownload/Export: \nDelete: \nSort: \n\nNote: More complex designs with several timers can be implemented with the IRTlib Editor if the option Enable Routing is activated in the overview view for a Survey Part.\nNote: Changes to the Time Limit view must be saved using the disc symbol or discarded using the undo symbol:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpening/closing credits items\n\n\n\nA central concept for the implementation of time limits in the IRTlib software is the separation of time-limited items and additional assessment content that is administered before or after the time-limited part.\n\n\n\nItems administered after a potentially time-limited section of an assessment are referred to as post-items.\n\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\nSurvey Parts allow the definition of items in different sections. Items in this section Epilogue Item(s) are displayed after the items defined in the Items section of a Survey Part. The separation into Epilogue Item(s) and Items is particularly useful if a time limit is activated under Time Restriction.\nThe following options are available for configuring items in the Epilogue Item(s) section:\n\nAdd: \nRefresh: \nPreview: \nDownload/Export: \nDelete: \nSort: \n\nNote: Changes to the Epilogue Item(s) view must be saved using the disc symbol or discarded using the undo symbol:\n\n\n\n\nItems that are administered before a potentially time-limited section of a survey part are called prefix items.\n\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\nThe Survey Parts allow the definition of items in different sections. Items in this section Prologue Item(s) are displayed before the items defined in the Items section of a Survey Part. The separation into Prologue Item(s) and Items is particularly useful if a time limit is activated under Time Restriction.\nThe following options are available for configuring items in the Prologue Item(s) section:\n\nAdd: \nRefresh: \nPreview: \nDownload/Export: \nDelete: \nSort: \n\nNote: Changes to the Prologue Item(s) view must be saved using the disc symbol or discarded using the undo symbol:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnder Development\n\n\n\nThis function is currently under development.\n\n\n\n\n\n\n\n\nEmbedded Program Help\n\n\n\n\n\n(This functionality is still under development).\n\n\n\n\n\n\n\n\n\n\n\n\nUnder Development\n\n\n\nThis function is currently under development.\n\n\n\n\n\n\n\n\nEmbedded Program Help\n\n\n\n\n\n(This functionality is still under development).\n\n\n\n\n\n\n\n\n\n\n\n\nUnder Development\n\n\n\nThis function is currently under development.\n\n\n\n\n\n\n\n\nEmbedded Program Help\n\n\n\n\n\n(This functionality is still under development).\n\n\n\n\n\n\nIf CBA ItemBuilder tasks are not to be administered in a linear sequence that is fixed in advance and identical for all test subjects, then the Routing function of the IRTlib software can be used.\nA detailed description of Routing within survey parts can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\n\n\nThe sequence of CBA ItemBuilder tasks can be defined here using Blockly (i.e. a form of visual programming). Blockly-based sequencing is available if the option Enable Routing is selected for a Survey Part. The option can be found in the Info section of a Survey Part. If it is activated, the Survey Part contains the entry Routing.\n\nOverview:\n\nExamples: linear sequence, simple test booklets, sequence with time restriction and booklet designs\nQuick guide: General notes on the Blockly editor\nBasics: Using the Blockly editor\n\nDisplaying items or item lists\nDefinition of time limits\nChanges to the test administrator menu\n\nDeepening: Advanced Blockly use\n\nFlow control with conditions\nFlow control with loops\nOperators for numbers, text, times and lists.\nMore in-depth information on Blockly-variables and Blockly-functions\nUse of item results in the flow definition\nBlockly operators for encoding missing values and for writing data\n\ncommenting on Blockly code\nCustomisation of the presentation of Blockly code\n\n\n\n\nThe basic idea of using Blockly for the definition of processes in computer-based assessments will first be illustrated with a few examples.\n\n\nExample for linear sequence\n\n\nBased on the CBA ItemBuilder Tasks added to a survey part in the Items view, a linear sequence of Tasks corresponds to the following Blockly definition:\n\n\n\n\n\nA list of CBA ItemBuilder Tasks is passed to the Blockly element Show Items, which is created with the operator create list with. The list is processed in the order shown, whereby each CBA ItemBuilder Tasks is displayed until the NEXT_TASK- Command is executed.\n\n\nAn equivalent formulation of a linear sequence can also be made with several Show Items blocks if no back navigation is necessary:\n\n\n\n\n\nExample for simple test booklets\n\n\nWith the help of an variable (here: booklet) and a simple if/make-condition, it is now possible to define a sequence that administers different items depending on the value of the variable:\n\n\n\n\n\nThe items for start and end are always administered, tasks 1-3 only if the variable Booklet has the value 0, tasks 4 and 5 if the variable Booklet has a value other than 0.\n\n\nAlternatively, the identical sequence can also be created using the Blockly operator for displaying item lists:\n\n\n\n\n\nBoth variants are completely equivalent in terms of functionality, but the second approach with lists allows the use of the back navigation option within the booklet-specific tasks.\n\nExample for process with time limit\n\nTo implement time-limited sections within a survey section using the Blockly configuration, the following Blockly component can be used:\n\n\n\n\n\nEach sequence begins with a start task that is not time-limited and ends with an end task that is also not time-limited. In between, there is a time limit for a section called MyFirstTimer, which has a time limit of 60 seconds.\n\n\nTasks 1, 2 and 3 are displayed in the Runtime code section with a time limit. If a timeout occurs, i.e. the three tasks are not processed within the 60 seconds, task 4 is displayed (also without a time limit).\n\nExample of simple booklet design with time limit\n\nFor many items, the definition of booklet designs, i.e. task sequences with balanced positions, can be simplified using functions or lists.\n\n\nIf no back navigation is necessary, functions can be used for the definition of clusters:\n\n\n\n\n\nWith back navigation, the functions can return lists of tasks:\n\n\n\n\n\nFor more information see here.\n\n\n\n(top)\n\n\n\n\nProcesses are defined in the visual Blockly editor. Execution begins with the element that is aligned furthest up. If necessary, the workspace can be automatically aligned using the tidy-up function. To add Blockly operators, they can be dragged and dropped from the palette.\n\n\nDelete: Operators can be dragged to the recycle bin to delete them. Selected Blockly elements can also be deleted using the Delete(delete) button. Alternatively, selected Blockly elements can also be deleted via the context menu.\nRedo/Undo: Individual actions can be undone within the Blockly editor. The key combination ‘Ctrl + Z’ can be used for this. Pressing ‘Ctrl + Y’ repeats an action. By clicking in an empty section of the Blockly editor, you can access a context menu, which also contains the options for Undo and Redo:\n\n\n\n\n\nSave: Customisations in the Blockly editor must be saved. The floppy disc symbol is available for this purpose at the bottom right:\n\n\n\n\n\nIf you want to discard the change (as a whole), you can use the discard icon at the bottom right.\n\n\nZoom: The view in the workspace can be enlarged with the icons + and reduced with -.\n\n\n\nContext menu: Further options are available via the right mouse button (context menu) in the Blocky editor. To call up these functions, a secondary click (right mouse button) must be performed on a Blockly element:\n\nCopy duplicates the selected Blockly element, including all connected elements.\nCommenting on blocks is possible.\nBlocks can be deactivated/activated.\nSome block types allow you to change the display form external/internal.\nBlocks that contain further blocks can be folded/unfolded.\nBlocks can also be deleted via the context menu.\n\n\n\n\n\n\n\n\nSome Blockly elements also provide a Help entry in the context menu, which refers to generally accessible Blockly documents (https://github.com/google/blockly/wiki/).\n\n\n\n(top)\n\n\n\n\n\n\nThe basic functions for using the Blockly environment to control assessments can be found in the Session section.\n\n\n\nCBA ItemBuilder tasks that have been imported in the Items view for a survey section can be accessed in the flow control, as shown in the examples above, using the following Blockly element for Tasks:\n\nThe element, which can be found in the Session section of the Blockly editor palette, can be configured using the selection list. Each Blockly element for tasks can refer to exactly one specific task, i.e. a flow definition usually consists of several such elements.\nBlockly elements for tasks cannot be inserted directly into the flow, but are used together with a Show Item element:\n\nThe example for simple test booklets illustrates that sequences in the blockly definition are often defined by a sequence of several show item operators. Show Item operators can be inserted into conditions and loops, both within the main flow and within functions.\n\n\n\nWith the help of Blocky-based flow control, it is also possible to administer CBA ItemBuilder tasks multiple times within a flow:\n\nWhen an item is called up again, the status from the last visit is restored, i.e. processing is continued. If items are to be resubmitted several times, i.e. unedited, automatic restoration may not be desired. The checkbox for specifying a scope (scope) can be optionally activated for this purpose:\n\nIf nothing else is specified, the item is administered in the “default” scope. Alternatively, a text can be defined, as shown in the following example:\n\nOn the first visit, the task is displayed in the Scope “Visit1”. This is followed by a new, independent display of the task in a different scope (“Visit2”). In the third call, the task is displayed again with the data that was already collected during the first visit (i.e. the Scope “Visit1” is used again).\n\n\n\n\nAs shown in the example for linear sequence, linear tests can also be displayed using lists of tasks.\nLists can be used with the Blockly operator Show Items:\n \n\nBack navigation: The Show Items element for lists can be configured via the Can navigate back property. If this property is selected, CBA ItemBuilder-Tasks can use the Command BACK_TASK to request navigation to the previous CBA ItemBuilder Tasks.\nCancelling lists: The use of lists also allows lists to be cancelled. Lists can be cancelled in two ways:\n\nThe Command CANCEL_TASK, which can be used within CBA ItemBuilder Tasks, is called.\nIn the test administrator menu, which has been configured for the study and, if necessary, customised using the Blockly operator Edit test administrator menu, the function Cancel item list is called.\n\n\n\nThis cancels the administration of an item list and the Blockly process is continued after the Show Items block.\n\n\n\n\n\nThe operators Show Item (for individual items) and Show Items (for item lists) are also available as operators for value assignments:\n\nThese can be used to assign item processing results to variables (string or array) and then evaluate them for process control.\n\nSingle task:\n\n\n\n\n\nList of tasks:\n\n\n\n\n\n\n\n\nAs already illustrated in the example process with time restriction, the Blockly block Start time with name can be used to implement the time-restricted administration of items.\nThe Blockly element Start timer with name allows the definition of time limits. Each time limit can have its own name. The time must also be specified in seconds. This can be used to define the type of time to be used:\n\n\nRealtime: The timer runs in real time. It is not affected by server downtimes or a session restart.\nServertime: The timer runs in server time. Is not affected by a session restart, but does not take server downtime into account.\nSessiontime: The timer runs within a session. Is interrupted in the event of an interruption due to server downtime or a session restart.\nClienttime: The timer only runs in client time and is also interrupted when the session is paused.\n\nFinally, two positions can be filled with further blockly operators (such as one or more Show Item blocks for displaying individual items or one or more Show Items blocks for displaying lists):\n\nRuntime code: These blocks are filled until the defined time has elapsed.\nElapsed code: These blocks are only filled in if the Runtime code was not completed within the time.\n\n\n\n\n\nIn the study definition, test administrator menu functions can be created for one or more roles. Roles combine different functions that can be differentiated using the password to be entered by the test administrator.\nCustomise standard functions: The following standard functions can be defined for a study in the Info / Test leader menu section:\n\nNavigation: Task forward / Task back\nLists*: Cancel item list\nExit*: End survey part and end session\nVolume control*: Adjust the audio volume during the assessment\n\n\nDuring the processing of a survey section, the following blockly operator can be used to customise the test administrator menu in the flow control for specific contexts:\n\n\n\n\n\nThe test administrator menu can be changed for each of the standard functions (in the Function section) for a role (in the Group section) as well as the button label (in the Label section):\n\n\nAdd: Function is added to the test leader menu\nRemove: Function is removed from the test conductor menu\nDeactivate*: Function is deactivated in the test conductor menu\nActivate*: Function is activated in the test conductor menu\n\n\n\n\n\nCalling this Blockly operator in the test sequence defines the behaviour of the test administrator menu in the rest of the test sequence. In contrast to Remove, deactivated functions remain visible in the Test Manager menu, but cannot be executed (until they are activated again).\n\nUsing Blockly functions in the Test Manager menu: The Blockly operator for editing the test leader menu also contains the option to execute Blockly code (ExecuteBockly) in the Function section:\n\n\n\n\nIf ExecuteBlockly is selected, a function defined within the Blockly editor can be selected in the Blockly element Edit test administrator menu. The Blockly operators defined in this function are then executed when a test leader selects the corresponding button in the test leader menu at runtime.\n\n\n\n(top)\n\n\n\n\n\n\n\n\n\nThe Logic section contains the Blockly operator if/make, which can be used to implement conditions in the flow. Conditions are logical expressions, e.g. checking whether a preload variable has a certain value:\n\nThe blocky operators defined within the condition block (i.e. next to make) are only executed if the condition (if) is fulfilled. The example checks whether a Boolean variable has the value true.\nThe condition is defined as a separate block that is connected to the blockly operator if/make. Here are the two components separately:\n\nCondition:\n\n\n\n\n\nLogical expression:\n\n\n\n\n\n\n\n\nLogical expressions in conditions are based either on value comparisons or returns from functions. Value comparisons can be realised with the following blockly element:\n\nThe two slots can be filled with values. A corresponding Blockly element is provided in the Logic section for Boolean values (true/false):\n\nConditions are also possible with variables of a different data type:\n\nFor numerical values, there is a corresponding Blockly element in the Math section, which contains operators for numbers and simple mathematical operations:\n\nWith its help and a numeric variable, the following condition can be formulated:\nFor technical reasons, it may also be necessary to check whether a variable has no value at all. This can be implemented by using the blockly component null:\n\nCombination of logical expressions: Individual conditions or logical expressions can be combined with the following Blockly element from the Logic section:\n\n\n\n\nAn and and an or linking of the statements is available for selection. The and link is true if both expressions are true, the or link is true if at least one of the two expressions (or both expressions) is true.\n\n\n\n\n\nSeveral logical expressions can be nested inside each other:\n\n\n\n\n\nNote: For a clearer display, the external display is selected for the external and link.\n\nMultiple conditions (if / else): By clicking on the small cogwheel symbol of a condition block (if/make), it can be configured:\n\n\n\n\nBy adding an unless section, a further condition can be added. The condition defined in an if section is checked if the previous conditions (if) are not fulfilled. If a condition is fulfilled, the defined blockly operators are executed.\n\n\nBy adding an if section, blocks can be added that are executed if none of the conditions are met.\n\nCheck operator: For value assignments depending on a condition, the blockly editor provides a special operator check-if-true-if-false:\n\n\n\n\nThe operator combines a value assignment with a logical expression:\n\n\n\n\n\nIn this example, the string variable MyStringVariable is assigned the value Yes if the boolean variable MyBooleanVariable has the value true. If MyBooleanVariable has the value false, MyStringVariable is assigned the value No.\n\nNegation: The following Blockly operator is available to reverse a logical expression (negation):\n\n\n\n\n\n(top)\n\n\n\n\n\nThe multiple execution of blockly operators (and the actions that can be displayed with them) is possible with loops. The Loops section of the Palette contains the Blockly elements required for this.\nRepeat n times: The following Blockly operator can be used to repeat the execution of blocks n times:\n\n\n\nRepeat as long as: Loops can also be repeated until a condition is true (or as long as a condition is true):\n\n\n\n\nExample:\n\n\n\n\nCount from/to: Loop with auxiliary variables:\n\n\n\n\nFor each value from list: Loop over all values in a list:\n\n\n\nCancel loops prematurely: The following blockly element can be used to cancel a loop (prematurely) or to start the next loop pass prematurely:\n\n\n\n\n\n\n\nThe Math section of the Palette contains Blockly elements for using numbers and simple mathematical functions.\nExpressions\n\nNumbers: Integers / decimal numbers\n\n\n\n\n\n\n\n\nSymbols: Special symbols or constants:\n\n\n\n\nBasic functions\n\nAddition, subtraction, multiplication, division and power function of two arguments:\n\n\n\n\n\nNesting is possible, e.g:\n\n\n\n\n\nDivision with remainder:\n\n\n\n\n\nWhether a number is even can be checked with this blockly element:\n\n\n\n\n\nWith the following blockly element, a number can be limited to a section:\n\n\n\n\nBuilt-in functions\n\nTrigonometric functions:\n\n\n\n\n\nRounding of values:\n\n\n\n\n\nFurther functions:\n\n\n\n\n\nNote: - allows the negation of numerical values, as can be seen in the following example:\n\n\n\n\n\nThe example shows the tooltip for the help available in Blockly and an example where the number 5 is converted into the number -5 using the - operator. The outer condition (negating 5 results in -5) is therefore true.\n\nGeneration of random numbers: Two blocky elements are available for generating random numbers:\n\nIntegers (in value range):\n\n\n\n\n\nRandom number between \\(0\\) and \\(1\\):\n\n\n\n\nNumeric functions for lists: Predefined functions for lists include:\n\nNotes:\n\nIf required, further functions can be implemented with loops for lists.\nWhen using the functions, please note that the list function can only be used for lists with numerical data types!\n\n\n\n(top)\n\n\n\n\n\nThe Text section of the Palette contains Blockly elements for using strings.\nExpressions: The following operator is available for creating text:\n\nChains: Various operators can be used to join text and assign it to variables:\n\nAppend a text to a variable:\n\n\n\n\n\nConcatenate texts (and variable values) and pass them on to other blockly operators:\n\n\n\n\n\nAssign a variable to merged texts:\n\n\n\n\nText length: The length of a character string can be determined with the following blockly operator:\n\nCheck for empty string: Empty string variables can be recognised by the fact that the number of characters is \\(0\\).\n\nAlternatively, the following blockly operator can be used:\n\nFind position in string: An operator that searches in text (passed by variable or as an expression) for the first or last occurrence of a term can be used as follows:\n\nThe position of the term within the character string (i.e. in the text) is returned.\nForm sub-strings: The following operator takes the first letters from the transferred string in text. The number of letters is also passed.\n\nExample (here, if the option take first is selected, the variable MyStringVariable is assigned the text ABC, i.e. the first three letters of the character string ABCDEFG):\n\n\n\n\n\n\n\n\n\n\n\n\nletter function\nparameter N\nmeaning\n\n\n\n\ntake\nYes\nThe first N letters are returned\n\n\ntake from last\nYes\nThe last N letters are returned\n\n\ntake first\nNo\nThe first letter is returned (corresponds to take with N=1)\n\n\ntake last\nNo\nThe last letter is returned (corresponds to take from behind with N=1)\n\n\nTake random\nNo\nA random letter is returned\n\n\n\nLetters from a character string can also be extracted using the following operator and assigned to a variable, for example:\n\nExample (here, for example, characters 3 to 5 can be taken from a character string):\n\n\n\n\nChange texts: Existing texts (either as expressions or from variables of datatype string) can be modified by applying operators.\n\nThe following operator can be used to convert text to uppercase or lowercase:\n\n\n\n\n\nThe nouns option converts the passed string into a sequence of words with a capital initial letter (except for strings that are written entirely in capital letters).\n\n\nLeading, trailing or leading and trailing spaces can be removed using the following operator:\n\n\n\n\n\n\n(top)\n\n\n\n\n\nThe Date & Time section of the Palette contains Blockly elements for using times within flow definitions.\nFixing points in time: Variables of the datatype DateTime can be assigned timestamps.\nDetermine time differences: Complete example: The following Blockly code measures the time for processing tasks 1 to 4. To do this, the start time is first recorded, and after the tasks have been processed, the time difference is determined and converted into seconds:\n\n\n\nConversion of time measures\n\n\n\n(top)\n\n\n\n\n\nThe Lists section of the Palette contains Blockly elements for creating and using lists.\nCreate list: Various options are available for creating lists.\n\nLists can be created from existing elements:\n\n\n\n\n\nThe number of elements of the create list with operator can be configured using drag-and-drop after clicking on the cogwheel symbol:\n\n\n\n\n\nWhen creating lists, please note that the Blockly editor does not check the data type. Lists with values of different data types can be created (incorrectly), but do not lead to a functioning test sequence.\n\n\nLists can be created by repeating an element:\n\n\n\n\nCombining lists: Existing lists can be merged with the following operator:\n\n\n\nSublists: A sublist can be selected from lists using the following operator:\n\n\n\n\nFurther operator options for to: to from last and to last.\n\nList properties: The following operators are available to query properties of a list:\n\nThe following operator returns true if the linked list is empty:\n\n\n\n\n\nThe following operator returns the length of the list:\n\n\n\n\n\nThe following operator returns the distinct elements of a list\n\n\n\n\nSearch and replace: The following operators are available for searching and replacing elements in lists:\n\nThe following operator finds elements in lists:\n\n\n\n\n\nThe following operator returns / removes or replaces in a list and returns the element:\n\n\n\n\n\nFurther options of the operator for that: from behind that / first / last and random.\n\n\nThe following operator replaces and inserts in a list:\n\n\n\n\n\nFurther options of the operator for that: from behind that / first / last and random.\n\nConversion of lists and text: List and text can be converted using separators.\n\nThe following operator creates a text from a list or a list from a text:\n\n\n\n\nSort lists: Elements in lists can also be sorted.\n\nThe following operator returns the distinct elements of a list:\n\n\n\n\n\n\n(top)\n\n\n\n\n\nThe Variables section of the Palette contains Blockly elements for creating and using variables.\nCreate variable: To create a Blockly variable, the Palette contains the Create typed variable:\n\n\n\n\nBlockly variables always have a variable name and data type:\n\n\n\n\n\nSimple data types and value assignments: The following basal data types are supported:\n\nBoolean: Logical truth values and logical expressions (true or false)\n\n\n\n\n\nNumber: Data type for numerical values (with and without decimal place)\n\n\n\n\n\nString: Text values or character strings\n\n\n\n\n\nThe following data types are provided for times:\n\n\nDateTime: Date and time\n\n\n\n\n\nTimeSpan: Time span\n\n\n\n\nData types for multiple values: In addition to the basal data types, data types for multiple values are also supported:\n\nArray: Data type for lists\n\n\n\n\n\nDictionary: (documentation missing)\nKeyTypedValuePairs: (documentation missing)\n\nUse variable values: To use variable values, blockly elements with inputs can hold the following components:\n\n\n\n\nThe variable to be used can be selected. For defined variables, there is also a Blockly element in the Variables section of the Palette:\n\n\n\n\n\nThe palette also contains a blockly element of the type set … on. This can also be used to select which value of the variable it sets:\n\n\n\n\n\n\n(top)\n\n\n\n\n\nThe Functions section of the Palette contains Blockly elements for using functions within flow definitions. Functions combine blocky code so that it can only be defined once but used multiple times.\nDefining functions: Two different forms of functions can be defined.\n\nFunctions without a return value:\n\n\n\n\n\nTo be called, functions without a return value can simply be connected to previous and subsequent blockly elements in the sequence (i.e. they have an up and down connection):\n\n\n\n\n\nFunctions with return value:\n\n\n\n\n\nFunctions with a return value can be called in an assignment block (i.e. they have a connection to the left):\n\n\n\n\nThe type to which an assignment makes sense depends on the type of the return value.\nDefining return values of functions: Functions are defined by special blockly elements that can be inserted anywhere in the code editor.\nReturn values can be defined for functions with a return value. The return value can be added directly to the function definition next to gib zurück:\n\n\n\nIn addition, the following two blockly elements are available, which can only be used within a function definition (with return value):\n\nThe operator return allows a value to be returned. After this, no further blockly elements can be placed in the flow within the function (i.e. the return operator has no downward connection):\n\n\n\n\n\nThe if return operator only returns a value if a condition is fulfilled. If the condition is fulfilled, the processing of the sequence in the function ends; if the condition is not fulfilled, the processing is continued (i.e. the if return operator has a downward connection):\n\n\n\n\n\nThe if-return operator is therefore identical to the following combination of operators:\n\n\n\n\n\nBoth operators (if return and return) cannot be used outside of functions:\n\n\n\n\n\nThe two operators (if return and return) can be used within functions without a return value to terminate the execution of functions (but not to return values):\n\n\n\n\nExample:\n\nThe following function returns the value of the variable MyStringVariable (Any value 1) in 50% of the cases (i.e. if a first drawn random variable is greater than \\(0.5\\)). In the other 50% of cases, another random variable is drawn, and if this is greater than \\(0.5\\), then the text Any value 2 is returned. If this is not the case either, the text Default is returned:\n\n\n\n\nReturn values are typed. The flow control also supports functions that …\n\n… return individual tasks:\n\n\n\n\n\n… Return lists of tasks:\n\n\n\n\nDefining call parameters of functions: Functions can also use parameters that are to be passed when the function is called (call parameters). Call parameters can be defined by clicking on the small cogwheel symbol of a function block:\n\nThe function is then called by passing it in accordance with the parameter definition:\n\nDefinition of a parameter:\n\n\n\n\n\nCall the function with value:\n\n\n\n\nExample:\n\nThe following example shows a function with two parameters, their use within the function using the example of conditions and the call of the function with fixed values:\n\n\n\n\n\nAlternatively, the function can of course also be called with variables:\n\n\n\n\n\n\n(top)\n\n\n\n\n\n(documentation follows)\n\n\n(top)\n\n\n\n\n\n(documentation follows)\n\n\n(top)\n\n\n\n\n\n(documentation follows)\nLog data: The following operator can be used to store information directly in the log data:\n\nResult data: (documentation follows)\nMonitoring data: (documentation follows)\n\n\n(top)\n\n\n\n\n\n\nThe IRTLib Editor supports two different options for commenting blockly code.\n\n\nComments that are to be permanently visible in the process can be added via the plaette in the Development section:\n\nThese comments can be moved like blocky operators and show one-line comment text.\n\n\n\n\nFor more detailed comments, each block can be added with a comment (and deleted if available) via the context menu:\n\nThese comments can comprise several lines and are displayed when the small ?-icon of a block is clicked.\n\n\n\n(top)\n\n\n\n\n\n\n\n\n\nLarge and complex processes can sometimes become confusing in the Blockly editor. In order to hide blockly elements that are not required for viewing without changing the function of the flow definition, blocks can be folded together:\nThis is illustrated in the following example:\n\nUnfolded (i.e. complete) representation of the selected block:\n\n\n\n\n\nOption to fold the block in the context menu:\n\n\n\n\n\nCollapsed representation of the block within the flow definition:\n\n\n\n\n\nOption to unfold the block in the context menu:\n\n\n\n\nThe folding / unfolding of blockly elements does not change the function of a flow definition and is only used for a clearer arrangement of complex flow definitions.\n\n\n\n\nNote: This function is still under development.\nThe Blockly editor offers the option to only deactivate Blockly elements instead of deleting them. Deactivated Blockly elements remain in the flow definition but are not executed.\nIn the following example, the block for displaying task 3 is deactivated, i.e. only task 1, 2 and 4 are displayed:\n\nActivating or deactivating Blockly elements is done via the context menu:\n\n\nInternal / External: Some blockly elements with inputs (i.e. places where you can connect further blocks) allow you to switch between two display forms.\n\nInternal: The inputs are arranged within the blocks.\n\n\n\n\n\nExternally: The inputs are arranged on the side of the blocks.\n\n\n\n\n\nBoth display formats are equivalent in terms of functionality.\n\n\nClean up: The context menu of the Blockly editor, which can be opened by clicking in an empty section, contains the Clean up blocks function:\n\nBy calling Clean up blocks, all Blockly elements in the Blockly editor are aligned vertically one below the other.\n\n\n(top)\n\n\n\n\n\n\n\n\n\nIf several survey parts are defined for a study, the sequence of survey parts can be defined in which respondents or test persons are presented with the contents of the survey parts.\nIn addition to simple linear sequences, sequences of several survey parts can also be configured with blockly-based routing.\nA detailed description of routing between survey parts can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\nThe order of Survey Parts can be defined using Blockly (analogue to the definition of the order of Items within Survey Parts). This option is available if the option Enable Routing for Survey Parts is selected in the basic configuration for a study (in the Overview view).\nFor the general principles of using Blockly in the IRTlib Editor, see the help on Routing within Survey Parts.\nFunctions that are only available in Routing between Survey Parts are:\n\nDisplay survey part\n\n\n\n\n\nThis Blockly-operator replaces Show Item within Survey Parts.\n\n\nSuccessful login\n\n\n\n\n\nThis Blockly-operator has the value true if valid login information was specified before the maximum number of attempts (here: infinite, i.e. an unlimited number of times).\n\nNote: Changes to the Routing view between Survey Parts must be saved using the disc symbol or discarded using the undo symbol:"
  },
  {
    "objectID": "preparation-parts.html#survey-part-administration",
    "href": "preparation-parts.html#survey-part-administration",
    "title": "Vorbereitung: Erhebungsteile / Preparation: Study Parts",
    "section": "",
    "text": "After creating a study, the next step in preparing a test evaluation is to add a new survey part in the Survey parts view:\n\nThe created survey parts appear as cards in the Survey parts view. If studies consist of several survey parts, the order of the survey parts can be adjusted in the Survey parts / Overview view for linear processes. If survey parts are to be controlled depending on variables (e.g. passed preload variables or other blockly variables), routing between survey parts can be configured as an alternative.\nDetailed instructions for creating survey parts can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\nThe IRTLib Editor is used to create configurations for Studies, which can then be used in an IRTLib Player to carry out computer-based assessments. Studies consist of one or more Survey Parts.\n\n\nOnce a Study has been created, a Survey Part can now be added via the plus icon at the bottom right:\n\n\n\n\n\nThen enter a Name and optionally a Description in the Create new Survey Part dialogue.\nMake sure that only letters (upper and lower case), numbers and a _ are allowed for the name.\nThen click on Save.\n\n\n\n\n\nIf required, you can also assign an image to a survey part using the following icon. This image is used in the IRTLib Editor for this Survey Part:\n\n\n\n\n\n\n\n\nCreated survey parts are displayed as tiles in the survey part overview:\n\n\n\n\n\n\nTo continue with the configuration of a survey part, click on the small edit icon:\n\n\n\n\n\n\n\nDelete survey section: You can also use the recycle bin icon to delete survey parts. The deletion of survey parts cannot be undone:\n\n\n\n\n\n\n\n\n\nIf the option Enable Routing for Survey Parts is not selected in the Info view (section Overview) in the configuration of a Study, then Survey Parts are administered in the order in which they are displayed in the survey part administration.\n\nMove Survey Parts: To change the order of Survey Parts using drag-and-drop, the Change Order mode must first be activated using the following toggle icon:\n\n\n\n\n\n\n\nThe tiles can then be put in the desired order. The Change Order mode is ended when the disc icon is clicked or the changes are discarded:\n\n\n\n\n\n\n\n\n\n\nThe order of study parts can be changed in the study parts view:\n\nBefore adding or selecting CBA ItemBuilder projects, as described in the section Assessment contents (items), selected items can be configured in the Info view.\nA detailed description can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\n\n\n\nDesignation: The internal name of the survey part, which is displayed in the IRTlib Editor for editing and defining the process. Designations must not contain any special characters, spaces or umlauts and must not begin with a number.\nDescription:Optional, additional description of a survey part.\n\n\n\n\n\nEnable Routing: The configured assessment contents in the Items section can be administered as a linear sequence, i.e. in the configured order.If a different sequence is to be used, the Enable Routing option can be selected here. The sequence can then be specified as a visual program in the Routing section.\n\n\n\n\n\nUse snapshot: So that CBA ItemBuilder tasks can be visited multiple times, their content is saved in so-called snapshots when the item is exited. Snapshots can also be used to display the contents of a CBA ItemBuilder task again at a later time. This option should only be deactivated if there is an important reason and the consequences (i.e. the unsaved snapshot data) have been carefully considered.\n\n\n\n\n\nAdding and managing CBA ItemBuilder projects within the IRTlib Editor is done in the Items section.\n\n\n\n\n\n\nNote on time limit\n\n\n\n\n\nFor the administration of time-limited survey parts, a time limit can be defined under processing-time. If the option Limit processing time is activated, one or more tasks can be defined, which are displayed in the event of a timeout. In addition, content can be defined in the pre-item(s) and post-item(s) section, which is administered before or after the time-limited part."
  },
  {
    "objectID": "preparation-parts.html#insert-assessment-content-items",
    "href": "preparation-parts.html#insert-assessment-content-items",
    "title": "Vorbereitung: Erhebungsteile / Preparation: Study Parts",
    "section": "",
    "text": "The contents that are to be used in a survey section of type CBA ItemBuilder are transferred to the configuration via the IRTlib Editor, i.e. the configuration created with the IRTlib Editor also contains the CBA ItemBuilder Project Files. The Items view is available for adding or updating CBA ItemBuilder projects.\nA detailed description can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\n\n\nImporting CBA ItemBuilder project files: The IRTlib Editor maintains a list of known items to which CBA ItemBuilder project files that are not yet known can be added. To add a project file, first open the List of known items with the + symbol and then select the Import button.\n\n\n\n\n\n\n\n\n\n\nUpdate already imported CBA ItemBuilder project files: If a CBA ItemBuilder project file is already included in the List of Known Items, the project files can be updated. They are then not added to the List of known items, but the existing CBA ItemBuilder project file is stored in a newer version. To update an item, it must first be selected in the list of items in a survey section. This activates the update symbol. In the Update item dialogue that then opens, an updated version of a CBA ItemBuilder project file can be added using the Import button.\n\n\n\n\n\n\n\n\n\n\n\nPreview of CBA ItemBuilder project files: Items added in a Survey Part section can be viewed directly in the IRTlib Editor in a built-in preview function. To view an item, it must first be selected in the list of items in a survey section. The Preview can then be called up using the eye symbol:\n\n\n\n\n\n\n\nExporting CBA ItemBuilder project files: CBA ItemBuilder project files that have been imported into the IRTlib Editor can be exported for further editing with the CBA ItemBuilder. To export a selected item from the list of items in a Survey Part, the download icon can be called up:\n\n\n\n\n\n\n\nDeletion of CBA ItemBuilder project files: The items inserted in Survey Parts can be deleted from a Survey Part. The delete symbol removes the item from a Survey Part, but it remains in the list of known items:\n\n\n\n\n\n\n\nNote: It is not yet possible to delete CBA ItemBuilder project files from the List of known items. This functionality is not necessary because CBA ItemBuilder project files are only transferred from the IRTlib Editor to the configuration of a Study if Tasks from a CBA ItemBuilder project file are used in a Survey Part.\n\n\n\n\n\nSorting CBA ItemBuilder project files: If the Enable Routing option is not selected for a Survey Part, then the order can be adjusted in the list of items using the following button:\n\n\n\n\n\n\n\nThe items are then administered exactly as they appear for a Survey Part in this list.\n\nNote: Changes to the Items view must be saved using the disc symbol or discarded using the undo symbol:"
  },
  {
    "objectID": "preparation-parts.html#processing-time",
    "href": "preparation-parts.html#processing-time",
    "title": "Vorbereitung: Erhebungsteile / Preparation: Study Parts",
    "section": "",
    "text": "If the administration of a linear sequence of CBA ItemBuilder tasks is to be administered with a limited processing time, this can be implemented by defining a maximum processing time (in seconds). If, for example, a test content is to be administered for a maximum of 28 minutes, a time of 1680 seconds is defined as the processing time. The message that is to be displayed when the processing time expires can be defined as one (or more) CBA ItemBuilder tasks.\nA detailed description can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\nSurvey Parts without Routing can easily contain a time-limited section. To do this, the option Restrict Item Time is activated in the Time Limit view and a time limit in seconds (&gt;0) is entered.\nFour groups of CBA ItemBuilder Tasks are distinguished for a time limit, which are defined in different places in the IRTlib Editor. The items for which the time limit is to apply are defined in the Items view (analogue to non-time-limited Survey Parts):\n\nItems: Items that are displayed until the time limit has been reached.\n\nIn the Time Limit view, the following can also be defined:\n\nTimeout Items: Items that are only displayed if the time-limited items have not been completed within the limited processing time.\n\nFinally, the following tasks can be defined as individual views of the configuration of survey items:\n\nPrologue Items: Items that are displayed before the time-limited section.\nEpilog items: Items that are displayed after the time-limited section.\n\nThe icons for the following operations are available in all the above dialogues:\n\nAdd: \nRefresh: \nPreview: \nDownload/Export: \nDelete: \nSort: \n\nNote: More complex designs with several timers can be implemented with the IRTlib Editor if the option Enable Routing is activated in the overview view for a Survey Part.\nNote: Changes to the Time Limit view must be saved using the disc symbol or discarded using the undo symbol:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpening/closing credits items\n\n\n\nA central concept for the implementation of time limits in the IRTlib software is the separation of time-limited items and additional assessment content that is administered before or after the time-limited part.\n\n\n\nItems administered after a potentially time-limited section of an assessment are referred to as post-items.\n\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\nSurvey Parts allow the definition of items in different sections. Items in this section Epilogue Item(s) are displayed after the items defined in the Items section of a Survey Part. The separation into Epilogue Item(s) and Items is particularly useful if a time limit is activated under Time Restriction.\nThe following options are available for configuring items in the Epilogue Item(s) section:\n\nAdd: \nRefresh: \nPreview: \nDownload/Export: \nDelete: \nSort: \n\nNote: Changes to the Epilogue Item(s) view must be saved using the disc symbol or discarded using the undo symbol:\n\n\n\n\nItems that are administered before a potentially time-limited section of a survey part are called prefix items.\n\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\nThe Survey Parts allow the definition of items in different sections. Items in this section Prologue Item(s) are displayed before the items defined in the Items section of a Survey Part. The separation into Prologue Item(s) and Items is particularly useful if a time limit is activated under Time Restriction.\nThe following options are available for configuring items in the Prologue Item(s) section:\n\nAdd: \nRefresh: \nPreview: \nDownload/Export: \nDelete: \nSort: \n\nNote: Changes to the Prologue Item(s) view must be saved using the disc symbol or discarded using the undo symbol:"
  },
  {
    "objectID": "preparation-parts.html#variables",
    "href": "preparation-parts.html#variables",
    "title": "Vorbereitung: Erhebungsteile / Preparation: Study Parts",
    "section": "",
    "text": "Under Development\n\n\n\nThis function is currently under development.\n\n\n\n\n\n\n\n\nEmbedded Program Help\n\n\n\n\n\n(This functionality is still under development)."
  },
  {
    "objectID": "preparation-parts.html#codebook-2",
    "href": "preparation-parts.html#codebook-2",
    "title": "Vorbereitung: Erhebungsteile / Preparation: Study Parts",
    "section": "",
    "text": "Under Development\n\n\n\nThis function is currently under development.\n\n\n\n\n\n\n\n\nEmbedded Program Help\n\n\n\n\n\n(This functionality is still under development)."
  },
  {
    "objectID": "preparation-parts.html#itempool-2",
    "href": "preparation-parts.html#itempool-2",
    "title": "Vorbereitung: Erhebungsteile / Preparation: Study Parts",
    "section": "",
    "text": "Under Development\n\n\n\nThis function is currently under development.\n\n\n\n\n\n\n\n\nEmbedded Program Help\n\n\n\n\n\n(This functionality is still under development)."
  },
  {
    "objectID": "preparation-parts.html#routing-within-survey-parts-1",
    "href": "preparation-parts.html#routing-within-survey-parts-1",
    "title": "Vorbereitung: Erhebungsteile / Preparation: Study Parts",
    "section": "",
    "text": "If CBA ItemBuilder tasks are not to be administered in a linear sequence that is fixed in advance and identical for all test subjects, then the Routing function of the IRTlib software can be used.\nA detailed description of Routing within survey parts can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\n\n\nThe sequence of CBA ItemBuilder tasks can be defined here using Blockly (i.e. a form of visual programming). Blockly-based sequencing is available if the option Enable Routing is selected for a Survey Part. The option can be found in the Info section of a Survey Part. If it is activated, the Survey Part contains the entry Routing.\n\nOverview:\n\nExamples: linear sequence, simple test booklets, sequence with time restriction and booklet designs\nQuick guide: General notes on the Blockly editor\nBasics: Using the Blockly editor\n\nDisplaying items or item lists\nDefinition of time limits\nChanges to the test administrator menu\n\nDeepening: Advanced Blockly use\n\nFlow control with conditions\nFlow control with loops\nOperators for numbers, text, times and lists.\nMore in-depth information on Blockly-variables and Blockly-functions\nUse of item results in the flow definition\nBlockly operators for encoding missing values and for writing data\n\ncommenting on Blockly code\nCustomisation of the presentation of Blockly code\n\n\n\n\nThe basic idea of using Blockly for the definition of processes in computer-based assessments will first be illustrated with a few examples.\n\n\nExample for linear sequence\n\n\nBased on the CBA ItemBuilder Tasks added to a survey part in the Items view, a linear sequence of Tasks corresponds to the following Blockly definition:\n\n\n\n\n\nA list of CBA ItemBuilder Tasks is passed to the Blockly element Show Items, which is created with the operator create list with. The list is processed in the order shown, whereby each CBA ItemBuilder Tasks is displayed until the NEXT_TASK- Command is executed.\n\n\nAn equivalent formulation of a linear sequence can also be made with several Show Items blocks if no back navigation is necessary:\n\n\n\n\n\nExample for simple test booklets\n\n\nWith the help of an variable (here: booklet) and a simple if/make-condition, it is now possible to define a sequence that administers different items depending on the value of the variable:\n\n\n\n\n\nThe items for start and end are always administered, tasks 1-3 only if the variable Booklet has the value 0, tasks 4 and 5 if the variable Booklet has a value other than 0.\n\n\nAlternatively, the identical sequence can also be created using the Blockly operator for displaying item lists:\n\n\n\n\n\nBoth variants are completely equivalent in terms of functionality, but the second approach with lists allows the use of the back navigation option within the booklet-specific tasks.\n\nExample for process with time limit\n\nTo implement time-limited sections within a survey section using the Blockly configuration, the following Blockly component can be used:\n\n\n\n\n\nEach sequence begins with a start task that is not time-limited and ends with an end task that is also not time-limited. In between, there is a time limit for a section called MyFirstTimer, which has a time limit of 60 seconds.\n\n\nTasks 1, 2 and 3 are displayed in the Runtime code section with a time limit. If a timeout occurs, i.e. the three tasks are not processed within the 60 seconds, task 4 is displayed (also without a time limit).\n\nExample of simple booklet design with time limit\n\nFor many items, the definition of booklet designs, i.e. task sequences with balanced positions, can be simplified using functions or lists.\n\n\nIf no back navigation is necessary, functions can be used for the definition of clusters:\n\n\n\n\n\nWith back navigation, the functions can return lists of tasks:\n\n\n\n\n\nFor more information see here.\n\n\n\n(top)\n\n\n\n\nProcesses are defined in the visual Blockly editor. Execution begins with the element that is aligned furthest up. If necessary, the workspace can be automatically aligned using the tidy-up function. To add Blockly operators, they can be dragged and dropped from the palette.\n\n\nDelete: Operators can be dragged to the recycle bin to delete them. Selected Blockly elements can also be deleted using the Delete(delete) button. Alternatively, selected Blockly elements can also be deleted via the context menu.\nRedo/Undo: Individual actions can be undone within the Blockly editor. The key combination ‘Ctrl + Z’ can be used for this. Pressing ‘Ctrl + Y’ repeats an action. By clicking in an empty section of the Blockly editor, you can access a context menu, which also contains the options for Undo and Redo:\n\n\n\n\n\nSave: Customisations in the Blockly editor must be saved. The floppy disc symbol is available for this purpose at the bottom right:\n\n\n\n\n\nIf you want to discard the change (as a whole), you can use the discard icon at the bottom right.\n\n\nZoom: The view in the workspace can be enlarged with the icons + and reduced with -.\n\n\n\nContext menu: Further options are available via the right mouse button (context menu) in the Blocky editor. To call up these functions, a secondary click (right mouse button) must be performed on a Blockly element:\n\nCopy duplicates the selected Blockly element, including all connected elements.\nCommenting on blocks is possible.\nBlocks can be deactivated/activated.\nSome block types allow you to change the display form external/internal.\nBlocks that contain further blocks can be folded/unfolded.\nBlocks can also be deleted via the context menu.\n\n\n\n\n\n\n\n\nSome Blockly elements also provide a Help entry in the context menu, which refers to generally accessible Blockly documents (https://github.com/google/blockly/wiki/).\n\n\n\n(top)\n\n\n\n\n\n\nThe basic functions for using the Blockly environment to control assessments can be found in the Session section.\n\n\n\nCBA ItemBuilder tasks that have been imported in the Items view for a survey section can be accessed in the flow control, as shown in the examples above, using the following Blockly element for Tasks:\n\nThe element, which can be found in the Session section of the Blockly editor palette, can be configured using the selection list. Each Blockly element for tasks can refer to exactly one specific task, i.e. a flow definition usually consists of several such elements.\nBlockly elements for tasks cannot be inserted directly into the flow, but are used together with a Show Item element:\n\nThe example for simple test booklets illustrates that sequences in the blockly definition are often defined by a sequence of several show item operators. Show Item operators can be inserted into conditions and loops, both within the main flow and within functions.\n\n\n\nWith the help of Blocky-based flow control, it is also possible to administer CBA ItemBuilder tasks multiple times within a flow:\n\nWhen an item is called up again, the status from the last visit is restored, i.e. processing is continued. If items are to be resubmitted several times, i.e. unedited, automatic restoration may not be desired. The checkbox for specifying a scope (scope) can be optionally activated for this purpose:\n\nIf nothing else is specified, the item is administered in the “default” scope. Alternatively, a text can be defined, as shown in the following example:\n\nOn the first visit, the task is displayed in the Scope “Visit1”. This is followed by a new, independent display of the task in a different scope (“Visit2”). In the third call, the task is displayed again with the data that was already collected during the first visit (i.e. the Scope “Visit1” is used again).\n\n\n\n\nAs shown in the example for linear sequence, linear tests can also be displayed using lists of tasks.\nLists can be used with the Blockly operator Show Items:\n \n\nBack navigation: The Show Items element for lists can be configured via the Can navigate back property. If this property is selected, CBA ItemBuilder-Tasks can use the Command BACK_TASK to request navigation to the previous CBA ItemBuilder Tasks.\nCancelling lists: The use of lists also allows lists to be cancelled. Lists can be cancelled in two ways:\n\nThe Command CANCEL_TASK, which can be used within CBA ItemBuilder Tasks, is called.\nIn the test administrator menu, which has been configured for the study and, if necessary, customised using the Blockly operator Edit test administrator menu, the function Cancel item list is called.\n\n\n\nThis cancels the administration of an item list and the Blockly process is continued after the Show Items block.\n\n\n\n\n\nThe operators Show Item (for individual items) and Show Items (for item lists) are also available as operators for value assignments:\n\nThese can be used to assign item processing results to variables (string or array) and then evaluate them for process control.\n\nSingle task:\n\n\n\n\n\nList of tasks:\n\n\n\n\n\n\n\n\nAs already illustrated in the example process with time restriction, the Blockly block Start time with name can be used to implement the time-restricted administration of items.\nThe Blockly element Start timer with name allows the definition of time limits. Each time limit can have its own name. The time must also be specified in seconds. This can be used to define the type of time to be used:\n\n\nRealtime: The timer runs in real time. It is not affected by server downtimes or a session restart.\nServertime: The timer runs in server time. Is not affected by a session restart, but does not take server downtime into account.\nSessiontime: The timer runs within a session. Is interrupted in the event of an interruption due to server downtime or a session restart.\nClienttime: The timer only runs in client time and is also interrupted when the session is paused.\n\nFinally, two positions can be filled with further blockly operators (such as one or more Show Item blocks for displaying individual items or one or more Show Items blocks for displaying lists):\n\nRuntime code: These blocks are filled until the defined time has elapsed.\nElapsed code: These blocks are only filled in if the Runtime code was not completed within the time.\n\n\n\n\n\nIn the study definition, test administrator menu functions can be created for one or more roles. Roles combine different functions that can be differentiated using the password to be entered by the test administrator.\nCustomise standard functions: The following standard functions can be defined for a study in the Info / Test leader menu section:\n\nNavigation: Task forward / Task back\nLists*: Cancel item list\nExit*: End survey part and end session\nVolume control*: Adjust the audio volume during the assessment\n\n\nDuring the processing of a survey section, the following blockly operator can be used to customise the test administrator menu in the flow control for specific contexts:\n\n\n\n\n\nThe test administrator menu can be changed for each of the standard functions (in the Function section) for a role (in the Group section) as well as the button label (in the Label section):\n\n\nAdd: Function is added to the test leader menu\nRemove: Function is removed from the test conductor menu\nDeactivate*: Function is deactivated in the test conductor menu\nActivate*: Function is activated in the test conductor menu\n\n\n\n\n\nCalling this Blockly operator in the test sequence defines the behaviour of the test administrator menu in the rest of the test sequence. In contrast to Remove, deactivated functions remain visible in the Test Manager menu, but cannot be executed (until they are activated again).\n\nUsing Blockly functions in the Test Manager menu: The Blockly operator for editing the test leader menu also contains the option to execute Blockly code (ExecuteBockly) in the Function section:\n\n\n\n\nIf ExecuteBlockly is selected, a function defined within the Blockly editor can be selected in the Blockly element Edit test administrator menu. The Blockly operators defined in this function are then executed when a test leader selects the corresponding button in the test leader menu at runtime.\n\n\n\n(top)\n\n\n\n\n\n\n\n\n\nThe Logic section contains the Blockly operator if/make, which can be used to implement conditions in the flow. Conditions are logical expressions, e.g. checking whether a preload variable has a certain value:\n\nThe blocky operators defined within the condition block (i.e. next to make) are only executed if the condition (if) is fulfilled. The example checks whether a Boolean variable has the value true.\nThe condition is defined as a separate block that is connected to the blockly operator if/make. Here are the two components separately:\n\nCondition:\n\n\n\n\n\nLogical expression:\n\n\n\n\n\n\n\n\nLogical expressions in conditions are based either on value comparisons or returns from functions. Value comparisons can be realised with the following blockly element:\n\nThe two slots can be filled with values. A corresponding Blockly element is provided in the Logic section for Boolean values (true/false):\n\nConditions are also possible with variables of a different data type:\n\nFor numerical values, there is a corresponding Blockly element in the Math section, which contains operators for numbers and simple mathematical operations:\n\nWith its help and a numeric variable, the following condition can be formulated:\nFor technical reasons, it may also be necessary to check whether a variable has no value at all. This can be implemented by using the blockly component null:\n\nCombination of logical expressions: Individual conditions or logical expressions can be combined with the following Blockly element from the Logic section:\n\n\n\n\nAn and and an or linking of the statements is available for selection. The and link is true if both expressions are true, the or link is true if at least one of the two expressions (or both expressions) is true.\n\n\n\n\n\nSeveral logical expressions can be nested inside each other:\n\n\n\n\n\nNote: For a clearer display, the external display is selected for the external and link.\n\nMultiple conditions (if / else): By clicking on the small cogwheel symbol of a condition block (if/make), it can be configured:\n\n\n\n\nBy adding an unless section, a further condition can be added. The condition defined in an if section is checked if the previous conditions (if) are not fulfilled. If a condition is fulfilled, the defined blockly operators are executed.\n\n\nBy adding an if section, blocks can be added that are executed if none of the conditions are met.\n\nCheck operator: For value assignments depending on a condition, the blockly editor provides a special operator check-if-true-if-false:\n\n\n\n\nThe operator combines a value assignment with a logical expression:\n\n\n\n\n\nIn this example, the string variable MyStringVariable is assigned the value Yes if the boolean variable MyBooleanVariable has the value true. If MyBooleanVariable has the value false, MyStringVariable is assigned the value No.\n\nNegation: The following Blockly operator is available to reverse a logical expression (negation):\n\n\n\n\n\n(top)\n\n\n\n\n\nThe multiple execution of blockly operators (and the actions that can be displayed with them) is possible with loops. The Loops section of the Palette contains the Blockly elements required for this.\nRepeat n times: The following Blockly operator can be used to repeat the execution of blocks n times:\n\n\n\nRepeat as long as: Loops can also be repeated until a condition is true (or as long as a condition is true):\n\n\n\n\nExample:\n\n\n\n\nCount from/to: Loop with auxiliary variables:\n\n\n\n\nFor each value from list: Loop over all values in a list:\n\n\n\nCancel loops prematurely: The following blockly element can be used to cancel a loop (prematurely) or to start the next loop pass prematurely:\n\n\n\n\n\n\n\nThe Math section of the Palette contains Blockly elements for using numbers and simple mathematical functions.\nExpressions\n\nNumbers: Integers / decimal numbers\n\n\n\n\n\n\n\n\nSymbols: Special symbols or constants:\n\n\n\n\nBasic functions\n\nAddition, subtraction, multiplication, division and power function of two arguments:\n\n\n\n\n\nNesting is possible, e.g:\n\n\n\n\n\nDivision with remainder:\n\n\n\n\n\nWhether a number is even can be checked with this blockly element:\n\n\n\n\n\nWith the following blockly element, a number can be limited to a section:\n\n\n\n\nBuilt-in functions\n\nTrigonometric functions:\n\n\n\n\n\nRounding of values:\n\n\n\n\n\nFurther functions:\n\n\n\n\n\nNote: - allows the negation of numerical values, as can be seen in the following example:\n\n\n\n\n\nThe example shows the tooltip for the help available in Blockly and an example where the number 5 is converted into the number -5 using the - operator. The outer condition (negating 5 results in -5) is therefore true.\n\nGeneration of random numbers: Two blocky elements are available for generating random numbers:\n\nIntegers (in value range):\n\n\n\n\n\nRandom number between \\(0\\) and \\(1\\):\n\n\n\n\nNumeric functions for lists: Predefined functions for lists include:\n\nNotes:\n\nIf required, further functions can be implemented with loops for lists.\nWhen using the functions, please note that the list function can only be used for lists with numerical data types!\n\n\n\n(top)\n\n\n\n\n\nThe Text section of the Palette contains Blockly elements for using strings.\nExpressions: The following operator is available for creating text:\n\nChains: Various operators can be used to join text and assign it to variables:\n\nAppend a text to a variable:\n\n\n\n\n\nConcatenate texts (and variable values) and pass them on to other blockly operators:\n\n\n\n\n\nAssign a variable to merged texts:\n\n\n\n\nText length: The length of a character string can be determined with the following blockly operator:\n\nCheck for empty string: Empty string variables can be recognised by the fact that the number of characters is \\(0\\).\n\nAlternatively, the following blockly operator can be used:\n\nFind position in string: An operator that searches in text (passed by variable or as an expression) for the first or last occurrence of a term can be used as follows:\n\nThe position of the term within the character string (i.e. in the text) is returned.\nForm sub-strings: The following operator takes the first letters from the transferred string in text. The number of letters is also passed.\n\nExample (here, if the option take first is selected, the variable MyStringVariable is assigned the text ABC, i.e. the first three letters of the character string ABCDEFG):\n\n\n\n\n\n\n\n\n\n\n\n\nletter function\nparameter N\nmeaning\n\n\n\n\ntake\nYes\nThe first N letters are returned\n\n\ntake from last\nYes\nThe last N letters are returned\n\n\ntake first\nNo\nThe first letter is returned (corresponds to take with N=1)\n\n\ntake last\nNo\nThe last letter is returned (corresponds to take from behind with N=1)\n\n\nTake random\nNo\nA random letter is returned\n\n\n\nLetters from a character string can also be extracted using the following operator and assigned to a variable, for example:\n\nExample (here, for example, characters 3 to 5 can be taken from a character string):\n\n\n\n\nChange texts: Existing texts (either as expressions or from variables of datatype string) can be modified by applying operators.\n\nThe following operator can be used to convert text to uppercase or lowercase:\n\n\n\n\n\nThe nouns option converts the passed string into a sequence of words with a capital initial letter (except for strings that are written entirely in capital letters).\n\n\nLeading, trailing or leading and trailing spaces can be removed using the following operator:\n\n\n\n\n\n\n(top)\n\n\n\n\n\nThe Date & Time section of the Palette contains Blockly elements for using times within flow definitions.\nFixing points in time: Variables of the datatype DateTime can be assigned timestamps.\nDetermine time differences: Complete example: The following Blockly code measures the time for processing tasks 1 to 4. To do this, the start time is first recorded, and after the tasks have been processed, the time difference is determined and converted into seconds:\n\n\n\nConversion of time measures\n\n\n\n(top)\n\n\n\n\n\nThe Lists section of the Palette contains Blockly elements for creating and using lists.\nCreate list: Various options are available for creating lists.\n\nLists can be created from existing elements:\n\n\n\n\n\nThe number of elements of the create list with operator can be configured using drag-and-drop after clicking on the cogwheel symbol:\n\n\n\n\n\nWhen creating lists, please note that the Blockly editor does not check the data type. Lists with values of different data types can be created (incorrectly), but do not lead to a functioning test sequence.\n\n\nLists can be created by repeating an element:\n\n\n\n\nCombining lists: Existing lists can be merged with the following operator:\n\n\n\nSublists: A sublist can be selected from lists using the following operator:\n\n\n\n\nFurther operator options for to: to from last and to last.\n\nList properties: The following operators are available to query properties of a list:\n\nThe following operator returns true if the linked list is empty:\n\n\n\n\n\nThe following operator returns the length of the list:\n\n\n\n\n\nThe following operator returns the distinct elements of a list\n\n\n\n\nSearch and replace: The following operators are available for searching and replacing elements in lists:\n\nThe following operator finds elements in lists:\n\n\n\n\n\nThe following operator returns / removes or replaces in a list and returns the element:\n\n\n\n\n\nFurther options of the operator for that: from behind that / first / last and random.\n\n\nThe following operator replaces and inserts in a list:\n\n\n\n\n\nFurther options of the operator for that: from behind that / first / last and random.\n\nConversion of lists and text: List and text can be converted using separators.\n\nThe following operator creates a text from a list or a list from a text:\n\n\n\n\nSort lists: Elements in lists can also be sorted.\n\nThe following operator returns the distinct elements of a list:\n\n\n\n\n\n\n(top)\n\n\n\n\n\nThe Variables section of the Palette contains Blockly elements for creating and using variables.\nCreate variable: To create a Blockly variable, the Palette contains the Create typed variable:\n\n\n\n\nBlockly variables always have a variable name and data type:\n\n\n\n\n\nSimple data types and value assignments: The following basal data types are supported:\n\nBoolean: Logical truth values and logical expressions (true or false)\n\n\n\n\n\nNumber: Data type for numerical values (with and without decimal place)\n\n\n\n\n\nString: Text values or character strings\n\n\n\n\n\nThe following data types are provided for times:\n\n\nDateTime: Date and time\n\n\n\n\n\nTimeSpan: Time span\n\n\n\n\nData types for multiple values: In addition to the basal data types, data types for multiple values are also supported:\n\nArray: Data type for lists\n\n\n\n\n\nDictionary: (documentation missing)\nKeyTypedValuePairs: (documentation missing)\n\nUse variable values: To use variable values, blockly elements with inputs can hold the following components:\n\n\n\n\nThe variable to be used can be selected. For defined variables, there is also a Blockly element in the Variables section of the Palette:\n\n\n\n\n\nThe palette also contains a blockly element of the type set … on. This can also be used to select which value of the variable it sets:\n\n\n\n\n\n\n(top)\n\n\n\n\n\nThe Functions section of the Palette contains Blockly elements for using functions within flow definitions. Functions combine blocky code so that it can only be defined once but used multiple times.\nDefining functions: Two different forms of functions can be defined.\n\nFunctions without a return value:\n\n\n\n\n\nTo be called, functions without a return value can simply be connected to previous and subsequent blockly elements in the sequence (i.e. they have an up and down connection):\n\n\n\n\n\nFunctions with return value:\n\n\n\n\n\nFunctions with a return value can be called in an assignment block (i.e. they have a connection to the left):\n\n\n\n\nThe type to which an assignment makes sense depends on the type of the return value.\nDefining return values of functions: Functions are defined by special blockly elements that can be inserted anywhere in the code editor.\nReturn values can be defined for functions with a return value. The return value can be added directly to the function definition next to gib zurück:\n\n\n\nIn addition, the following two blockly elements are available, which can only be used within a function definition (with return value):\n\nThe operator return allows a value to be returned. After this, no further blockly elements can be placed in the flow within the function (i.e. the return operator has no downward connection):\n\n\n\n\n\nThe if return operator only returns a value if a condition is fulfilled. If the condition is fulfilled, the processing of the sequence in the function ends; if the condition is not fulfilled, the processing is continued (i.e. the if return operator has a downward connection):\n\n\n\n\n\nThe if-return operator is therefore identical to the following combination of operators:\n\n\n\n\n\nBoth operators (if return and return) cannot be used outside of functions:\n\n\n\n\n\nThe two operators (if return and return) can be used within functions without a return value to terminate the execution of functions (but not to return values):\n\n\n\n\nExample:\n\nThe following function returns the value of the variable MyStringVariable (Any value 1) in 50% of the cases (i.e. if a first drawn random variable is greater than \\(0.5\\)). In the other 50% of cases, another random variable is drawn, and if this is greater than \\(0.5\\), then the text Any value 2 is returned. If this is not the case either, the text Default is returned:\n\n\n\n\nReturn values are typed. The flow control also supports functions that …\n\n… return individual tasks:\n\n\n\n\n\n… Return lists of tasks:\n\n\n\n\nDefining call parameters of functions: Functions can also use parameters that are to be passed when the function is called (call parameters). Call parameters can be defined by clicking on the small cogwheel symbol of a function block:\n\nThe function is then called by passing it in accordance with the parameter definition:\n\nDefinition of a parameter:\n\n\n\n\n\nCall the function with value:\n\n\n\n\nExample:\n\nThe following example shows a function with two parameters, their use within the function using the example of conditions and the call of the function with fixed values:\n\n\n\n\n\nAlternatively, the function can of course also be called with variables:\n\n\n\n\n\n\n(top)\n\n\n\n\n\n(documentation follows)\n\n\n(top)\n\n\n\n\n\n(documentation follows)\n\n\n(top)\n\n\n\n\n\n(documentation follows)\nLog data: The following operator can be used to store information directly in the log data:\n\nResult data: (documentation follows)\nMonitoring data: (documentation follows)\n\n\n(top)\n\n\n\n\n\n\nThe IRTLib Editor supports two different options for commenting blockly code.\n\n\nComments that are to be permanently visible in the process can be added via the plaette in the Development section:\n\nThese comments can be moved like blocky operators and show one-line comment text.\n\n\n\n\nFor more detailed comments, each block can be added with a comment (and deleted if available) via the context menu:\n\nThese comments can comprise several lines and are displayed when the small ?-icon of a block is clicked.\n\n\n\n(top)\n\n\n\n\n\n\n\n\n\nLarge and complex processes can sometimes become confusing in the Blockly editor. In order to hide blockly elements that are not required for viewing without changing the function of the flow definition, blocks can be folded together:\nThis is illustrated in the following example:\n\nUnfolded (i.e. complete) representation of the selected block:\n\n\n\n\n\nOption to fold the block in the context menu:\n\n\n\n\n\nCollapsed representation of the block within the flow definition:\n\n\n\n\n\nOption to unfold the block in the context menu:\n\n\n\n\nThe folding / unfolding of blockly elements does not change the function of a flow definition and is only used for a clearer arrangement of complex flow definitions.\n\n\n\n\nNote: This function is still under development.\nThe Blockly editor offers the option to only deactivate Blockly elements instead of deleting them. Deactivated Blockly elements remain in the flow definition but are not executed.\nIn the following example, the block for displaying task 3 is deactivated, i.e. only task 1, 2 and 4 are displayed:\n\nActivating or deactivating Blockly elements is done via the context menu:\n\n\nInternal / External: Some blockly elements with inputs (i.e. places where you can connect further blocks) allow you to switch between two display forms.\n\nInternal: The inputs are arranged within the blocks.\n\n\n\n\n\nExternally: The inputs are arranged on the side of the blocks.\n\n\n\n\n\nBoth display formats are equivalent in terms of functionality.\n\n\nClean up: The context menu of the Blockly editor, which can be opened by clicking in an empty section, contains the Clean up blocks function:\n\nBy calling Clean up blocks, all Blockly elements in the Blockly editor are aligned vertically one below the other.\n\n\n(top)"
  },
  {
    "objectID": "preparation-parts.html#routing-between-survey-parts",
    "href": "preparation-parts.html#routing-between-survey-parts",
    "title": "Vorbereitung: Erhebungsteile / Preparation: Study Parts",
    "section": "",
    "text": "If several survey parts are defined for a study, the sequence of survey parts can be defined in which respondents or test persons are presented with the contents of the survey parts.\nIn addition to simple linear sequences, sequences of several survey parts can also be configured with blockly-based routing.\nA detailed description of routing between survey parts can be found here in the embedded help:\n\n\n\n\n\n\nEmbedded program help\n\n\n\n\n\n\nThe order of Survey Parts can be defined using Blockly (analogue to the definition of the order of Items within Survey Parts). This option is available if the option Enable Routing for Survey Parts is selected in the basic configuration for a study (in the Overview view).\nFor the general principles of using Blockly in the IRTlib Editor, see the help on Routing within Survey Parts.\nFunctions that are only available in Routing between Survey Parts are:\n\nDisplay survey part\n\n\n\n\n\nThis Blockly-operator replaces Show Item within Survey Parts.\n\n\nSuccessful login\n\n\n\n\n\nThis Blockly-operator has the value true if valid login information was specified before the maximum number of attempts (here: infinite, i.e. an unlimited number of times).\n\nNote: Changes to the Routing view between Survey Parts must be saved using the disc symbol or discarded using the undo symbol:"
  },
  {
    "objectID": "data-collection-player-integration.html",
    "href": "data-collection-player-integration.html",
    "title": "Datenerhebung: In IRTlib Player Importieren / Data Collection: Import into IRTlib Player",
    "section": "",
    "text": "The following describes how to use a study configuration created with an IRTlib Editor that is available as a ZIP archive.\n\n\n\n\n\n\nPublished version required\n\n\n\nA published version of a Study is required for data collection with an IRTlib Player.\n\n\nIf a sealed study configuration has been exported from the IRTlib Editor, it can be integrated into an IRTlib Player.\nTwo options are currently supported:\n\nAutomatic import from ZIP archive\nManual import from ZIP archive\n\nThe automatic import is only possible for the first Study in an IRTlib Player. If several Studies are to be used in parallel in an IRTlib Player, a manual import must be configured.\n\n\nFor an automatic import of a Study available as a ZIP archive in an offline IRTlib Player, the player can first be started via the executable file TestApp.Player.Desktop.exe.\nIf this IRTlib Player has not yet been configured with a Study (i.e. the player has been downloaded directly from the Github repository as described under Download, for example), the following dialogue appears:\n\nThe ZIP archive can be opened directly by clicking the Deploy Study button. It is then automatically inserted into the IRTlib Player and can be used in the way configured in the Login section of the Study.\n\n\n\nIf no automatic import is possible or desired, the contents of the ZIP archive of a Study can also be integrated manually into the directory of the IRTlib Player provided for this purpose.\nEach ZIP archive with a study configuration exported from the IRTlib Editor contains three directories. The ZIP archives {StudyName.zip} can be opened with the Windows Explorer, for example:\n\nTo integrate the Study into an IRTlib Player, the contents of these three directories can now be integrated into the programme directory of an offline IRTlib Player, for example.\n\n\n\n\n\n\n\nStep\nDescription\n\n\n\n\n1.\nUnzip the player (TestApp.Player.zip). This can be done using Windows Explorer, for example:\n\n\n\n\n\n\n2.\nNavigate to the unzipped directory:\n\n\n\n\n\n\n3.\nCreate a new folder Content within the player folder (i.e. TestApp.Player/Content/). If a Study is already configured, then the Content folder already exists.\n\n\n\n\n\n\n4.\nCopy the three folders ItemPool, Runtime and Studies from the downloaded study {StudyName.zip} into the Content folder of the player.\n\n\n\n\n\n\n5.\nStart the file TestApp.Player.Desktop.exe\n\n\n6.\nIf necessary, accept the following warning:\n\n\n\n\n\n\n\nThe import of studies into an online IRTlib Player is analogous to the procedure described here. For this, access to the volume /app/Content defined in the docker-compse.yml file is required for preparation.\n\n\n\n\nThe study configurations created with an IRTlib Editor can be used with different variants of the IRTlib Player.\nThree versions are currently available:\n\nDesktop version (Windows)\nLocal server version (Windows)\nOnline version (Docker)\n\n\n\nBasic configurations of the IRTlib Player (display in windowed mode vs. full screen mode) are part of the study configuration. Only studies with the same display settings can be used simultaneously in an offline IRTlib Player. Multiple copies of an offline IRTlib Player on one computer are possible.\nTo start the (offline) IRTlib Player on a computer, the executable file TestApp.Player.Desktop.exe must be started.\nData Storage: The data collected during a data collection with the offline IRTlib Player is stored locally in a directory. The directory and the file name for the raw data storage are configured in the Study and can be customised using startup parameters. The user name or the UUID created is used as the file name of the raw data archive. If the user name is used more than once in an (offline) IRTlib Player, i.e. if a raw data archive with this file name already exists when the IRTlib Player is closed, it is not overwritten but a suffix is added (e.g. PersonIdentifier_1.zip).\nStartup Parameter: The integration of the offline IRTlib Player into programmed processes is possible. Login data (user name, user name + password, token) that are configured in a Study can be transferred as so-called startup parameters. These parameters are then appended to the call of TestApp.Player.Desktop.exe.\nExample:\n\nTestApp.Player.Desktop.exe /RawDataFolder=\"..\\\\myDataFolder\"\n\nValid startup parameters are:\n\n/AutoLoginCreateWithTest=\"{StudyName}\": Requests the administration of the study named {StudyName}.\n/AutoLoginUserName=\"{PersonIdentifier}\": Passes the login information {PersonIdentifier} as the user name.\n/MyBlocklyVariable=\"123\": Passes the value 123 for the Blockly variable MyBlocklyVariable.\n/MonitoringFile=\"..\\\\last-run.json\": Path and file name of the so-called monitoring file.\n/RawDataFolder=\"..\\\\myDataFolder\": Path to the directory in which the raw data archives are saved.\n\nSeveral startup parameters in succession are possible (separated by spaces).\nChecking Prerequisites: The IRTlib Player should be able to run on Windows computers (currently supported from Windows 10) without further installation or runtime requirements. However, special configurations, virus scanners etc. may prevent it from running. A tool for checking prerequisites can be created, for example, based on this example (IRTlibReadiness).\n\n\n\n\n\n\nImportant note\n\n\n\nThe provided Windows version of the IRTlib Player enables a simple kiosk mode, which is only intended for computers with only one screen (e.g. notebooks). For an exam-safe kiosk solution, the offline version of the IRTlib Player can be combined as a local server with additional software (such as the Safe Exam Browser).\n\n\n\n\n\nThe ZIP archives of the offline IRTlib Player available via the Github repository in the Releases section also contain a local server version parallel to the application with integrated browser (TestApp.Player.Desktop.exe), which can be started via the executable file TestApp.Player.Server.exe.\n\n\n\n\n\n\n\nImportant note\n\n\n\nThe version TestApp.Player.Server.exe is intended for offline operation in bring-in networks, e.g., when WLAN routers and server notebooks are brought into schools. This version is not intended for online use (for which the Docker version is provided).\n\n\n\n\n\n\nIntegration: To carry out data collection, the Docker image of the IRTlib Player should only be accessible via https-secured connections. This can be realised, for example, using an additional nginx configured as a reverse proxy.\nAccess to Editor: Unauthorised persons who are not involved in study preparation must not be able to access the IRTlib Editor. The Github repository provides IRTlib Editor and IRTlib Player. For operational data collection, it is not necessary to run the IRTlib Editor online, as the study preparation can also be created with the offline version of the IRTlib Editor. If the IRTlib Editor is hosted online, it must be protected against unauthorised access.\nAccess to directories: The item contents that are configured for an assessment are stored in the volumes /app/Content (IRTlib Player) and /app/data (IRTlib Editor) defined in the docker-compse.yml file. To ensure the protection of instruments, unauthorised persons must not be able to access these volumes.\nData storage: The data collected during a data collection with the online IRTlib Player is stored in the volume app/result. They can be retrieved from there as directories (one directory per session) or as raw data archives via an API (if an API key is defined).\n\n\n\n\n\n\nNote\n\n\n\nWhen using Docker containers, assessment content and data can be accessed online. Assessment content is only protected via the login mode defined in the study configuration. Personal data and assessment content may also be accessible if an API key is defined.\n\n\nConfiguration of the player: The file appsettings.json, which is contained in the TestApp.Player directory, is central to the technical configuration of the player. Three different API keys (i.e. access keys) can be stored in this file by storing them in the following JSON structure before the Docker container is started:\n\"API\": {\n   \"ExternalExportKey\": \"\",\n   \"DevelopmentKey\": \"\",\n   \"LoginManagementKeys\": []\n }\nThe API keys have the following functions:\n\nExternalExportKey: This key is used to gain access to the data collected with the IRTlib Player. The data can be accessed via the R package LogFSM, for example, as described in the section Data retrieval.\n\n\n\n\n\n\n\nRoutes for direct access\n\n\n\n\n\nThe list of the processed session, i.e. the session identifiers, can be retrieved as JSON with an API key for ExternalExportKey via the following call:\nhttps://{U}/{S}/api/session/?apiKey={K}\n\n{U} is the URL of the IRTlib Player\n{S} is the identifier of the study\n{K} is the ExternalExportKey as defined in the appsettings.json\n\nWith a known Session-Identifier the raw data can then be retrieved via the following call with an API-Key for ExternalExportKey:\nhttps://{U}/{S}/api/session/{ID}/result?apiKey={K}\n\n{ID} is the Session-Identifier (e.g. the user name, depending on the configuration of the login)\n\n\n\n\n\nDevelopmentKey: This API-Key is intended for customising study configurations in a running player.\n\n\n\n\n\n\n\nUnder Development\n\n\n\nThis function is currently under development.\n\n\n\nLoginManagementKeys: This list of API-Keys is intended for customising login data (accounts) in a running player.\n\n\n\n\n\n\n\nUnder Development\n\n\n\nThis function is currently under development.\n\n\nMonitoring: (A method for monitoring Docker containers is under development).\n\n\n\n\nWith the integration of a study configuration into an IRTlib Player, the preparation is not yet complete. Before data collection can be started with the IRTlib software, the following tests should be conducted:\n(Tests within the CBA ItemBuilder-Preview): Before configuring a study and a survey section with CBA ItemBuilder-tasks, it should already have been tested in terms of presentation, functionality and scoring in the Preview of the CBA ItemBuilder.\nFunctional tests: Especially if CBA ItemBuilder-tasks interact with the delivery platform (such as login items), functional tests (i.e. tests of specific functions) should be carried out in the delivery software. This also applies to navigation between items and, of course, the flow control configured in the delivery environment.\nCross-browser testing: If studies are not conducted with the offline IRTlib Player (which comes with its own browser) and especially if newly or specifically programmed JavaScript/HTML5 content is used within the CBA ItemBuilder-Tasks via so-called *ExternalPageFrames (i.e. iframes), testing should be carried out in different browsers.\nPerformance tests: If large media files (videos, audio files) are included in the CBA ItemBuilder-Tasks, it may be advisable to test the feasibility of the assessment even under unfavourable network conditions (e.g. low bandwidth, long latencies, connection drops, etc.).\nLoad tests: If a large number of test participants are to be tested in parallel (online), it may be advisable to coordinate the load behaviour of the delivery (and, for example, the resources available for the Docker container) in advance.\nData storage check: In any case, the fit of the scoring definition within the CBA ItemBuilder-Tasks and the configuration in the IRTlib Editor should be checked and a data storage check made. This means that synthetic click patterns (i.e. responses) are entered before the start of the survey and compared with the responses stored in the data set. In order to be able to easily recognise input errors during the subsequent check, it has proven useful to record screen videos in parallel for the data storage check.\nSmoke test: The final form of testing is a run-through test in the fully configured setting from Study in an IRTlib Player. The survey should be displayed correctly and a readable raw data archive should be created.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe provision of the free research software IRTlib Editor and IRTlib Player is without guarantee and no liability can be accepted for missing data, data loss or compromised data etc.\n\n\nGenerally valid recommendations for (absolutely) necessary tests are difficult to formulate, the following table is therefore to be understood as a non-binding recommendation, which must be weighed up in each specific case.\n\n\n\n\n\n\n\n\nTest\nRecommendation\nCondition\n\n\n\n\nCBA ItemBuilder-Preview\nAlways\n(Errors in presentation, behaviour and scoring that can already be found during item creation should be systematically tested and excluded before creating a study configuration).\n\n\nFunctional tests\nIf required\nOnly if IRTlib Player and CBA ItemBuilder-Tasks have to interact and in relation to functionality defined in the IRTlib Editor (e.g. response-dependent branching).\n\n\nCross-browser testing\nIf required\nOnly if IRTlib Player is used online and the browsers do not correspond to the browsers already used for the CBA ItemBuilder-Preview.\n\n\nPerformance tests\nIf required\nIf large multimedia parts are included or if a poor network connection is to be expected.\n\n\nLoad tests\nIf required\nOnly if online IRTlib Player is to be administered with many parallel tests.\n\n\nData storage check\nAlways\nCheck all data (incl. log data if this is required for evaluation).\n\n\nSmoke test\nAlways\nSmoke test for every version, especially to rule out accidental configuration errors at the last minute.\n\n\n\n\n\n\nOnce the Study has been configured and tested in an IRTlib Player, data can be collected. The longer the field time, the more important it is to regularly back up the collected data or to regularly remove the collected raw data archives from the survey hardware."
  },
  {
    "objectID": "data-collection-player-integration.html#import-configuration",
    "href": "data-collection-player-integration.html#import-configuration",
    "title": "Datenerhebung: In IRTlib Player Importieren / Data Collection: Import into IRTlib Player",
    "section": "",
    "text": "The following describes how to use a study configuration created with an IRTlib Editor that is available as a ZIP archive.\n\n\n\n\n\n\nPublished version required\n\n\n\nA published version of a Study is required for data collection with an IRTlib Player.\n\n\nIf a sealed study configuration has been exported from the IRTlib Editor, it can be integrated into an IRTlib Player.\nTwo options are currently supported:\n\nAutomatic import from ZIP archive\nManual import from ZIP archive\n\nThe automatic import is only possible for the first Study in an IRTlib Player. If several Studies are to be used in parallel in an IRTlib Player, a manual import must be configured.\n\n\nFor an automatic import of a Study available as a ZIP archive in an offline IRTlib Player, the player can first be started via the executable file TestApp.Player.Desktop.exe.\nIf this IRTlib Player has not yet been configured with a Study (i.e. the player has been downloaded directly from the Github repository as described under Download, for example), the following dialogue appears:\n\nThe ZIP archive can be opened directly by clicking the Deploy Study button. It is then automatically inserted into the IRTlib Player and can be used in the way configured in the Login section of the Study.\n\n\n\nIf no automatic import is possible or desired, the contents of the ZIP archive of a Study can also be integrated manually into the directory of the IRTlib Player provided for this purpose.\nEach ZIP archive with a study configuration exported from the IRTlib Editor contains three directories. The ZIP archives {StudyName.zip} can be opened with the Windows Explorer, for example:\n\nTo integrate the Study into an IRTlib Player, the contents of these three directories can now be integrated into the programme directory of an offline IRTlib Player, for example.\n\n\n\n\n\n\n\nStep\nDescription\n\n\n\n\n1.\nUnzip the player (TestApp.Player.zip). This can be done using Windows Explorer, for example:\n\n\n\n\n\n\n2.\nNavigate to the unzipped directory:\n\n\n\n\n\n\n3.\nCreate a new folder Content within the player folder (i.e. TestApp.Player/Content/). If a Study is already configured, then the Content folder already exists.\n\n\n\n\n\n\n4.\nCopy the three folders ItemPool, Runtime and Studies from the downloaded study {StudyName.zip} into the Content folder of the player.\n\n\n\n\n\n\n5.\nStart the file TestApp.Player.Desktop.exe\n\n\n6.\nIf necessary, accept the following warning:\n\n\n\n\n\n\n\nThe import of studies into an online IRTlib Player is analogous to the procedure described here. For this, access to the volume /app/Content defined in the docker-compse.yml file is required for preparation."
  },
  {
    "objectID": "data-collection-player-integration.html#configure-deliveries",
    "href": "data-collection-player-integration.html#configure-deliveries",
    "title": "Datenerhebung: In IRTlib Player Importieren / Data Collection: Import into IRTlib Player",
    "section": "",
    "text": "The study configurations created with an IRTlib Editor can be used with different variants of the IRTlib Player.\nThree versions are currently available:\n\nDesktop version (Windows)\nLocal server version (Windows)\nOnline version (Docker)\n\n\n\nBasic configurations of the IRTlib Player (display in windowed mode vs. full screen mode) are part of the study configuration. Only studies with the same display settings can be used simultaneously in an offline IRTlib Player. Multiple copies of an offline IRTlib Player on one computer are possible.\nTo start the (offline) IRTlib Player on a computer, the executable file TestApp.Player.Desktop.exe must be started.\nData Storage: The data collected during a data collection with the offline IRTlib Player is stored locally in a directory. The directory and the file name for the raw data storage are configured in the Study and can be customised using startup parameters. The user name or the UUID created is used as the file name of the raw data archive. If the user name is used more than once in an (offline) IRTlib Player, i.e. if a raw data archive with this file name already exists when the IRTlib Player is closed, it is not overwritten but a suffix is added (e.g. PersonIdentifier_1.zip).\nStartup Parameter: The integration of the offline IRTlib Player into programmed processes is possible. Login data (user name, user name + password, token) that are configured in a Study can be transferred as so-called startup parameters. These parameters are then appended to the call of TestApp.Player.Desktop.exe.\nExample:\n\nTestApp.Player.Desktop.exe /RawDataFolder=\"..\\\\myDataFolder\"\n\nValid startup parameters are:\n\n/AutoLoginCreateWithTest=\"{StudyName}\": Requests the administration of the study named {StudyName}.\n/AutoLoginUserName=\"{PersonIdentifier}\": Passes the login information {PersonIdentifier} as the user name.\n/MyBlocklyVariable=\"123\": Passes the value 123 for the Blockly variable MyBlocklyVariable.\n/MonitoringFile=\"..\\\\last-run.json\": Path and file name of the so-called monitoring file.\n/RawDataFolder=\"..\\\\myDataFolder\": Path to the directory in which the raw data archives are saved.\n\nSeveral startup parameters in succession are possible (separated by spaces).\nChecking Prerequisites: The IRTlib Player should be able to run on Windows computers (currently supported from Windows 10) without further installation or runtime requirements. However, special configurations, virus scanners etc. may prevent it from running. A tool for checking prerequisites can be created, for example, based on this example (IRTlibReadiness).\n\n\n\n\n\n\nImportant note\n\n\n\nThe provided Windows version of the IRTlib Player enables a simple kiosk mode, which is only intended for computers with only one screen (e.g. notebooks). For an exam-safe kiosk solution, the offline version of the IRTlib Player can be combined as a local server with additional software (such as the Safe Exam Browser).\n\n\n\n\n\nThe ZIP archives of the offline IRTlib Player available via the Github repository in the Releases section also contain a local server version parallel to the application with integrated browser (TestApp.Player.Desktop.exe), which can be started via the executable file TestApp.Player.Server.exe.\n\n\n\n\n\n\n\nImportant note\n\n\n\nThe version TestApp.Player.Server.exe is intended for offline operation in bring-in networks, e.g., when WLAN routers and server notebooks are brought into schools. This version is not intended for online use (for which the Docker version is provided).\n\n\n\n\n\n\nIntegration: To carry out data collection, the Docker image of the IRTlib Player should only be accessible via https-secured connections. This can be realised, for example, using an additional nginx configured as a reverse proxy.\nAccess to Editor: Unauthorised persons who are not involved in study preparation must not be able to access the IRTlib Editor. The Github repository provides IRTlib Editor and IRTlib Player. For operational data collection, it is not necessary to run the IRTlib Editor online, as the study preparation can also be created with the offline version of the IRTlib Editor. If the IRTlib Editor is hosted online, it must be protected against unauthorised access.\nAccess to directories: The item contents that are configured for an assessment are stored in the volumes /app/Content (IRTlib Player) and /app/data (IRTlib Editor) defined in the docker-compse.yml file. To ensure the protection of instruments, unauthorised persons must not be able to access these volumes.\nData storage: The data collected during a data collection with the online IRTlib Player is stored in the volume app/result. They can be retrieved from there as directories (one directory per session) or as raw data archives via an API (if an API key is defined).\n\n\n\n\n\n\nNote\n\n\n\nWhen using Docker containers, assessment content and data can be accessed online. Assessment content is only protected via the login mode defined in the study configuration. Personal data and assessment content may also be accessible if an API key is defined.\n\n\nConfiguration of the player: The file appsettings.json, which is contained in the TestApp.Player directory, is central to the technical configuration of the player. Three different API keys (i.e. access keys) can be stored in this file by storing them in the following JSON structure before the Docker container is started:\n\"API\": {\n   \"ExternalExportKey\": \"\",\n   \"DevelopmentKey\": \"\",\n   \"LoginManagementKeys\": []\n }\nThe API keys have the following functions:\n\nExternalExportKey: This key is used to gain access to the data collected with the IRTlib Player. The data can be accessed via the R package LogFSM, for example, as described in the section Data retrieval.\n\n\n\n\n\n\n\nRoutes for direct access\n\n\n\n\n\nThe list of the processed session, i.e. the session identifiers, can be retrieved as JSON with an API key for ExternalExportKey via the following call:\nhttps://{U}/{S}/api/session/?apiKey={K}\n\n{U} is the URL of the IRTlib Player\n{S} is the identifier of the study\n{K} is the ExternalExportKey as defined in the appsettings.json\n\nWith a known Session-Identifier the raw data can then be retrieved via the following call with an API-Key for ExternalExportKey:\nhttps://{U}/{S}/api/session/{ID}/result?apiKey={K}\n\n{ID} is the Session-Identifier (e.g. the user name, depending on the configuration of the login)\n\n\n\n\n\nDevelopmentKey: This API-Key is intended for customising study configurations in a running player.\n\n\n\n\n\n\n\nUnder Development\n\n\n\nThis function is currently under development.\n\n\n\nLoginManagementKeys: This list of API-Keys is intended for customising login data (accounts) in a running player.\n\n\n\n\n\n\n\nUnder Development\n\n\n\nThis function is currently under development.\n\n\nMonitoring: (A method for monitoring Docker containers is under development)."
  },
  {
    "objectID": "data-collection-player-integration.html#testing-and-releasing-deliveries",
    "href": "data-collection-player-integration.html#testing-and-releasing-deliveries",
    "title": "Datenerhebung: In IRTlib Player Importieren / Data Collection: Import into IRTlib Player",
    "section": "",
    "text": "With the integration of a study configuration into an IRTlib Player, the preparation is not yet complete. Before data collection can be started with the IRTlib software, the following tests should be conducted:\n(Tests within the CBA ItemBuilder-Preview): Before configuring a study and a survey section with CBA ItemBuilder-tasks, it should already have been tested in terms of presentation, functionality and scoring in the Preview of the CBA ItemBuilder.\nFunctional tests: Especially if CBA ItemBuilder-tasks interact with the delivery platform (such as login items), functional tests (i.e. tests of specific functions) should be carried out in the delivery software. This also applies to navigation between items and, of course, the flow control configured in the delivery environment.\nCross-browser testing: If studies are not conducted with the offline IRTlib Player (which comes with its own browser) and especially if newly or specifically programmed JavaScript/HTML5 content is used within the CBA ItemBuilder-Tasks via so-called *ExternalPageFrames (i.e. iframes), testing should be carried out in different browsers.\nPerformance tests: If large media files (videos, audio files) are included in the CBA ItemBuilder-Tasks, it may be advisable to test the feasibility of the assessment even under unfavourable network conditions (e.g. low bandwidth, long latencies, connection drops, etc.).\nLoad tests: If a large number of test participants are to be tested in parallel (online), it may be advisable to coordinate the load behaviour of the delivery (and, for example, the resources available for the Docker container) in advance.\nData storage check: In any case, the fit of the scoring definition within the CBA ItemBuilder-Tasks and the configuration in the IRTlib Editor should be checked and a data storage check made. This means that synthetic click patterns (i.e. responses) are entered before the start of the survey and compared with the responses stored in the data set. In order to be able to easily recognise input errors during the subsequent check, it has proven useful to record screen videos in parallel for the data storage check.\nSmoke test: The final form of testing is a run-through test in the fully configured setting from Study in an IRTlib Player. The survey should be displayed correctly and a readable raw data archive should be created.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe provision of the free research software IRTlib Editor and IRTlib Player is without guarantee and no liability can be accepted for missing data, data loss or compromised data etc.\n\n\nGenerally valid recommendations for (absolutely) necessary tests are difficult to formulate, the following table is therefore to be understood as a non-binding recommendation, which must be weighed up in each specific case.\n\n\n\n\n\n\n\n\nTest\nRecommendation\nCondition\n\n\n\n\nCBA ItemBuilder-Preview\nAlways\n(Errors in presentation, behaviour and scoring that can already be found during item creation should be systematically tested and excluded before creating a study configuration).\n\n\nFunctional tests\nIf required\nOnly if IRTlib Player and CBA ItemBuilder-Tasks have to interact and in relation to functionality defined in the IRTlib Editor (e.g. response-dependent branching).\n\n\nCross-browser testing\nIf required\nOnly if IRTlib Player is used online and the browsers do not correspond to the browsers already used for the CBA ItemBuilder-Preview.\n\n\nPerformance tests\nIf required\nIf large multimedia parts are included or if a poor network connection is to be expected.\n\n\nLoad tests\nIf required\nOnly if online IRTlib Player is to be administered with many parallel tests.\n\n\nData storage check\nAlways\nCheck all data (incl. log data if this is required for evaluation).\n\n\nSmoke test\nAlways\nSmoke test for every version, especially to rule out accidental configuration errors at the last minute.\n\n\n\n\n\n\nOnce the Study has been configured and tested in an IRTlib Player, data can be collected. The longer the field time, the more important it is to regularly back up the collected data or to regularly remove the collected raw data archives from the survey hardware."
  },
  {
    "objectID": "translation.html",
    "href": "translation.html",
    "title": "Translation",
    "section": "",
    "text": "Note\n\n\n\nThe software has been designed so that it can also be translated into other languages. If you would like to support us in this, please contact us.\n\n\n\n\n\n\nThis editor can be used to created localized resx-files for the application: ResXResourceManager\n\nThe source file can be found here: (TODO)\n\nHelp (included in the application) is generated using quarto useing all markdown files starting with InlineHelp_* in this folder.\n\nHelp.de-DE.resx\nHelp.en-US.resx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMarkdown (DEU)\nen-US\nde-DEU\n…\n\n\n\n\n*IRTlib Player*\nIRTlib Player\nIRTlib Player\n\n\n\n*IRTlib Editor*\nIRTlib Editor\nIRTlib Editor\n\n\n\n*IRTlib Software*\nIRTlib Software\nIRTlib Software\n\n\n\nOffline-*IRTlib Player*\nOffline-IRTlib Player\nOffline-IRTlib Player\n\n\n\nOnline-*IRTlib Player*\nOnline-IRTlib Player\nOnline-IRTlib Player\n\n\n\n*Studie*\nStudy\nStudie\n\n\n\n*Erhebungsteil*\nStudy Part \nErhebungsteil\n\n\n\n*Einstellungen*\nSettings\nEinstellungen\n\n\n\n*Testleitermenü*\nSession Menu\nTestleitermenü\n\n\n\n*Bearbeitungszeit*\nCompletion time\nBearbeitungszeit\n\n\n\n*Bearbeitungszeit begrenzen*\nRestrict time allowed\nBearbeitungszeit begrenzen\n\n\n\n*Studienversion*\nStudy version\nStudienversion\n\n\n\n*Revision*\nRevision\nRevision\n\n\n\n*Vorspann-Item(s)*\nProlog Item(s)\nVorspann-Item(s)\n\n\n\n*Nachspann-Items(s)*\nEpilog Item(s)\nNachspann-Items(s)\n\n\n\n*Testleiter*\nTest Administrator\nTestleiter\n\n\n\n*CBA ItemBuilder*-Items\nCBA ItemBuilder-Items\nCBA ItemBuilder-Items\n\n\n\n*Docker*-Container\nDocker-Container\nDocker-Container"
  },
  {
    "objectID": "translation.html#help-requested",
    "href": "translation.html#help-requested",
    "title": "Translation",
    "section": "",
    "text": "Note\n\n\n\nThe software has been designed so that it can also be translated into other languages. If you would like to support us in this, please contact us."
  },
  {
    "objectID": "translation.html#current-translations",
    "href": "translation.html#current-translations",
    "title": "Translation",
    "section": "",
    "text": "This editor can be used to created localized resx-files for the application: ResXResourceManager\n\nThe source file can be found here: (TODO)\n\nHelp (included in the application) is generated using quarto useing all markdown files starting with InlineHelp_* in this folder.\n\nHelp.de-DE.resx\nHelp.en-US.resx"
  },
  {
    "objectID": "translation.html#terminology-and-standardizing-the-notation",
    "href": "translation.html#terminology-and-standardizing-the-notation",
    "title": "Translation",
    "section": "",
    "text": "Markdown (DEU)\nen-US\nde-DEU\n…\n\n\n\n\n*IRTlib Player*\nIRTlib Player\nIRTlib Player\n\n\n\n*IRTlib Editor*\nIRTlib Editor\nIRTlib Editor\n\n\n\n*IRTlib Software*\nIRTlib Software\nIRTlib Software\n\n\n\nOffline-*IRTlib Player*\nOffline-IRTlib Player\nOffline-IRTlib Player\n\n\n\nOnline-*IRTlib Player*\nOnline-IRTlib Player\nOnline-IRTlib Player\n\n\n\n*Studie*\nStudy\nStudie\n\n\n\n*Erhebungsteil*\nStudy Part \nErhebungsteil\n\n\n\n*Einstellungen*\nSettings\nEinstellungen\n\n\n\n*Testleitermenü*\nSession Menu\nTestleitermenü\n\n\n\n*Bearbeitungszeit*\nCompletion time\nBearbeitungszeit\n\n\n\n*Bearbeitungszeit begrenzen*\nRestrict time allowed\nBearbeitungszeit begrenzen\n\n\n\n*Studienversion*\nStudy version\nStudienversion\n\n\n\n*Revision*\nRevision\nRevision\n\n\n\n*Vorspann-Item(s)*\nProlog Item(s)\nVorspann-Item(s)\n\n\n\n*Nachspann-Items(s)*\nEpilog Item(s)\nNachspann-Items(s)\n\n\n\n*Testleiter*\nTest Administrator\nTestleiter\n\n\n\n*CBA ItemBuilder*-Items\nCBA ItemBuilder-Items\nCBA ItemBuilder-Items\n\n\n\n*Docker*-Container\nDocker-Container\nDocker-Container"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Über / About",
    "section": "",
    "text": "Contributors to this manual were:\n\nMaximilian Sattler\nCarla Burkart\n\n\n\n\n\n\n\nIn development\n\n\n\n\nRevision, language correction and translation of the manual are currently in progress…\n\n\n\n\n\n\nThe development of the IRTlib Software takes place at Software-Driven."
  },
  {
    "objectID": "about.html#acknowledgements",
    "href": "about.html#acknowledgements",
    "title": "Über / About",
    "section": "",
    "text": "Contributors to this manual were:\n\nMaximilian Sattler\nCarla Burkart\n\n\n\n\n\n\n\nIn development\n\n\n\n\nRevision, language correction and translation of the manual are currently in progress…"
  },
  {
    "objectID": "about.html#development",
    "href": "about.html#development",
    "title": "Über / About",
    "section": "",
    "text": "The development of the IRTlib Software takes place at Software-Driven."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home | IRTlib",
    "section": "",
    "text": "IRTlib is a software for the delivery of computer-based tests. The software consists of two components:\n\nIRTLib Editor: A software for test authors, which is used to configure Studies.\nIRTlib Player: A software for data collections, with which target persons work on tasks that are configured in the form of a Study.\n\nInstructions for installing and setting up both programmes for initial use can be found under Download & Installation.\n\n\n\nBefore using the IRTlib Software to configure and create deliveries, the assessment content (tasks, instructions, intermediate screens, etc.) must be created in the form of individual Tasks using the CBA ItemBuilder.\n\nThe CBA ItemBuilder can be downloaded here: www.itembuilder.de/software\nAn interactive documentation of the CBA ItemBuilder is available here: cba.itembuilder.de\n\nSuggested Citation:\n\nKroehne, U. (2023). Open Computer-based Assessment with the CBA ItemBuilder. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10359757\n\n\n\n\n\n\nCBA ItemBuilder Documentation (PDF)\n\n\n\n\n\n\n\nFor the use of the IRTlib software, a context-sensitive program help is stored directly in the application. The documentation with the embedded help is available online on this page and is also available as PDF.\nSuggested Citation:\n\nKroehne, U. (2023). IRTlib Documentation: Software for the administration and delivery of computer-based assessments [IRTlib Dokumentation: Software für die Verwaltung und Auslieferung computergestützter Assessments]. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10441352\n\n\n\n\n\n\nIRTlib Software Documentation (PDF)\n\n\n\n\n\nThe development of the CBA ItemBuilder and the IRTlib Software is coordinated by the Centre for Technology-Based Assessment (TBA) at the DIPF | Leibniz Institute for Research and Information in Education."
  },
  {
    "objectID": "development.html",
    "href": "development.html",
    "title": "Development",
    "section": "",
    "text": "Editor for defining Codebooks\nEditor for managing IRT Parameters for ItemPools\nIRT-Integration in Blockly for MST/CAT/MCAT/…\nWebservice Integration required for NLP/Scoring/AI"
  },
  {
    "objectID": "development.html#missing-features-in-version-1.1",
    "href": "development.html#missing-features-in-version-1.1",
    "title": "Development",
    "section": "",
    "text": "Editor for defining Codebooks\nEditor for managing IRT Parameters for ItemPools\nIRT-Integration in Blockly for MST/CAT/MCAT/…\nWebservice Integration required for NLP/Scoring/AI"
  },
  {
    "objectID": "data-collection-post-processing.html",
    "href": "data-collection-post-processing.html",
    "title": "Datenerhebung: Datenaufbereitung / Data Collection: Data Post-Processing",
    "section": "",
    "text": "Data is saved by the IRTlib Player in raw data archives per session (i.e. per test run with a Study). The raw data archives are ZIP archives whose file names correspond to the user name or the Universally Unique Identifier (UUID). Deviations from this scheme are possible if a raw data archive with this file name already existed at the time of saving. In this case, the data is not overwritten by the IRTlib Player, but a suffix _1, _2, … is appended until the file name can be used.\n\nOffline IRTlib Player: If not configured otherwise, the results data are saved in the directory Temp/{Study-Name}/Results. The raw data archives are created when a session is ended, i.e. the last defined CBA ItemBuilder-Task is exited with NEXT_TASK. It is no longer possible to continue the session that has been started, as may be necessary for instance in the event of a computer crash, after the raw data archives have been created.\n\n\nThe same applies if the offline version of the IRTlib Player is used as a local server. The raw data archives are saved in the Temp/{Study name}/Results directory after test processing.\n\n\nThe collection of data from the offline IRTlib Players corresponds to the collection of the raw data archives that are collected on the various devices.\n\n\n\n\n\n\n\nNote\n\n\n\nAs the offline IRTlib Players are not connected to each other, identical login data can be created in parallel in different IRTlib Players, depending on the login mode. After data collection, the raw data archives must therefore be merged with care and, if necessary, separated by subfolders.\n\n\n\nOnline IRTlib Player: Unless configured otherwise, the online player collects the data in the volume that is configured for the results data (see /app/results in docker-compse.yml file). Each session is stored there in a separate subdirectory and can be downloaded by administrators who have access to the volume (!).\n\nIf an API-key is defined for data access, the download of the result data can also be carried out via the R package LogFSM.\n\n\nTo do this, the R package can first be installed (once) with the following call:\n\nsource(\"http://logfsm.com/latest\")\n\nThe raw data archives can then be downloaded using the following R script:\n\n\nlibrary(LogFSM)\n\nif (!dir.exists(paste0(getwd(),\"/in/\")))\n  dir.create(paste0(getwd(),\"/in/\"))\n\nif (!dir.exists(paste0(getwd(),\"/out/\")))\n  dir.create(paste0(getwd(),\"/out/\"))\n\nSECRET_KEY &lt;- \"(your secret key)\"\nAPI_URL &lt;- \"(your API-URL)\"\n\nLogFSM::TransformToUniversalLogFormat(inputfolders = paste0(getwd(),\"/in/\"),\n                              inputformat = \"irtlibv01a\", \n                              zcsvoutput = paste0(getwd(),\"/out/data_csv.zip\"),  \n                              stataoutput = paste0(getwd(),\"/out/data_dta.zip\"),\n                              spssoutput = paste0(getwd(),\"/out/data_sav.zip\"),\n                              key = SECRET_KEY,\n                              web = API_URL, \n                              outputtimestampformatstring=\"dd.MM.yyyy HH:mm:ss.fff\")\n\nresults &lt;- read.csv(unz(paste0(getwd(),\"/out/data_csv.zip\"), \"Results.csv\"),\n                    sep=\";\", encoding = \"UTF-8\")\n\nData retrieval and conversion of the data with LogFSM\n\nBy calling the function TransformToUniversalLogFormat from the package LogFSM, the data is downloaded and stored in the specified directory infolders if an API key (key) and an API url (web) are passed.\n\n\n\n\n\n\nNote on SECRET_KEY and API_URL\n\n\n\n\n\nThe value for SECRET_KEY must correspond to the entry that was defined as ExternalExportKey in the appsettings.json when configuring the Docker image, see section Online-Version (Docker).\nThe value for the API_URL is formed according to the following scheme: https://{U}/{S}/api/session/\n\n{U} is the URL of the IRTlib Player\n{S} is the identifier of the study\n\n\n\n\nThe function TransformToUniversalLogFormat from the package LogFSM (or analogue to the command line tool described below) can also be used to read out already existing local raw data archives.\n\n\n\nThe application TransformToUniversalLogFormat used for data retrieval and data conversion via LogFSM is available as a console application from the Releases section of https://github.com/kroehne/LogFSM/.\nData retrieval and data transformation can also be performed without R.\n\n\n\n\n\n\n\nIn development\n\n\n\nA certified version of TransformToUniversalLogFormat for Apple is currently under development.\n\n\n\n\n\nIf the data was retrieved via LogFSM from an online IRTlib Player or collected offline, it is stored in a directory at the end. Per session (i.e. per person or person x time) as a raw data archive.\nThe function TransformToUniversalLogFormat in LogFSM or via the command line can also be used to read the raw data archives from a directory and extract the result data:\n\n\nlibrary(LogFSM)\n\nif (!dir.exists(paste0(getwd(),\"/out/\")))\n  dir.create(paste0(getwd(),\"/out/\"))\n\nLogFSM::TransformToUniversalLogFormat(inputfolders = paste0(getwd(),\"/in/\"),\n                              inputformat = \"irtlibv01a\", \n                              zcsvoutput = paste0(getwd(),\"/out/data_csv.zip\"),  \n                              stataoutput = paste0(getwd(),\"/out/data_dta.zip\"),\n                              spssoutput = paste0(getwd(),\"/out/data_sav.zip\"),\n                              outputtimestampformatstring=\"dd.MM.yyyy HH:mm:ss.fff\")\n\nresults &lt;- read.csv(unz(paste0(getwd(),\"/out/data_csv.zip\"), \"Results.csv\"),\n                    sep=\";\", encoding = \"UTF-8\")\n\n\n\n\n\nConverting the data with TransformToUniversalLogFormat in LogFSM or via the command line converts the collected log data, which is provided by the CBA ItemBuilder-Tasks, into the following formats:\n\nFlat and Sparse Log-Data Table: A large table (as CSV, Stata, SPSS) with one row per event. As the event-specific attributes (i.e. the various additional information available from an event) are distributed across many columns, which are only filled for each event type, this table is flat, but can also be very holey.\nUniversal log format: Alternatively, the ZIP archives created by LogFSM or the command line tool TransformToUniversalLogFormat also contain individual data record tables for each event type. The event-specific attributes in these tables are less holey (i.e. they only contain missing values for optional attributes) and can be combined into a Flat and Sparse Log-Data Table if required.\nXES (eXtensible Event Stream): The log data can also be converted to the standardised XML format (https://xes-standard.org/).\n\n\n\n\n\n\n\nNote on timestamps\n\n\n\nThe timestamps collected with the IRTlib software are in UTC format (Coordinated Universal Time).\n\n\n\n\n\nThe raw data archives contain the following files:\n\nTrace.json: Log data (Traces) as supplied by the CBA ItemBuilder-Runtime, together with the context from the IRTlib Player.\n\n\nThe file contains the following structure, separated by commas. The file is not a valid JSON until the last comma is removed and a [ before and a ] after the content is inserted.\n\n\nThe entry Trace contains the log data (Traces) in packets (as supplied by the CBA ItemBuilder-Runtime) quoted (i.e. \" is displayed as \\u0022). The TraceId is a counter which counts the transmitted packets. Timestamp is the timestamp of the transmission. SessionId is the user name or the UUID (PersonIdentifier). The Context provides a reference to the assessment content (Element) via the name of the CBA ItemBuilder project, Task and Scope. The information on the IRTlib Player used is stored under Assemblies and StudyRevision refers to the Revision of a (published) Study.\n\n{\n    \"Trace\": \"(TRACE-JSON)\",\n    \"TraceId\": 1,\n    \"Timestamp\": \"2023-12-04T20:53:06.297Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n    },\n    \"Assemblies\": [\n        {\n            \"Name\": \"TestApp.Player.Desktop\",\n            \"Version\": \"(APPLICATION VERSION)\",\n            \"GitHash\": \"(APPLICATION BUILD HASH)\"\n        }\n    ],\n    \"StudyRevision\": \"(STUDY REVISION)\"\n},\n\nSnapshot.json: Snapshot data as supplied by the CBA ItemBuilder-Runtime, together with the context from the IRTlib Player.\n\n\nThe file contains the following structure, separated by commas. The file is not a valid JSON until the last comma is removed and a [ before and a ] after the content is inserted.\n\n\nThe Snapshot entry contains the snapshot information (as supplied by the CBA ItemBuilder-Runtime) quoted (i.e. \" is displayed as \\u0022). The ContextFlag indicates how the CBA ItemBuilder-Task was exited (NextTask, PreviousTask or Cancel).  Timestamp is the timestamp of the transmission. SessionId is the user name or the UUID (PersonIdentifier). The Context provides a reference to the assessment content (Element) via the name of the CBA ItemBuilder project, Task and Scope. The information on the IRTlib Player used is stored under Assemblies and StudyRevision refers to the Revision of a (published) Study.\n\n\n{\n    \"Snapshot\": \"(SNAPSHOT-JSON)\",\n    \"ContextFlag\": \"NextTask\",\n    \"ContextScope\": 0,\n    \"Timestamp\": \"2023-12-04T20:53:06.497Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n    },\n    \"Assemblies\": null,\n    \"StudyRevision\": null\n},\n\nItemScore.json: Scoring information (as supplied by CBA ItemBuilder-Runtime).\n\n\nThe file contains the following structure, separated by a comma. The file is not a valid JSON until the last comma is removed and a [ before and a ] after the content is inserted.\n\n\nThe ItemScore entry contains the ItemScore (as supplied by the CBA ItemBuilder-Runtime) quoted (i.e. \" is displayed as \\u0022).The ContextFlag specifies how the CBA ItemBuilder-Task was exited (NextTask, PreviousTask or Cancel).  Timestamp is the timestamp of the transmission. SessionId is the user name or the UUID (PersonIdentifier). The Context provides a reference to the assessment content (Element) via the name of the CBA ItemBuilder project, Task and Scope. The information on the IRTlib Player used is stored under Assemblies and StudyRevision refers to the Revision of a (published) Study.\n\n{\n    \"ItemScore\": \"(SCORING-JSON)\",\n    \"ContextFlag\": \"NextTask\",\n    \"ContextScope\": 0,\n    \"Timestamp\": \"2023-12-04T20:53:06.474Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n     },\n    \"Assemblies\": [\n        {\n            \"Name\": \"TestApp.Player.Desktop\",\n            \"Version\": \"(APPLICATION VERSION)\",\n            \"GitHash\": \"(APPLICATION BUILD HASH)\"\n        }\n    ],\n    \"StudyRevision\": \"(STUDY REVISION)\"\n},\n\nSession.json: The file contains data of the IRTlib Player, which describe the execution of the Session.\nLog.json: Log events of the IRTlib Player (contains log information for processing the Blockly routing).\nbrowser.log: Console output collected during the processing of tasks in the browser (unstructured text, for developers).\nserver.log: Log output from the server of the IRTlib Player (unstructured text, for developers)\nKeyboard.json: Keyboard input and timestamps.\nMonitoring.json: Copy of the monitoring file that was created."
  },
  {
    "objectID": "data-collection-post-processing.html#data-preparation",
    "href": "data-collection-post-processing.html#data-preparation",
    "title": "Datenerhebung: Datenaufbereitung / Data Collection: Data Post-Processing",
    "section": "",
    "text": "Data is saved by the IRTlib Player in raw data archives per session (i.e. per test run with a Study). The raw data archives are ZIP archives whose file names correspond to the user name or the Universally Unique Identifier (UUID). Deviations from this scheme are possible if a raw data archive with this file name already existed at the time of saving. In this case, the data is not overwritten by the IRTlib Player, but a suffix _1, _2, … is appended until the file name can be used.\n\nOffline IRTlib Player: If not configured otherwise, the results data are saved in the directory Temp/{Study-Name}/Results. The raw data archives are created when a session is ended, i.e. the last defined CBA ItemBuilder-Task is exited with NEXT_TASK. It is no longer possible to continue the session that has been started, as may be necessary for instance in the event of a computer crash, after the raw data archives have been created.\n\n\nThe same applies if the offline version of the IRTlib Player is used as a local server. The raw data archives are saved in the Temp/{Study name}/Results directory after test processing.\n\n\nThe collection of data from the offline IRTlib Players corresponds to the collection of the raw data archives that are collected on the various devices.\n\n\n\n\n\n\n\nNote\n\n\n\nAs the offline IRTlib Players are not connected to each other, identical login data can be created in parallel in different IRTlib Players, depending on the login mode. After data collection, the raw data archives must therefore be merged with care and, if necessary, separated by subfolders.\n\n\n\nOnline IRTlib Player: Unless configured otherwise, the online player collects the data in the volume that is configured for the results data (see /app/results in docker-compse.yml file). Each session is stored there in a separate subdirectory and can be downloaded by administrators who have access to the volume (!).\n\nIf an API-key is defined for data access, the download of the result data can also be carried out via the R package LogFSM.\n\n\nTo do this, the R package can first be installed (once) with the following call:\n\nsource(\"http://logfsm.com/latest\")\n\nThe raw data archives can then be downloaded using the following R script:\n\n\nlibrary(LogFSM)\n\nif (!dir.exists(paste0(getwd(),\"/in/\")))\n  dir.create(paste0(getwd(),\"/in/\"))\n\nif (!dir.exists(paste0(getwd(),\"/out/\")))\n  dir.create(paste0(getwd(),\"/out/\"))\n\nSECRET_KEY &lt;- \"(your secret key)\"\nAPI_URL &lt;- \"(your API-URL)\"\n\nLogFSM::TransformToUniversalLogFormat(inputfolders = paste0(getwd(),\"/in/\"),\n                              inputformat = \"irtlibv01a\", \n                              zcsvoutput = paste0(getwd(),\"/out/data_csv.zip\"),  \n                              stataoutput = paste0(getwd(),\"/out/data_dta.zip\"),\n                              spssoutput = paste0(getwd(),\"/out/data_sav.zip\"),\n                              key = SECRET_KEY,\n                              web = API_URL, \n                              outputtimestampformatstring=\"dd.MM.yyyy HH:mm:ss.fff\")\n\nresults &lt;- read.csv(unz(paste0(getwd(),\"/out/data_csv.zip\"), \"Results.csv\"),\n                    sep=\";\", encoding = \"UTF-8\")\n\nData retrieval and conversion of the data with LogFSM\n\nBy calling the function TransformToUniversalLogFormat from the package LogFSM, the data is downloaded and stored in the specified directory infolders if an API key (key) and an API url (web) are passed.\n\n\n\n\n\n\nNote on SECRET_KEY and API_URL\n\n\n\n\n\nThe value for SECRET_KEY must correspond to the entry that was defined as ExternalExportKey in the appsettings.json when configuring the Docker image, see section Online-Version (Docker).\nThe value for the API_URL is formed according to the following scheme: https://{U}/{S}/api/session/\n\n{U} is the URL of the IRTlib Player\n{S} is the identifier of the study\n\n\n\n\nThe function TransformToUniversalLogFormat from the package LogFSM (or analogue to the command line tool described below) can also be used to read out already existing local raw data archives.\n\n\n\nThe application TransformToUniversalLogFormat used for data retrieval and data conversion via LogFSM is available as a console application from the Releases section of https://github.com/kroehne/LogFSM/.\nData retrieval and data transformation can also be performed without R.\n\n\n\n\n\n\n\nIn development\n\n\n\nA certified version of TransformToUniversalLogFormat for Apple is currently under development.\n\n\n\n\n\nIf the data was retrieved via LogFSM from an online IRTlib Player or collected offline, it is stored in a directory at the end. Per session (i.e. per person or person x time) as a raw data archive.\nThe function TransformToUniversalLogFormat in LogFSM or via the command line can also be used to read the raw data archives from a directory and extract the result data:\n\n\nlibrary(LogFSM)\n\nif (!dir.exists(paste0(getwd(),\"/out/\")))\n  dir.create(paste0(getwd(),\"/out/\"))\n\nLogFSM::TransformToUniversalLogFormat(inputfolders = paste0(getwd(),\"/in/\"),\n                              inputformat = \"irtlibv01a\", \n                              zcsvoutput = paste0(getwd(),\"/out/data_csv.zip\"),  \n                              stataoutput = paste0(getwd(),\"/out/data_dta.zip\"),\n                              spssoutput = paste0(getwd(),\"/out/data_sav.zip\"),\n                              outputtimestampformatstring=\"dd.MM.yyyy HH:mm:ss.fff\")\n\nresults &lt;- read.csv(unz(paste0(getwd(),\"/out/data_csv.zip\"), \"Results.csv\"),\n                    sep=\";\", encoding = \"UTF-8\")\n\n\n\n\n\nConverting the data with TransformToUniversalLogFormat in LogFSM or via the command line converts the collected log data, which is provided by the CBA ItemBuilder-Tasks, into the following formats:\n\nFlat and Sparse Log-Data Table: A large table (as CSV, Stata, SPSS) with one row per event. As the event-specific attributes (i.e. the various additional information available from an event) are distributed across many columns, which are only filled for each event type, this table is flat, but can also be very holey.\nUniversal log format: Alternatively, the ZIP archives created by LogFSM or the command line tool TransformToUniversalLogFormat also contain individual data record tables for each event type. The event-specific attributes in these tables are less holey (i.e. they only contain missing values for optional attributes) and can be combined into a Flat and Sparse Log-Data Table if required.\nXES (eXtensible Event Stream): The log data can also be converted to the standardised XML format (https://xes-standard.org/).\n\n\n\n\n\n\n\nNote on timestamps\n\n\n\nThe timestamps collected with the IRTlib software are in UTC format (Coordinated Universal Time).\n\n\n\n\n\nThe raw data archives contain the following files:\n\nTrace.json: Log data (Traces) as supplied by the CBA ItemBuilder-Runtime, together with the context from the IRTlib Player.\n\n\nThe file contains the following structure, separated by commas. The file is not a valid JSON until the last comma is removed and a [ before and a ] after the content is inserted.\n\n\nThe entry Trace contains the log data (Traces) in packets (as supplied by the CBA ItemBuilder-Runtime) quoted (i.e. \" is displayed as \\u0022). The TraceId is a counter which counts the transmitted packets. Timestamp is the timestamp of the transmission. SessionId is the user name or the UUID (PersonIdentifier). The Context provides a reference to the assessment content (Element) via the name of the CBA ItemBuilder project, Task and Scope. The information on the IRTlib Player used is stored under Assemblies and StudyRevision refers to the Revision of a (published) Study.\n\n{\n    \"Trace\": \"(TRACE-JSON)\",\n    \"TraceId\": 1,\n    \"Timestamp\": \"2023-12-04T20:53:06.297Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n    },\n    \"Assemblies\": [\n        {\n            \"Name\": \"TestApp.Player.Desktop\",\n            \"Version\": \"(APPLICATION VERSION)\",\n            \"GitHash\": \"(APPLICATION BUILD HASH)\"\n        }\n    ],\n    \"StudyRevision\": \"(STUDY REVISION)\"\n},\n\nSnapshot.json: Snapshot data as supplied by the CBA ItemBuilder-Runtime, together with the context from the IRTlib Player.\n\n\nThe file contains the following structure, separated by commas. The file is not a valid JSON until the last comma is removed and a [ before and a ] after the content is inserted.\n\n\nThe Snapshot entry contains the snapshot information (as supplied by the CBA ItemBuilder-Runtime) quoted (i.e. \" is displayed as \\u0022). The ContextFlag indicates how the CBA ItemBuilder-Task was exited (NextTask, PreviousTask or Cancel).  Timestamp is the timestamp of the transmission. SessionId is the user name or the UUID (PersonIdentifier). The Context provides a reference to the assessment content (Element) via the name of the CBA ItemBuilder project, Task and Scope. The information on the IRTlib Player used is stored under Assemblies and StudyRevision refers to the Revision of a (published) Study.\n\n\n{\n    \"Snapshot\": \"(SNAPSHOT-JSON)\",\n    \"ContextFlag\": \"NextTask\",\n    \"ContextScope\": 0,\n    \"Timestamp\": \"2023-12-04T20:53:06.497Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n    },\n    \"Assemblies\": null,\n    \"StudyRevision\": null\n},\n\nItemScore.json: Scoring information (as supplied by CBA ItemBuilder-Runtime).\n\n\nThe file contains the following structure, separated by a comma. The file is not a valid JSON until the last comma is removed and a [ before and a ] after the content is inserted.\n\n\nThe ItemScore entry contains the ItemScore (as supplied by the CBA ItemBuilder-Runtime) quoted (i.e. \" is displayed as \\u0022).The ContextFlag specifies how the CBA ItemBuilder-Task was exited (NextTask, PreviousTask or Cancel).  Timestamp is the timestamp of the transmission. SessionId is the user name or the UUID (PersonIdentifier). The Context provides a reference to the assessment content (Element) via the name of the CBA ItemBuilder project, Task and Scope. The information on the IRTlib Player used is stored under Assemblies and StudyRevision refers to the Revision of a (published) Study.\n\n{\n    \"ItemScore\": \"(SCORING-JSON)\",\n    \"ContextFlag\": \"NextTask\",\n    \"ContextScope\": 0,\n    \"Timestamp\": \"2023-12-04T20:53:06.474Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n     },\n    \"Assemblies\": [\n        {\n            \"Name\": \"TestApp.Player.Desktop\",\n            \"Version\": \"(APPLICATION VERSION)\",\n            \"GitHash\": \"(APPLICATION BUILD HASH)\"\n        }\n    ],\n    \"StudyRevision\": \"(STUDY REVISION)\"\n},\n\nSession.json: The file contains data of the IRTlib Player, which describe the execution of the Session.\nLog.json: Log events of the IRTlib Player (contains log information for processing the Blockly routing).\nbrowser.log: Console output collected during the processing of tasks in the browser (unstructured text, for developers).\nserver.log: Log output from the server of the IRTlib Player (unstructured text, for developers)\nKeyboard.json: Keyboard input and timestamps.\nMonitoring.json: Copy of the monitoring file that was created."
  },
  {
    "objectID": "settings.html",
    "href": "settings.html",
    "title": "Einstellungen / Settings",
    "section": "",
    "text": "The IRTlib Editor has a small number of settings.The language can be set to German or English.\n\n\nThe IRTlib software is currently still under development. Information about the current version (and for Preview versions about the build hash) can be found in the section About the Program.\n\n\n\n\n\n\nEmbedded Help\n\n\n\n\n\n\n\nIn this section, settings can be made that affect working with the IRTlib Editor and all studies.\n\n\nTo configure studies that use CBA ItemBuilder content with the IRTLib Editor, the appropriate runtime environment (Runtime) is required for each version. Current tested versions of the CBA ItemBuilder runtime are already stored in the Editor, but runtimes for other versions of the CBA ItemBuilder or updated or corrected runtimes can also be imported into the Editor in this section.\nRuntimes that are available in the Editor are automatically integrated as part of the study configuration when studies are published and are thus available to the IRTLib Player.\n\n\n\nChange the language for the editor in this section. The setting selected here has no influence on the language of the assessment content in the configured studies.\n\n\n\n\nUnder the Version info button, you will find a summary of the latest changes and information on the current programme version.\n\n\n\n\n\n\n\nThe IRTlib Software can be used with CBA ItemBuilder tasks of different CBA ItemBuilder versions. The required Runtime (i.e., the connection between the CBA ItemBuilder tasks and the IRTlib Software) is part of the study configuration so that the IRTlib Player knows for sure how to use CBA ItemBuilder tasks of a particular version.\n\n\n\n\n\n\nEmbedded Help\n\n\n\n\n\n\nTo configure Studies that use CBA ItemBuilder content with the IRTLib Editor, the appropriate runtime environment (Runtime) is required for each version. Current tested versions of the CBA ItemBuilder runtime are already stored in the IRTLib Editor, but runtimes for other versions of the CBA ItemBuilder or updated or corrected runtimes can also be imported into the IRTLib Editor in this section.\n\n\nIt is important to know which version of the CBA ItemBuilder was used to create the items (i.e. the CBA ItemBuilder project files). If in doubt, this information can be found in the About dialogue of the CBA ItemBuilder, for example:\n\nStep 1: Open the “About” dialogue via the “Help” menu\n\n\n\n\n\n\n\n\n\nStep 2: Search for the version number in the dialogue (here 9.9.0)\n\n\n\n\n\n\n\n\nThe version number must be listed as one of the cards in the Settings of the IRTlib Editor in the Runtimes section:\n\n\n\n\n\n\n\n\n\n\nIf the corresponding runtime is not already included in the Editor, a new/additional runtime can be imported. Study configurations that are created/edited with the IRTlib Editor can contain several Runtimes for different versions.\n\nStep 1: To integrate a runtime, a JavaScript and a CSS file are required. These files can be downloaded here:\n\nhttps://cba.itembuilder.de/appendix-tables.html#previous-versions\n\nStep 2: Unzip the downloaded Runtime to be used.\nStep 3: Navigate to the Runtimes section:\n\n\n\n\n\n\n\n\n\nStep 4: Press the “+” button (bottom right)\nStep 5: Enter the version number with three digits (e.g. 9.9.0):\n\n\n\n\n\n\n\n\n\nStep 6: Select the file main.*.js from the ZIP archive containing the runtime environment. Note that the * corresponds to the hash of the file (i.e. the full file name looks like main.19479ac3.js)\nStep 7: Select the file main.*.css from the ZIP archive containing the runtime. Note that the * corresponds to the hash of the file (i.e. the full file name looks like main.b765ceca.css)\n\n\nNote: The Description field and the two additional Map files (for JavaScript Source and for CSS Source) are optional.\n\n\nStep 8: Press the Save button to finalise the import of the Runtime:\n\n\n\n\n\n\n\n\nAfter the import, the supported CBA ItemBuilder versions are listed in the Runtime section. To delete a Runtime for a specific version, click on the Trash icon at the bottom right of the “Map” and confirm with Delete."
  },
  {
    "objectID": "settings.html#overview",
    "href": "settings.html#overview",
    "title": "Einstellungen / Settings",
    "section": "",
    "text": "The IRTlib software is currently still under development. Information about the current version (and for Preview versions about the build hash) can be found in the section About the Program.\n\n\n\n\n\n\nEmbedded Help\n\n\n\n\n\n\n\nIn this section, settings can be made that affect working with the IRTlib Editor and all studies.\n\n\nTo configure studies that use CBA ItemBuilder content with the IRTLib Editor, the appropriate runtime environment (Runtime) is required for each version. Current tested versions of the CBA ItemBuilder runtime are already stored in the Editor, but runtimes for other versions of the CBA ItemBuilder or updated or corrected runtimes can also be imported into the Editor in this section.\nRuntimes that are available in the Editor are automatically integrated as part of the study configuration when studies are published and are thus available to the IRTLib Player.\n\n\n\nChange the language for the editor in this section. The setting selected here has no influence on the language of the assessment content in the configured studies.\n\n\n\n\nUnder the Version info button, you will find a summary of the latest changes and information on the current programme version."
  },
  {
    "objectID": "settings.html#runtimes",
    "href": "settings.html#runtimes",
    "title": "Einstellungen / Settings",
    "section": "",
    "text": "The IRTlib Software can be used with CBA ItemBuilder tasks of different CBA ItemBuilder versions. The required Runtime (i.e., the connection between the CBA ItemBuilder tasks and the IRTlib Software) is part of the study configuration so that the IRTlib Player knows for sure how to use CBA ItemBuilder tasks of a particular version.\n\n\n\n\n\n\nEmbedded Help\n\n\n\n\n\n\nTo configure Studies that use CBA ItemBuilder content with the IRTLib Editor, the appropriate runtime environment (Runtime) is required for each version. Current tested versions of the CBA ItemBuilder runtime are already stored in the IRTLib Editor, but runtimes for other versions of the CBA ItemBuilder or updated or corrected runtimes can also be imported into the IRTLib Editor in this section.\n\n\nIt is important to know which version of the CBA ItemBuilder was used to create the items (i.e. the CBA ItemBuilder project files). If in doubt, this information can be found in the About dialogue of the CBA ItemBuilder, for example:\n\nStep 1: Open the “About” dialogue via the “Help” menu\n\n\n\n\n\n\n\n\n\nStep 2: Search for the version number in the dialogue (here 9.9.0)\n\n\n\n\n\n\n\n\nThe version number must be listed as one of the cards in the Settings of the IRTlib Editor in the Runtimes section:\n\n\n\n\n\n\n\n\n\n\nIf the corresponding runtime is not already included in the Editor, a new/additional runtime can be imported. Study configurations that are created/edited with the IRTlib Editor can contain several Runtimes for different versions.\n\nStep 1: To integrate a runtime, a JavaScript and a CSS file are required. These files can be downloaded here:\n\nhttps://cba.itembuilder.de/appendix-tables.html#previous-versions\n\nStep 2: Unzip the downloaded Runtime to be used.\nStep 3: Navigate to the Runtimes section:\n\n\n\n\n\n\n\n\n\nStep 4: Press the “+” button (bottom right)\nStep 5: Enter the version number with three digits (e.g. 9.9.0):\n\n\n\n\n\n\n\n\n\nStep 6: Select the file main.*.js from the ZIP archive containing the runtime environment. Note that the * corresponds to the hash of the file (i.e. the full file name looks like main.19479ac3.js)\nStep 7: Select the file main.*.css from the ZIP archive containing the runtime. Note that the * corresponds to the hash of the file (i.e. the full file name looks like main.b765ceca.css)\n\n\nNote: The Description field and the two additional Map files (for JavaScript Source and for CSS Source) are optional.\n\n\nStep 8: Press the Save button to finalise the import of the Runtime:\n\n\n\n\n\n\n\n\nAfter the import, the supported CBA ItemBuilder versions are listed in the Runtime section. To delete a Runtime for a specific version, click on the Trash icon at the bottom right of the “Map” and confirm with Delete."
  }
]