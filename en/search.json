[
  {
    "objectID": "download.html",
    "href": "download.html",
    "title": "Download & Installation",
    "section": "",
    "text": "The IRTlib software is provided for offline use (currently for Windows operating systems) and for online use (in the form of Docker containers).\n\n\nThe IRTlib software (IRTlib Editor and IRTlib Player) for offline use can be obtained and downloaded from the [Releases] section of the repository https://github.com/DIPFtba/IRTlibDeploymentSoftware. Two ZIP archives are available for download in the Releases section.\nTestApp.Editor.Desktop.exe: Is in TestApp.Editor.Desktop.zip and must be started to use the IRTlib Editor.\nTestApp.Player.Desktop.exe: Is included in TestApp.Player.Desktop.zip and must be started to use the IRTlib Player.\n\n\n\n\n\n\nNote: Versions from the current development as Preview.\n\n\n\n\n\nNote that the latest build can be found in the Preview section of the Release section of the repository. Preview versions are the latest version of the software, after the last published version of the IRTlib Software. To obtain reproducible results, published versions should always be used.\n\n\n\n\n\n\n\n\n\nNote: Warning message at programme start\n\n\n\n\n\nThe automatically created preview versions of the IRTlib Editor and IRTlib Player are not signed. A warning message from the operating system must be accepted before the programmes can be executed. Depending on the configuration of the operating system, the executable files of the IRTlib software can also be classified as unknown and additionally warned against their use.\n\n\n\n\n\nThe IRTlib Editor for offline use is provided as a ZIP archive (e.g. TestApp.Editor.Desktop.zip), which must be unpacked. After unpacking the editor, the application TestApp.Editor.Desktop.exe can be started on a Windows device.\nThe sections Preparation &gt; Overview, Preparation &gt; Studies and Preparation &gt; Survey parts document how to prepare and configure data surveys with the help of CBA ItemBuilder items.\n\n\n\nThe IRTlib Player is also available as a Windows application for offline use and is provided as a ZIP archive (e.g. TestApp.Player.Desktop.zip). After unpacking the IRTlib Player, a published study configuration is required that is to be used for data collection.\nAfter adding the contents of a published study provided as study configuration, the executable file TestApp.Player.Desktop.exe can be started (either with or without start parameters).\n\nKiosk Mode: The IRTlib Player can be used directly for data collection via the executable file TestApp.Player.Desktop.exe on the computer on which it is running locally. The Study can be configured so that it is displayed in a Kiosk Mode on one screen and can only be terminated via the Task Manager or the Test Manager Menu (see Full Screen Mode in the section Configuration for display).\nLocal Server: The IRTlib Player can also be run as a local server. After starting the programme TestApp.Player.Server.exe, a configured Study can also be delivered via Webbrowser or other browsers with Kiosk Mode (e.g. the Safe Exam Browser). With this configuration, data can be collected, for example, in schools without an internet connection but with a notebook acting as a bring-in server.\n\nThe sections Data collection &gt; Overview, Data collection &gt; Publish & export and Data collection &gt; Integration & delivery document how data collection can be carried out using the IRTlib Player in the various constellations.\n\n\n\n\nThe IRTlib software (IRTlib Editor and IRTlib Player) for online use can be obtained as a Docker container. An example can be found at https://github.com/DIPFtba/IRTlibDeploymentSoftware.\nTo use the Docker container, it is recommended to clone the repository on the target device and execute the command ./start.sh in the docker folder (requires installed docker and docker compose) to start the software.\nIf nothing is changed in the docker-compose.yml file, the editor is accessible via port 8002 and the player software via port 8001.\nThe section Data collection &gt; Integration & delivery contains further information on using the Docker containers."
  },
  {
    "objectID": "download.html#offline-windows-2",
    "href": "download.html#offline-windows-2",
    "title": "Download & Installation",
    "section": "",
    "text": "The IRTlib software (IRTlib Editor and IRTlib Player) for offline use can be obtained and downloaded from the [Releases] section of the repository https://github.com/DIPFtba/IRTlibDeploymentSoftware. Two ZIP archives are available for download in the Releases section.\nTestApp.Editor.Desktop.exe: Is in TestApp.Editor.Desktop.zip and must be started to use the IRTlib Editor.\nTestApp.Player.Desktop.exe: Is included in TestApp.Player.Desktop.zip and must be started to use the IRTlib Player.\n\n\n\n\n\n\nNote: Versions from the current development as Preview.\n\n\n\n\n\nNote that the latest build can be found in the Preview section of the Release section of the repository. Preview versions are the latest version of the software, after the last published version of the IRTlib Software. To obtain reproducible results, published versions should always be used.\n\n\n\n\n\n\n\n\n\nNote: Warning message at programme start\n\n\n\n\n\nThe automatically created preview versions of the IRTlib Editor and IRTlib Player are not signed. A warning message from the operating system must be accepted before the programmes can be executed. Depending on the configuration of the operating system, the executable files of the IRTlib software can also be classified as unknown and additionally warned against their use.\n\n\n\n\n\nThe IRTlib Editor for offline use is provided as a ZIP archive (e.g. TestApp.Editor.Desktop.zip), which must be unpacked. After unpacking the editor, the application TestApp.Editor.Desktop.exe can be started on a Windows device.\nThe sections Preparation &gt; Overview, Preparation &gt; Studies and Preparation &gt; Survey parts document how to prepare and configure data surveys with the help of CBA ItemBuilder items.\n\n\n\nThe IRTlib Player is also available as a Windows application for offline use and is provided as a ZIP archive (e.g. TestApp.Player.Desktop.zip). After unpacking the IRTlib Player, a published study configuration is required that is to be used for data collection.\nAfter adding the contents of a published study provided as study configuration, the executable file TestApp.Player.Desktop.exe can be started (either with or without start parameters).\n\nKiosk Mode: The IRTlib Player can be used directly for data collection via the executable file TestApp.Player.Desktop.exe on the computer on which it is running locally. The Study can be configured so that it is displayed in a Kiosk Mode on one screen and can only be terminated via the Task Manager or the Test Manager Menu (see Full Screen Mode in the section Configuration for display).\nLocal Server: The IRTlib Player can also be run as a local server. After starting the programme TestApp.Player.Server.exe, a configured Study can also be delivered via Webbrowser or other browsers with Kiosk Mode (e.g. the Safe Exam Browser). With this configuration, data can be collected, for example, in schools without an internet connection but with a notebook acting as a bring-in server.\n\nThe sections Data collection &gt; Overview, Data collection &gt; Publish & export and Data collection &gt; Integration & delivery document how data collection can be carried out using the IRTlib Player in the various constellations."
  },
  {
    "objectID": "download.html#online-docker-2",
    "href": "download.html#online-docker-2",
    "title": "Download & Installation",
    "section": "",
    "text": "The IRTlib software (IRTlib Editor and IRTlib Player) for online use can be obtained as a Docker container. An example can be found at https://github.com/DIPFtba/IRTlibDeploymentSoftware.\nTo use the Docker container, it is recommended to clone the repository on the target device and execute the command ./start.sh in the docker folder (requires installed docker and docker compose) to start the software.\nIf nothing is changed in the docker-compose.yml file, the editor is accessible via port 8002 and the player software via port 8001.\nThe section Data collection &gt; Integration & delivery contains further information on using the Docker containers."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Über / About",
    "section": "",
    "text": "Contributors to this manual were:\n\nMaximilian Sattler\nCarla Burkart\n\n\n\n\n\n\n\nIn development\n\n\n\n\nRevision, language correction and translation of the manual are currently in progress…\n\n\n\n\n\n\nThe development of the IRTlib Software takes place at Software-Driven."
  },
  {
    "objectID": "about.html#acknowledgements",
    "href": "about.html#acknowledgements",
    "title": "Über / About",
    "section": "",
    "text": "Contributors to this manual were:\n\nMaximilian Sattler\nCarla Burkart\n\n\n\n\n\n\n\nIn development\n\n\n\n\nRevision, language correction and translation of the manual are currently in progress…"
  },
  {
    "objectID": "about.html#development",
    "href": "about.html#development",
    "title": "Über / About",
    "section": "",
    "text": "The development of the IRTlib Software takes place at Software-Driven."
  },
  {
    "objectID": "development.html",
    "href": "development.html",
    "title": "Development",
    "section": "",
    "text": "Editor for defining Codebooks\nEditor for managing IRT Parameters for ItemPools\nIRT-Integration in Blockly for MST/CAT/MCAT/…\nWebservice Integration required for NLP/Scoring/AI"
  },
  {
    "objectID": "development.html#missing-features-in-version-1.1",
    "href": "development.html#missing-features-in-version-1.1",
    "title": "Development",
    "section": "",
    "text": "Editor for defining Codebooks\nEditor for managing IRT Parameters for ItemPools\nIRT-Integration in Blockly for MST/CAT/MCAT/…\nWebservice Integration required for NLP/Scoring/AI"
  },
  {
    "objectID": "github.html",
    "href": "github.html",
    "title": "Github Repositorien / Github Repositories",
    "section": "",
    "text": "The IRTlib Software is free research software in the sense of Open Science. It can be used for non-commercial applications.\nSuggested Citation:\n\nKroehne, U. (2023). IRTlib Documentation: Software for the administration and delivery of computer-based assessments [IRTlib Dokumentation: Software für die Verwaltung und Auslieferung computergestützter Assessments]. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10441352\n\n\n\n\n\n\n\nNote\n\n\n\nTranslation: If you want to help us translate this software, you can find more information here.\n\n\n\n\n\nCurrent versions of the IRTlib software (Windows and Docker): GitHub\nDocumentation: GitHub\n\n\n\n\n\nThe IRTlib software allows the administration of assessment content created with the CBA ItemBuilder.\n\n\n\nCurrent versions of the CBA ItemBuilder (Windows): https://www.itembuilder.de/software\n\n\n\n\nSource code and material for the CBA ItemBuilder are divided into several repositories:\n\nCBA ItemBuilder (desktop application): GitHub (In preparation / still private)\nRuntime environment: GitHub (In preparation / still private)\nExecution environment for developers: GitHub (In preparation / still private)\nTechnical documentation: GitHub (In preparation / still private)\nTechnical example items: GitHub(In preparation / still private)\n\n\n\n\nOnline documentation\n\nHTML (interactive): https://cba.itembuilder.de\n\nPDF (static): Open-Assessments-with-CBA-ItemBuilder.pdf\nSources GitHub (In preparation / still private)\n\nSuggested Citation:\n\nKroehne, U. (2023). Open Computer-based Assessment with the CBA ItemBuilder. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10359757"
  },
  {
    "objectID": "github.html#irtlib-software-2",
    "href": "github.html#irtlib-software-2",
    "title": "Github Repositorien / Github Repositories",
    "section": "",
    "text": "The IRTlib Software is free research software in the sense of Open Science. It can be used for non-commercial applications.\nSuggested Citation:\n\nKroehne, U. (2023). IRTlib Documentation: Software for the administration and delivery of computer-based assessments [IRTlib Dokumentation: Software für die Verwaltung und Auslieferung computergestützter Assessments]. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10441352\n\n\n\n\n\n\n\nNote\n\n\n\nTranslation: If you want to help us translate this software, you can find more information here.\n\n\n\n\n\nCurrent versions of the IRTlib software (Windows and Docker): GitHub\nDocumentation: GitHub"
  },
  {
    "objectID": "github.html#cba-itembuilder-2",
    "href": "github.html#cba-itembuilder-2",
    "title": "Github Repositorien / Github Repositories",
    "section": "",
    "text": "The IRTlib software allows the administration of assessment content created with the CBA ItemBuilder.\n\n\n\nCurrent versions of the CBA ItemBuilder (Windows): https://www.itembuilder.de/software\n\n\n\n\nSource code and material for the CBA ItemBuilder are divided into several repositories:\n\nCBA ItemBuilder (desktop application): GitHub (In preparation / still private)\nRuntime environment: GitHub (In preparation / still private)\nExecution environment for developers: GitHub (In preparation / still private)\nTechnical documentation: GitHub (In preparation / still private)\nTechnical example items: GitHub(In preparation / still private)\n\n\n\n\nOnline documentation\n\nHTML (interactive): https://cba.itembuilder.de\n\nPDF (static): Open-Assessments-with-CBA-ItemBuilder.pdf\nSources GitHub (In preparation / still private)\n\nSuggested Citation:\n\nKroehne, U. (2023). Open Computer-based Assessment with the CBA ItemBuilder. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10359757"
  },
  {
    "objectID": "data-collection-player-integration.html",
    "href": "data-collection-player-integration.html",
    "title": "Datenerhebung: In IRTlib Player Importieren / Data Collection: Import into IRTlib Player",
    "section": "",
    "text": "The following describes how to use a study configuration created with an IRTlib Editor that is available as a ZIP archive.\n\n\n\n\n\n\nPublished version required\n\n\n\nA published version of a Study is required for data collection with an IRTlib Player.\n\n\nIf a sealed study configuration has been exported from the IRTlib Editor, it can be integrated into an IRTlib Player.\nTwo options are currently supported:\n\nAutomatic import from ZIP archive\nManual import from ZIP archive\n\nThe automatic import is only possible for the first Study in an IRTlib Player. If several Studies are to be used in parallel in an IRTlib Player, a manual import must be configured.\n\n\nFor an automatic import of a Study available as a ZIP archive in an offline IRTlib Player, the player can first be started via the executable file TestApp.Player.Desktop.exe.\nIf this IRTlib Player has not yet been configured with a Study (i.e. the player has been downloaded directly from the Github repository as described under Download, for example), the following dialogue appears:\n\nThe ZIP archive can be opened directly by clicking the Deploy Study button. It is then automatically inserted into the IRTlib Player and can be used in the way configured in the Login section of the Study.\n\n\n\nIf no automatic import is possible or desired, the contents of the ZIP archive of a Study can also be integrated manually into the directory of the IRTlib Player provided for this purpose.\nEach ZIP archive with a study configuration exported from the IRTlib Editor contains three directories. The ZIP archives {StudyName.zip} can be opened with the Windows Explorer, for example:\n\nTo integrate the Study into an IRTlib Player, the contents of these three directories can now be integrated into the programme directory of an offline IRTlib Player, for example.\n\n\n\n\n\n\n\nStep\nDescription\n\n\n\n\n1.\nUnzip the player (TestApp.Player.zip). This can be done using Windows Explorer, for example:\n\n\n\n\n\n\n2.\nNavigate to the unzipped directory:\n\n\n\n\n\n\n3.\nCreate a new folder Content within the player folder (i.e. TestApp.Player/Content/). If a Study is already configured, then the Content folder already exists.\n\n\n\n\n\n\n4.\nCopy the three folders ItemPool, Runtime and Studies from the downloaded study {StudyName.zip} into the Content folder of the player.\n\n\n\n\n\n\n5.\nStart the file TestApp.Player.Desktop.exe\n\n\n6.\nIf necessary, accept the following warning:\n\n\n\n\n\n\n\nThe import of studies into an online IRTlib Player is analogous to the procedure described here. For this, access to the volume /app/Content defined in the docker-compse.yml file is required for preparation.\n\n\n\n\nThe study configurations created with an IRTlib Editor can be used with different variants of the IRTlib Player.\nThree versions are currently available:\n\nDesktop version (Windows)\nLocal server version (Windows)\nOnline version (Docker)\n\n\n\nBasic configurations of the IRTlib Player (display in windowed mode vs. full screen mode) are part of the study configuration. Only studies with the same display settings can be used simultaneously in an offline IRTlib Player. Multiple copies of an offline IRTlib Player on one computer are possible.\nTo start the (offline) IRTlib Player on a computer, the executable file TestApp.Player.Desktop.exe must be started.\nData Storage: The data collected during a data collection with the offline IRTlib Player is stored locally in a directory. The directory and the file name for the raw data storage are configured in the Study and can be customised using startup parameters. The user name or the UUID created is used as the file name of the raw data archive. If the user name is used more than once in an (offline) IRTlib Player, i.e. if a raw data archive with this file name already exists when the IRTlib Player is closed, it is not overwritten but a suffix is added (e.g. PersonIdentifier_1.zip).\nStartup Parameter: The integration of the offline IRTlib Player into programmed processes is possible. Login data (user name, user name + password, token) that are configured in a Study can be transferred as so-called startup parameters. These parameters are then appended to the call of TestApp.Player.Desktop.exe.\nExample:\n\nTestApp.Player.Desktop.exe /RawDataFolder=\"..\\\\myDataFolder\"\n\nValid startup parameters are:\n\n/AutoLoginCreateWithTest=\"{StudyName}\": Requests the administration of the study named {StudyName}.\n/AutoLoginUserName=\"{PersonIdentifier}\": Passes the login information {PersonIdentifier} as the user name.\n/MyBlocklyVariable=\"123\": Passes the value 123 for the Blockly variable MyBlocklyVariable.\n/MonitoringFile=\"..\\\\last-run.json\": Path and file name of the so-called monitoring file.\n/RawDataFolder=\"..\\\\myDataFolder\": Path to the directory in which the raw data archives are saved.\n/volume=\"0.5\": Value to be used to set the system volume (between 0 and 1).\n/minvolume=\"0.2\": Value to be used as the lower volume threshold (between 0 and 1).\n/maxvolume=\"0.8\": Value to be used as the upper volume threshold (between 0 and 1).\n\nSeveral startup parameters in succession are possible (separated by spaces).\nTechnical configurations that are not to be transferred via startup parameters can also be defined via the file appsettings.json, which is contained in the directory TestApp.Player.\nFor example, the volume configurations can be made in the Chromely section:\n{\n  ...\n  \"Chromely\": {\n    ...\n    \"Audio\": {\n      \"MinVolume\": 0,\n      \"MaxVolume\": 1,\n      \"StartVolume\": 0.5\n    }\n  }\n}\nChecking Prerequisites: The IRTlib Player should be able to run on Windows computers (currently supported from Windows 10) without further installation or runtime requirements. However, special configurations, virus scanners etc. may prevent it from running. A tool for checking prerequisites can be created, for example, based on this example (IRTlibReadiness).\n\n\n\n\n\n\nImportant note\n\n\n\nThe provided Windows version of the IRTlib Player enables a simple kiosk mode, which is only intended for computers with only one screen (e.g. notebooks). For an exam-safe kiosk solution, the offline version of the IRTlib Player can be combined as a local server with additional software (such as the Safe Exam Browser).\n\n\n\n\n\nThe ZIP archives of the offline IRTlib Player available via the Github repository in the Releases section also contain a local server version parallel to the application with integrated browser (TestApp.Player.Desktop.exe), which can be started via the executable file TestApp.Player.Server.exe.\n\n\n\n\n\n\n\nImportant note\n\n\n\nThe version TestApp.Player.Server.exe is intended for offline operation in bring-in networks, e.g., when WLAN routers and server notebooks are brought into schools. This version is not intended for online use (for which the Docker version is provided).\n\n\n\n\n\n\nIntegration: To carry out data collection, the Docker image of the IRTlib Player should only be accessible via https-secured connections. This can be realised, for example, using an additional nginx configured as a reverse proxy.\nAccess to Editor: Unauthorised persons who are not involved in study preparation must not be able to access the IRTlib Editor. The Github repository provides IRTlib Editor and IRTlib Player. For operational data collection, it is not necessary to run the IRTlib Editor online, as the study preparation can also be created with the offline version of the IRTlib Editor. If the IRTlib Editor is hosted online, it must be protected against unauthorised access.\nAccess to directories: The item contents that are configured for an assessment are stored in the volumes /app/Content (IRTlib Player) and /app/data (IRTlib Editor) defined in the docker-compse.yml file. To ensure the protection of instruments, unauthorised persons must not be able to access these volumes.\nData storage: The data collected during a data collection with the online IRTlib Player is stored in the volume app/result. They can be retrieved from there as directories (one directory per session) or as raw data archives via an API (if an API key is defined).\n\n\n\n\n\n\nNote\n\n\n\nWhen using Docker containers, assessment content and data can be accessed online. Assessment content is only protected via the login mode defined in the study configuration. Personal data and assessment content may also be accessible if an API key is defined.\n\n\nConfiguration of the player: The file appsettings.json, which is contained in the TestApp.Player directory, is central to the technical configuration of the player. Three different API keys (i.e. access keys) can be stored in this file by storing them in the following JSON structure before the Docker container is started:\n\"API\": {\n   \"ExternalExportKey\": \"\",\n   \"DevelopmentKey\": \"\",\n   \"LoginManagementKeys\": []\n }\nThe API keys have the following functions:\n\nExternalExportKey: This key is used to gain access to the data collected with the IRTlib Player. The data can be accessed via the R package LogFSM, for example, as described in the section Data retrieval.\n\n\n\n\n\n\n\nRoutes for direct access\n\n\n\n\n\nThe list of the processed session, i.e. the session identifiers, can be retrieved as JSON with an API key for ExternalExportKey via the following call:\nhttps://{U}/{S}/api/session/?apiKey={K}\n\n{U} is the URL of the IRTlib Player\n{S} is the identifier of the study\n{K} is the ExternalExportKey as defined in the appsettings.json\n\nWith a known Session-Identifier the raw data can then be retrieved via the following call with an API-Key for ExternalExportKey:\nhttps://{U}/{S}/api/session/{ID}/result?apiKey={K}\n\n{ID} is the Session-Identifier (e.g. the user name, depending on the configuration of the login)\n\n\n\n\n\nDevelopmentKey: This API-Key is intended for customising study configurations in a running player.\n\n\n\n\n\n\n\nUnder Development\n\n\n\nThis function is currently under development.\n\n\n\nLoginManagementKeys: This list of API-Keys is intended for customising login data (accounts) in a running player.\n\n\n\n\n\n\n\nUnder Development\n\n\n\nThis function is currently under development.\n\n\nMonitoring: (A method for monitoring Docker containers is under development).\n\n\n\n\nWith the integration of a study configuration into an IRTlib Player, the preparation is not yet complete. Before data collection can be started with the IRTlib software, the following tests should be conducted:\n(Tests within the CBA ItemBuilder-Preview): Before configuring a study and a survey section with CBA ItemBuilder-tasks, it should already have been tested in terms of presentation, functionality and scoring in the Preview of the CBA ItemBuilder.\nFunctional tests: Especially if CBA ItemBuilder-tasks interact with the delivery platform (such as login items), functional tests (i.e. tests of specific functions) should be carried out in the delivery software. This also applies to navigation between items and, of course, the flow control configured in the delivery environment.\nCross-browser testing: If studies are not conducted with the offline IRTlib Player (which comes with its own browser) and especially if newly or specifically programmed JavaScript/HTML5 content is used within the CBA ItemBuilder-Tasks via so-called *ExternalPageFrames (i.e. iframes), testing should be carried out in different browsers.\nPerformance tests: If large media files (videos, audio files) are included in the CBA ItemBuilder-Tasks, it may be advisable to test the feasibility of the assessment even under unfavourable network conditions (e.g. low bandwidth, long latencies, connection drops, etc.).\nLoad tests: If a large number of test participants are to be tested in parallel (online), it may be advisable to coordinate the load behaviour of the delivery (and, for example, the resources available for the Docker container) in advance.\nData storage check: In any case, the fit of the scoring definition within the CBA ItemBuilder-Tasks and the configuration in the IRTlib Editor should be checked and a data storage check made. This means that synthetic click patterns (i.e. responses) are entered before the start of the survey and compared with the responses stored in the data set. In order to be able to easily recognise input errors during the subsequent check, it has proven useful to record screen videos in parallel for the data storage check.\nSmoke test: The final form of testing is a run-through test in the fully configured setting from Study in an IRTlib Player. The survey should be displayed correctly and a readable raw data archive should be created.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe provision of the free research software IRTlib Editor and IRTlib Player is without guarantee and no liability can be accepted for missing data, data loss or compromised data etc.\n\n\nGenerally valid recommendations for (absolutely) necessary tests are difficult to formulate, the following table is therefore to be understood as a non-binding recommendation, which must be weighed up in each specific case.\n\n\n\n\n\n\n\n\nTest\nRecommendation\nCondition\n\n\n\n\nCBA ItemBuilder-Preview\nAlways\n(Errors in presentation, behaviour and scoring that can already be found during item creation should be systematically tested and excluded before creating a study configuration).\n\n\nFunctional tests\nIf required\nOnly if IRTlib Player and CBA ItemBuilder-Tasks have to interact and in relation to functionality defined in the IRTlib Editor (e.g. response-dependent branching).\n\n\nCross-browser testing\nIf required\nOnly if IRTlib Player is used online and the browsers do not correspond to the browsers already used for the CBA ItemBuilder-Preview.\n\n\nPerformance tests\nIf required\nIf large multimedia parts are included or if a poor network connection is to be expected.\n\n\nLoad tests\nIf required\nOnly if online IRTlib Player is to be administered with many parallel tests.\n\n\nData storage check\nAlways\nCheck all data (incl. log data if this is required for evaluation).\n\n\nSmoke test\nAlways\nSmoke test for every version, especially to rule out accidental configuration errors at the last minute.\n\n\n\n\n\n\nOnce the Study has been configured and tested in an IRTlib Player, data can be collected. The longer the field time, the more important it is to regularly back up the collected data or to regularly remove the collected raw data archives from the survey hardware."
  },
  {
    "objectID": "data-collection-player-integration.html#import-configuration",
    "href": "data-collection-player-integration.html#import-configuration",
    "title": "Datenerhebung: In IRTlib Player Importieren / Data Collection: Import into IRTlib Player",
    "section": "",
    "text": "The following describes how to use a study configuration created with an IRTlib Editor that is available as a ZIP archive.\n\n\n\n\n\n\nPublished version required\n\n\n\nA published version of a Study is required for data collection with an IRTlib Player.\n\n\nIf a sealed study configuration has been exported from the IRTlib Editor, it can be integrated into an IRTlib Player.\nTwo options are currently supported:\n\nAutomatic import from ZIP archive\nManual import from ZIP archive\n\nThe automatic import is only possible for the first Study in an IRTlib Player. If several Studies are to be used in parallel in an IRTlib Player, a manual import must be configured.\n\n\nFor an automatic import of a Study available as a ZIP archive in an offline IRTlib Player, the player can first be started via the executable file TestApp.Player.Desktop.exe.\nIf this IRTlib Player has not yet been configured with a Study (i.e. the player has been downloaded directly from the Github repository as described under Download, for example), the following dialogue appears:\n\nThe ZIP archive can be opened directly by clicking the Deploy Study button. It is then automatically inserted into the IRTlib Player and can be used in the way configured in the Login section of the Study.\n\n\n\nIf no automatic import is possible or desired, the contents of the ZIP archive of a Study can also be integrated manually into the directory of the IRTlib Player provided for this purpose.\nEach ZIP archive with a study configuration exported from the IRTlib Editor contains three directories. The ZIP archives {StudyName.zip} can be opened with the Windows Explorer, for example:\n\nTo integrate the Study into an IRTlib Player, the contents of these three directories can now be integrated into the programme directory of an offline IRTlib Player, for example.\n\n\n\n\n\n\n\nStep\nDescription\n\n\n\n\n1.\nUnzip the player (TestApp.Player.zip). This can be done using Windows Explorer, for example:\n\n\n\n\n\n\n2.\nNavigate to the unzipped directory:\n\n\n\n\n\n\n3.\nCreate a new folder Content within the player folder (i.e. TestApp.Player/Content/). If a Study is already configured, then the Content folder already exists.\n\n\n\n\n\n\n4.\nCopy the three folders ItemPool, Runtime and Studies from the downloaded study {StudyName.zip} into the Content folder of the player.\n\n\n\n\n\n\n5.\nStart the file TestApp.Player.Desktop.exe\n\n\n6.\nIf necessary, accept the following warning:\n\n\n\n\n\n\n\nThe import of studies into an online IRTlib Player is analogous to the procedure described here. For this, access to the volume /app/Content defined in the docker-compse.yml file is required for preparation."
  },
  {
    "objectID": "data-collection-player-integration.html#configure-deliveries",
    "href": "data-collection-player-integration.html#configure-deliveries",
    "title": "Datenerhebung: In IRTlib Player Importieren / Data Collection: Import into IRTlib Player",
    "section": "",
    "text": "The study configurations created with an IRTlib Editor can be used with different variants of the IRTlib Player.\nThree versions are currently available:\n\nDesktop version (Windows)\nLocal server version (Windows)\nOnline version (Docker)\n\n\n\nBasic configurations of the IRTlib Player (display in windowed mode vs. full screen mode) are part of the study configuration. Only studies with the same display settings can be used simultaneously in an offline IRTlib Player. Multiple copies of an offline IRTlib Player on one computer are possible.\nTo start the (offline) IRTlib Player on a computer, the executable file TestApp.Player.Desktop.exe must be started.\nData Storage: The data collected during a data collection with the offline IRTlib Player is stored locally in a directory. The directory and the file name for the raw data storage are configured in the Study and can be customised using startup parameters. The user name or the UUID created is used as the file name of the raw data archive. If the user name is used more than once in an (offline) IRTlib Player, i.e. if a raw data archive with this file name already exists when the IRTlib Player is closed, it is not overwritten but a suffix is added (e.g. PersonIdentifier_1.zip).\nStartup Parameter: The integration of the offline IRTlib Player into programmed processes is possible. Login data (user name, user name + password, token) that are configured in a Study can be transferred as so-called startup parameters. These parameters are then appended to the call of TestApp.Player.Desktop.exe.\nExample:\n\nTestApp.Player.Desktop.exe /RawDataFolder=\"..\\\\myDataFolder\"\n\nValid startup parameters are:\n\n/AutoLoginCreateWithTest=\"{StudyName}\": Requests the administration of the study named {StudyName}.\n/AutoLoginUserName=\"{PersonIdentifier}\": Passes the login information {PersonIdentifier} as the user name.\n/MyBlocklyVariable=\"123\": Passes the value 123 for the Blockly variable MyBlocklyVariable.\n/MonitoringFile=\"..\\\\last-run.json\": Path and file name of the so-called monitoring file.\n/RawDataFolder=\"..\\\\myDataFolder\": Path to the directory in which the raw data archives are saved.\n/volume=\"0.5\": Value to be used to set the system volume (between 0 and 1).\n/minvolume=\"0.2\": Value to be used as the lower volume threshold (between 0 and 1).\n/maxvolume=\"0.8\": Value to be used as the upper volume threshold (between 0 and 1).\n\nSeveral startup parameters in succession are possible (separated by spaces).\nTechnical configurations that are not to be transferred via startup parameters can also be defined via the file appsettings.json, which is contained in the directory TestApp.Player.\nFor example, the volume configurations can be made in the Chromely section:\n{\n  ...\n  \"Chromely\": {\n    ...\n    \"Audio\": {\n      \"MinVolume\": 0,\n      \"MaxVolume\": 1,\n      \"StartVolume\": 0.5\n    }\n  }\n}\nChecking Prerequisites: The IRTlib Player should be able to run on Windows computers (currently supported from Windows 10) without further installation or runtime requirements. However, special configurations, virus scanners etc. may prevent it from running. A tool for checking prerequisites can be created, for example, based on this example (IRTlibReadiness).\n\n\n\n\n\n\nImportant note\n\n\n\nThe provided Windows version of the IRTlib Player enables a simple kiosk mode, which is only intended for computers with only one screen (e.g. notebooks). For an exam-safe kiosk solution, the offline version of the IRTlib Player can be combined as a local server with additional software (such as the Safe Exam Browser).\n\n\n\n\n\nThe ZIP archives of the offline IRTlib Player available via the Github repository in the Releases section also contain a local server version parallel to the application with integrated browser (TestApp.Player.Desktop.exe), which can be started via the executable file TestApp.Player.Server.exe.\n\n\n\n\n\n\n\nImportant note\n\n\n\nThe version TestApp.Player.Server.exe is intended for offline operation in bring-in networks, e.g., when WLAN routers and server notebooks are brought into schools. This version is not intended for online use (for which the Docker version is provided).\n\n\n\n\n\n\nIntegration: To carry out data collection, the Docker image of the IRTlib Player should only be accessible via https-secured connections. This can be realised, for example, using an additional nginx configured as a reverse proxy.\nAccess to Editor: Unauthorised persons who are not involved in study preparation must not be able to access the IRTlib Editor. The Github repository provides IRTlib Editor and IRTlib Player. For operational data collection, it is not necessary to run the IRTlib Editor online, as the study preparation can also be created with the offline version of the IRTlib Editor. If the IRTlib Editor is hosted online, it must be protected against unauthorised access.\nAccess to directories: The item contents that are configured for an assessment are stored in the volumes /app/Content (IRTlib Player) and /app/data (IRTlib Editor) defined in the docker-compse.yml file. To ensure the protection of instruments, unauthorised persons must not be able to access these volumes.\nData storage: The data collected during a data collection with the online IRTlib Player is stored in the volume app/result. They can be retrieved from there as directories (one directory per session) or as raw data archives via an API (if an API key is defined).\n\n\n\n\n\n\nNote\n\n\n\nWhen using Docker containers, assessment content and data can be accessed online. Assessment content is only protected via the login mode defined in the study configuration. Personal data and assessment content may also be accessible if an API key is defined.\n\n\nConfiguration of the player: The file appsettings.json, which is contained in the TestApp.Player directory, is central to the technical configuration of the player. Three different API keys (i.e. access keys) can be stored in this file by storing them in the following JSON structure before the Docker container is started:\n\"API\": {\n   \"ExternalExportKey\": \"\",\n   \"DevelopmentKey\": \"\",\n   \"LoginManagementKeys\": []\n }\nThe API keys have the following functions:\n\nExternalExportKey: This key is used to gain access to the data collected with the IRTlib Player. The data can be accessed via the R package LogFSM, for example, as described in the section Data retrieval.\n\n\n\n\n\n\n\nRoutes for direct access\n\n\n\n\n\nThe list of the processed session, i.e. the session identifiers, can be retrieved as JSON with an API key for ExternalExportKey via the following call:\nhttps://{U}/{S}/api/session/?apiKey={K}\n\n{U} is the URL of the IRTlib Player\n{S} is the identifier of the study\n{K} is the ExternalExportKey as defined in the appsettings.json\n\nWith a known Session-Identifier the raw data can then be retrieved via the following call with an API-Key for ExternalExportKey:\nhttps://{U}/{S}/api/session/{ID}/result?apiKey={K}\n\n{ID} is the Session-Identifier (e.g. the user name, depending on the configuration of the login)\n\n\n\n\n\nDevelopmentKey: This API-Key is intended for customising study configurations in a running player.\n\n\n\n\n\n\n\nUnder Development\n\n\n\nThis function is currently under development.\n\n\n\nLoginManagementKeys: This list of API-Keys is intended for customising login data (accounts) in a running player.\n\n\n\n\n\n\n\nUnder Development\n\n\n\nThis function is currently under development.\n\n\nMonitoring: (A method for monitoring Docker containers is under development)."
  },
  {
    "objectID": "data-collection-player-integration.html#testing-and-releasing-deliveries",
    "href": "data-collection-player-integration.html#testing-and-releasing-deliveries",
    "title": "Datenerhebung: In IRTlib Player Importieren / Data Collection: Import into IRTlib Player",
    "section": "",
    "text": "With the integration of a study configuration into an IRTlib Player, the preparation is not yet complete. Before data collection can be started with the IRTlib software, the following tests should be conducted:\n(Tests within the CBA ItemBuilder-Preview): Before configuring a study and a survey section with CBA ItemBuilder-tasks, it should already have been tested in terms of presentation, functionality and scoring in the Preview of the CBA ItemBuilder.\nFunctional tests: Especially if CBA ItemBuilder-tasks interact with the delivery platform (such as login items), functional tests (i.e. tests of specific functions) should be carried out in the delivery software. This also applies to navigation between items and, of course, the flow control configured in the delivery environment.\nCross-browser testing: If studies are not conducted with the offline IRTlib Player (which comes with its own browser) and especially if newly or specifically programmed JavaScript/HTML5 content is used within the CBA ItemBuilder-Tasks via so-called *ExternalPageFrames (i.e. iframes), testing should be carried out in different browsers.\nPerformance tests: If large media files (videos, audio files) are included in the CBA ItemBuilder-Tasks, it may be advisable to test the feasibility of the assessment even under unfavourable network conditions (e.g. low bandwidth, long latencies, connection drops, etc.).\nLoad tests: If a large number of test participants are to be tested in parallel (online), it may be advisable to coordinate the load behaviour of the delivery (and, for example, the resources available for the Docker container) in advance.\nData storage check: In any case, the fit of the scoring definition within the CBA ItemBuilder-Tasks and the configuration in the IRTlib Editor should be checked and a data storage check made. This means that synthetic click patterns (i.e. responses) are entered before the start of the survey and compared with the responses stored in the data set. In order to be able to easily recognise input errors during the subsequent check, it has proven useful to record screen videos in parallel for the data storage check.\nSmoke test: The final form of testing is a run-through test in the fully configured setting from Study in an IRTlib Player. The survey should be displayed correctly and a readable raw data archive should be created.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe provision of the free research software IRTlib Editor and IRTlib Player is without guarantee and no liability can be accepted for missing data, data loss or compromised data etc.\n\n\nGenerally valid recommendations for (absolutely) necessary tests are difficult to formulate, the following table is therefore to be understood as a non-binding recommendation, which must be weighed up in each specific case.\n\n\n\n\n\n\n\n\nTest\nRecommendation\nCondition\n\n\n\n\nCBA ItemBuilder-Preview\nAlways\n(Errors in presentation, behaviour and scoring that can already be found during item creation should be systematically tested and excluded before creating a study configuration).\n\n\nFunctional tests\nIf required\nOnly if IRTlib Player and CBA ItemBuilder-Tasks have to interact and in relation to functionality defined in the IRTlib Editor (e.g. response-dependent branching).\n\n\nCross-browser testing\nIf required\nOnly if IRTlib Player is used online and the browsers do not correspond to the browsers already used for the CBA ItemBuilder-Preview.\n\n\nPerformance tests\nIf required\nIf large multimedia parts are included or if a poor network connection is to be expected.\n\n\nLoad tests\nIf required\nOnly if online IRTlib Player is to be administered with many parallel tests.\n\n\nData storage check\nAlways\nCheck all data (incl. log data if this is required for evaluation).\n\n\nSmoke test\nAlways\nSmoke test for every version, especially to rule out accidental configuration errors at the last minute.\n\n\n\n\n\n\nOnce the Study has been configured and tested in an IRTlib Player, data can be collected. The longer the field time, the more important it is to regularly back up the collected data or to regularly remove the collected raw data archives from the survey hardware."
  },
  {
    "objectID": "data-collection-post-processing.html",
    "href": "data-collection-post-processing.html",
    "title": "Datenerhebung: Datenaufbereitung / Data Collection: Data Post-Processing",
    "section": "",
    "text": "Data is saved by the IRTlib Player in raw data archives per session (i.e. per test run with a Study). The raw data archives are ZIP archives whose file names correspond to the user name or the Universally Unique Identifier (UUID). Deviations from this scheme are possible if a raw data archive with this file name already existed at the time of saving. In this case, the data is not overwritten by the IRTlib Player, but a suffix _1, _2, … is appended until the file name can be used.\n\nOffline IRTlib Player: If not configured otherwise, the results data are saved in the directory Temp/{Study-Name}/Results. The raw data archives are created when a session is ended, i.e. the last defined CBA ItemBuilder-Task is exited with NEXT_TASK. It is no longer possible to continue the session that has been started, as may be necessary for instance in the event of a computer crash, after the raw data archives have been created.\n\n\nThe same applies if the offline version of the IRTlib Player is used as a local server. The raw data archives are saved in the Temp/{Study name}/Results directory after test processing.\n\n\nThe collection of data from the offline IRTlib Players corresponds to the collection of the raw data archives that are collected on the various devices.\n\n\n\n\n\n\n\nNote\n\n\n\nAs the offline IRTlib Players are not connected to each other, identical login data can be created in parallel in different IRTlib Players, depending on the login mode. After data collection, the raw data archives must therefore be merged with care and, if necessary, separated by subfolders.\n\n\n\nOnline IRTlib Player: Unless configured otherwise, the online player collects the data in the volume that is configured for the results data (see /app/results in docker-compse.yml file). Each session is stored there in a separate subdirectory and can be downloaded by administrators who have access to the volume (!).\n\nIf an API-key is defined for data access, the download of the result data can also be carried out via the R package LogFSM.\n\n\nTo do this, the R package can first be installed (once) with the following call:\n\nsource(\"http://logfsm.com/latest\")\n\nThe raw data archives can then be downloaded using the following R script:\n\n\nlibrary(LogFSM)\n\nif (!dir.exists(paste0(getwd(),\"/in/\")))\n  dir.create(paste0(getwd(),\"/in/\"))\n\nif (!dir.exists(paste0(getwd(),\"/out/\")))\n  dir.create(paste0(getwd(),\"/out/\"))\n\nSECRET_KEY &lt;- \"(your secret key)\"\nAPI_URL &lt;- \"(your API-URL)\"\n\nLogFSM::TransformToUniversalLogFormat(inputfolders = paste0(getwd(),\"/in/\"),\n                              inputformat = \"irtlibv01a\", \n                              zcsvoutput = paste0(getwd(),\"/out/data_csv.zip\"),  \n                              stataoutput = paste0(getwd(),\"/out/data_dta.zip\"),\n                              spssoutput = paste0(getwd(),\"/out/data_sav.zip\"),\n                              key = SECRET_KEY,\n                              web = API_URL, \n                              outputtimestampformatstring=\"dd.MM.yyyy HH:mm:ss.fff\")\n\nresults &lt;- read.csv(unz(paste0(getwd(),\"/out/data_csv.zip\"), \"Results.csv\"),\n                    sep=\";\", encoding = \"UTF-8\")\n\nData retrieval and conversion of the data with LogFSM\n\nBy calling the function TransformToUniversalLogFormat from the package LogFSM, the data is downloaded and stored in the specified directory infolders if an API key (key) and an API url (web) are passed.\n\n\n\n\n\n\nNote on SECRET_KEY and API_URL\n\n\n\n\n\nThe value for SECRET_KEY must correspond to the entry that was defined as ExternalExportKey in the appsettings.json when configuring the Docker image, see section Online-Version (Docker).\nThe value for the API_URL is formed according to the following scheme: https://{U}/{S}/api/session/\n\n{U} is the URL of the IRTlib Player\n{S} is the identifier of the study\n\n\n\n\nThe function TransformToUniversalLogFormat from the package LogFSM (or analogue to the command line tool described below) can also be used to read out already existing local raw data archives.\n\n\n\nThe application TransformToUniversalLogFormat used for data retrieval and data conversion via LogFSM is available as a console application from the Releases section of https://github.com/kroehne/LogFSM/.\nData retrieval and data transformation can also be performed without R.\n\n\n\n\n\n\n\nIn development\n\n\n\nA certified version of TransformToUniversalLogFormat for Apple is currently under development.\n\n\n\n\n\nIf the data was retrieved via LogFSM from an online IRTlib Player or collected offline, it is stored in a directory at the end. Per session (i.e. per person or person x time) as a raw data archive.\nThe function TransformToUniversalLogFormat in LogFSM or via the command line can also be used to read the raw data archives from a directory and extract the result data:\n\n\nlibrary(LogFSM)\n\nif (!dir.exists(paste0(getwd(),\"/out/\")))\n  dir.create(paste0(getwd(),\"/out/\"))\n\nLogFSM::TransformToUniversalLogFormat(inputfolders = paste0(getwd(),\"/in/\"),\n                              inputformat = \"irtlibv01a\", \n                              zcsvoutput = paste0(getwd(),\"/out/data_csv.zip\"),  \n                              stataoutput = paste0(getwd(),\"/out/data_dta.zip\"),\n                              spssoutput = paste0(getwd(),\"/out/data_sav.zip\"),\n                              outputtimestampformatstring=\"dd.MM.yyyy HH:mm:ss.fff\")\n\nresults &lt;- read.csv(unz(paste0(getwd(),\"/out/data_csv.zip\"), \"Results.csv\"),\n                    sep=\";\", encoding = \"UTF-8\")\n\n\n\n\n\nConverting the data with TransformToUniversalLogFormat in LogFSM or via the command line converts the collected log data, which is provided by the CBA ItemBuilder-Tasks, into the following formats:\n\nFlat and Sparse Log-Data Table: A large table (as CSV, Stata, SPSS) with one row per event. As the event-specific attributes (i.e. the various additional information available from an event) are distributed across many columns, which are only filled for each event type, this table is flat, but can also be very holey.\nUniversal log format: Alternatively, the ZIP archives created by LogFSM or the command line tool TransformToUniversalLogFormat also contain individual data record tables for each event type. The event-specific attributes in these tables are less holey (i.e. they only contain missing values for optional attributes) and can be combined into a Flat and Sparse Log-Data Table if required.\nXES (eXtensible Event Stream): The log data can also be converted to the standardised XML format (https://xes-standard.org/).\n\n\n\n\n\n\n\nNote on timestamps\n\n\n\nThe timestamps collected with the IRTlib software are in UTC format (Coordinated Universal Time).\n\n\n\n\n\nThe raw data archives contain the following files:\n\nTrace.json: Log data (Traces) as supplied by the CBA ItemBuilder-Runtime, together with the context from the IRTlib Player.\n\n\nThe file contains the following structure, separated by commas. The file is not a valid JSON until the last comma is removed and a [ before and a ] after the content is inserted.\n\n\nThe entry Trace contains the log data (Traces) in packets (as supplied by the CBA ItemBuilder-Runtime) quoted (i.e. \" is displayed as \\u0022). The TraceId is a counter which counts the transmitted packets. Timestamp is the timestamp of the transmission. SessionId is the user name or the UUID (PersonIdentifier). The Context provides a reference to the assessment content (Element) via the name of the CBA ItemBuilder project, Task and Scope. The information on the IRTlib Player used is stored under Assemblies and StudyRevision refers to the Revision of a (published) Study.\n\n{\n    \"Trace\": \"(TRACE-JSON)\",\n    \"TraceId\": 1,\n    \"Timestamp\": \"2023-12-04T20:53:06.297Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n    },\n    \"Assemblies\": [\n        {\n            \"Name\": \"TestApp.Player.Desktop\",\n            \"Version\": \"(APPLICATION VERSION)\",\n            \"GitHash\": \"(APPLICATION BUILD HASH)\"\n        }\n    ],\n    \"StudyRevision\": \"(STUDY REVISION)\"\n},\n\nSnapshot.json: Snapshot data as supplied by the CBA ItemBuilder-Runtime, together with the context from the IRTlib Player.\n\n\nThe file contains the following structure, separated by commas. The file is not a valid JSON until the last comma is removed and a [ before and a ] after the content is inserted.\n\n\nThe Snapshot entry contains the snapshot information (as supplied by the CBA ItemBuilder-Runtime) quoted (i.e. \" is displayed as \\u0022). The ContextFlag indicates how the CBA ItemBuilder-Task was exited (NextTask, PreviousTask or Cancel).  Timestamp is the timestamp of the transmission. SessionId is the user name or the UUID (PersonIdentifier). The Context provides a reference to the assessment content (Element) via the name of the CBA ItemBuilder project, Task and Scope. The information on the IRTlib Player used is stored under Assemblies and StudyRevision refers to the Revision of a (published) Study.\n\n\n{\n    \"Snapshot\": \"(SNAPSHOT-JSON)\",\n    \"ContextFlag\": \"NextTask\",\n    \"ContextScope\": 0,\n    \"Timestamp\": \"2023-12-04T20:53:06.497Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n    },\n    \"Assemblies\": null,\n    \"StudyRevision\": null\n},\n\nItemScore.json: Scoring information (as supplied by CBA ItemBuilder-Runtime).\n\n\nThe file contains the following structure, separated by a comma. The file is not a valid JSON until the last comma is removed and a [ before and a ] after the content is inserted.\n\n\nThe ItemScore entry contains the ItemScore (as supplied by the CBA ItemBuilder-Runtime) quoted (i.e. \" is displayed as \\u0022).The ContextFlag specifies how the CBA ItemBuilder-Task was exited (NextTask, PreviousTask or Cancel).  Timestamp is the timestamp of the transmission. SessionId is the user name or the UUID (PersonIdentifier). The Context provides a reference to the assessment content (Element) via the name of the CBA ItemBuilder project, Task and Scope. The information on the IRTlib Player used is stored under Assemblies and StudyRevision refers to the Revision of a (published) Study.\n\n{\n    \"ItemScore\": \"(SCORING-JSON)\",\n    \"ContextFlag\": \"NextTask\",\n    \"ContextScope\": 0,\n    \"Timestamp\": \"2023-12-04T20:53:06.474Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n     },\n    \"Assemblies\": [\n        {\n            \"Name\": \"TestApp.Player.Desktop\",\n            \"Version\": \"(APPLICATION VERSION)\",\n            \"GitHash\": \"(APPLICATION BUILD HASH)\"\n        }\n    ],\n    \"StudyRevision\": \"(STUDY REVISION)\"\n},\n\nSession.json: The file contains data of the IRTlib Player, which describe the execution of the Session.\nLog.json: Log events of the IRTlib Player (contains log information for processing the Blockly routing).\nbrowser.log: Console output collected during the processing of tasks in the browser (unstructured text, for developers).\nserver.log: Log output from the server of the IRTlib Player (unstructured text, for developers)\nKeyboard.json: Keyboard input and timestamps.\nMonitoring.json: Copy of the monitoring file that was created."
  },
  {
    "objectID": "data-collection-post-processing.html#data-preparation",
    "href": "data-collection-post-processing.html#data-preparation",
    "title": "Datenerhebung: Datenaufbereitung / Data Collection: Data Post-Processing",
    "section": "",
    "text": "Data is saved by the IRTlib Player in raw data archives per session (i.e. per test run with a Study). The raw data archives are ZIP archives whose file names correspond to the user name or the Universally Unique Identifier (UUID). Deviations from this scheme are possible if a raw data archive with this file name already existed at the time of saving. In this case, the data is not overwritten by the IRTlib Player, but a suffix _1, _2, … is appended until the file name can be used.\n\nOffline IRTlib Player: If not configured otherwise, the results data are saved in the directory Temp/{Study-Name}/Results. The raw data archives are created when a session is ended, i.e. the last defined CBA ItemBuilder-Task is exited with NEXT_TASK. It is no longer possible to continue the session that has been started, as may be necessary for instance in the event of a computer crash, after the raw data archives have been created.\n\n\nThe same applies if the offline version of the IRTlib Player is used as a local server. The raw data archives are saved in the Temp/{Study name}/Results directory after test processing.\n\n\nThe collection of data from the offline IRTlib Players corresponds to the collection of the raw data archives that are collected on the various devices.\n\n\n\n\n\n\n\nNote\n\n\n\nAs the offline IRTlib Players are not connected to each other, identical login data can be created in parallel in different IRTlib Players, depending on the login mode. After data collection, the raw data archives must therefore be merged with care and, if necessary, separated by subfolders.\n\n\n\nOnline IRTlib Player: Unless configured otherwise, the online player collects the data in the volume that is configured for the results data (see /app/results in docker-compse.yml file). Each session is stored there in a separate subdirectory and can be downloaded by administrators who have access to the volume (!).\n\nIf an API-key is defined for data access, the download of the result data can also be carried out via the R package LogFSM.\n\n\nTo do this, the R package can first be installed (once) with the following call:\n\nsource(\"http://logfsm.com/latest\")\n\nThe raw data archives can then be downloaded using the following R script:\n\n\nlibrary(LogFSM)\n\nif (!dir.exists(paste0(getwd(),\"/in/\")))\n  dir.create(paste0(getwd(),\"/in/\"))\n\nif (!dir.exists(paste0(getwd(),\"/out/\")))\n  dir.create(paste0(getwd(),\"/out/\"))\n\nSECRET_KEY &lt;- \"(your secret key)\"\nAPI_URL &lt;- \"(your API-URL)\"\n\nLogFSM::TransformToUniversalLogFormat(inputfolders = paste0(getwd(),\"/in/\"),\n                              inputformat = \"irtlibv01a\", \n                              zcsvoutput = paste0(getwd(),\"/out/data_csv.zip\"),  \n                              stataoutput = paste0(getwd(),\"/out/data_dta.zip\"),\n                              spssoutput = paste0(getwd(),\"/out/data_sav.zip\"),\n                              key = SECRET_KEY,\n                              web = API_URL, \n                              outputtimestampformatstring=\"dd.MM.yyyy HH:mm:ss.fff\")\n\nresults &lt;- read.csv(unz(paste0(getwd(),\"/out/data_csv.zip\"), \"Results.csv\"),\n                    sep=\";\", encoding = \"UTF-8\")\n\nData retrieval and conversion of the data with LogFSM\n\nBy calling the function TransformToUniversalLogFormat from the package LogFSM, the data is downloaded and stored in the specified directory infolders if an API key (key) and an API url (web) are passed.\n\n\n\n\n\n\nNote on SECRET_KEY and API_URL\n\n\n\n\n\nThe value for SECRET_KEY must correspond to the entry that was defined as ExternalExportKey in the appsettings.json when configuring the Docker image, see section Online-Version (Docker).\nThe value for the API_URL is formed according to the following scheme: https://{U}/{S}/api/session/\n\n{U} is the URL of the IRTlib Player\n{S} is the identifier of the study\n\n\n\n\nThe function TransformToUniversalLogFormat from the package LogFSM (or analogue to the command line tool described below) can also be used to read out already existing local raw data archives.\n\n\n\nThe application TransformToUniversalLogFormat used for data retrieval and data conversion via LogFSM is available as a console application from the Releases section of https://github.com/kroehne/LogFSM/.\nData retrieval and data transformation can also be performed without R.\n\n\n\n\n\n\n\nIn development\n\n\n\nA certified version of TransformToUniversalLogFormat for Apple is currently under development.\n\n\n\n\n\nIf the data was retrieved via LogFSM from an online IRTlib Player or collected offline, it is stored in a directory at the end. Per session (i.e. per person or person x time) as a raw data archive.\nThe function TransformToUniversalLogFormat in LogFSM or via the command line can also be used to read the raw data archives from a directory and extract the result data:\n\n\nlibrary(LogFSM)\n\nif (!dir.exists(paste0(getwd(),\"/out/\")))\n  dir.create(paste0(getwd(),\"/out/\"))\n\nLogFSM::TransformToUniversalLogFormat(inputfolders = paste0(getwd(),\"/in/\"),\n                              inputformat = \"irtlibv01a\", \n                              zcsvoutput = paste0(getwd(),\"/out/data_csv.zip\"),  \n                              stataoutput = paste0(getwd(),\"/out/data_dta.zip\"),\n                              spssoutput = paste0(getwd(),\"/out/data_sav.zip\"),\n                              outputtimestampformatstring=\"dd.MM.yyyy HH:mm:ss.fff\")\n\nresults &lt;- read.csv(unz(paste0(getwd(),\"/out/data_csv.zip\"), \"Results.csv\"),\n                    sep=\";\", encoding = \"UTF-8\")\n\n\n\n\n\nConverting the data with TransformToUniversalLogFormat in LogFSM or via the command line converts the collected log data, which is provided by the CBA ItemBuilder-Tasks, into the following formats:\n\nFlat and Sparse Log-Data Table: A large table (as CSV, Stata, SPSS) with one row per event. As the event-specific attributes (i.e. the various additional information available from an event) are distributed across many columns, which are only filled for each event type, this table is flat, but can also be very holey.\nUniversal log format: Alternatively, the ZIP archives created by LogFSM or the command line tool TransformToUniversalLogFormat also contain individual data record tables for each event type. The event-specific attributes in these tables are less holey (i.e. they only contain missing values for optional attributes) and can be combined into a Flat and Sparse Log-Data Table if required.\nXES (eXtensible Event Stream): The log data can also be converted to the standardised XML format (https://xes-standard.org/).\n\n\n\n\n\n\n\nNote on timestamps\n\n\n\nThe timestamps collected with the IRTlib software are in UTC format (Coordinated Universal Time).\n\n\n\n\n\nThe raw data archives contain the following files:\n\nTrace.json: Log data (Traces) as supplied by the CBA ItemBuilder-Runtime, together with the context from the IRTlib Player.\n\n\nThe file contains the following structure, separated by commas. The file is not a valid JSON until the last comma is removed and a [ before and a ] after the content is inserted.\n\n\nThe entry Trace contains the log data (Traces) in packets (as supplied by the CBA ItemBuilder-Runtime) quoted (i.e. \" is displayed as \\u0022). The TraceId is a counter which counts the transmitted packets. Timestamp is the timestamp of the transmission. SessionId is the user name or the UUID (PersonIdentifier). The Context provides a reference to the assessment content (Element) via the name of the CBA ItemBuilder project, Task and Scope. The information on the IRTlib Player used is stored under Assemblies and StudyRevision refers to the Revision of a (published) Study.\n\n{\n    \"Trace\": \"(TRACE-JSON)\",\n    \"TraceId\": 1,\n    \"Timestamp\": \"2023-12-04T20:53:06.297Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n    },\n    \"Assemblies\": [\n        {\n            \"Name\": \"TestApp.Player.Desktop\",\n            \"Version\": \"(APPLICATION VERSION)\",\n            \"GitHash\": \"(APPLICATION BUILD HASH)\"\n        }\n    ],\n    \"StudyRevision\": \"(STUDY REVISION)\"\n},\n\nSnapshot.json: Snapshot data as supplied by the CBA ItemBuilder-Runtime, together with the context from the IRTlib Player.\n\n\nThe file contains the following structure, separated by commas. The file is not a valid JSON until the last comma is removed and a [ before and a ] after the content is inserted.\n\n\nThe Snapshot entry contains the snapshot information (as supplied by the CBA ItemBuilder-Runtime) quoted (i.e. \" is displayed as \\u0022). The ContextFlag indicates how the CBA ItemBuilder-Task was exited (NextTask, PreviousTask or Cancel).  Timestamp is the timestamp of the transmission. SessionId is the user name or the UUID (PersonIdentifier). The Context provides a reference to the assessment content (Element) via the name of the CBA ItemBuilder project, Task and Scope. The information on the IRTlib Player used is stored under Assemblies and StudyRevision refers to the Revision of a (published) Study.\n\n\n{\n    \"Snapshot\": \"(SNAPSHOT-JSON)\",\n    \"ContextFlag\": \"NextTask\",\n    \"ContextScope\": 0,\n    \"Timestamp\": \"2023-12-04T20:53:06.497Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n    },\n    \"Assemblies\": null,\n    \"StudyRevision\": null\n},\n\nItemScore.json: Scoring information (as supplied by CBA ItemBuilder-Runtime).\n\n\nThe file contains the following structure, separated by a comma. The file is not a valid JSON until the last comma is removed and a [ before and a ] after the content is inserted.\n\n\nThe ItemScore entry contains the ItemScore (as supplied by the CBA ItemBuilder-Runtime) quoted (i.e. \" is displayed as \\u0022).The ContextFlag specifies how the CBA ItemBuilder-Task was exited (NextTask, PreviousTask or Cancel).  Timestamp is the timestamp of the transmission. SessionId is the user name or the UUID (PersonIdentifier). The Context provides a reference to the assessment content (Element) via the name of the CBA ItemBuilder project, Task and Scope. The information on the IRTlib Player used is stored under Assemblies and StudyRevision refers to the Revision of a (published) Study.\n\n{\n    \"ItemScore\": \"(SCORING-JSON)\",\n    \"ContextFlag\": \"NextTask\",\n    \"ContextScope\": 0,\n    \"Timestamp\": \"2023-12-04T20:53:06.474Z\",\n    \"SessionId\": \"(SESSION-ID OR USERNAME)\",\n    \"Context\": {\n        \"Item\": \"(PROJECT NAME)\",\n        \"Task\": \"(TASK NAME)\",\n        \"Scope\": \"(SCOPE)\",\n        \"Preview\": \"\"\n     },\n    \"Assemblies\": [\n        {\n            \"Name\": \"TestApp.Player.Desktop\",\n            \"Version\": \"(APPLICATION VERSION)\",\n            \"GitHash\": \"(APPLICATION BUILD HASH)\"\n        }\n    ],\n    \"StudyRevision\": \"(STUDY REVISION)\"\n},\n\nSession.json: The file contains data of the IRTlib Player, which describe the execution of the Session.\nLog.json: Log events of the IRTlib Player (contains log information for processing the Blockly routing).\nbrowser.log: Console output collected during the processing of tasks in the browser (unstructured text, for developers).\nserver.log: Log output from the server of the IRTlib Player (unstructured text, for developers)\nKeyboard.json: Keyboard input and timestamps.\nMonitoring.json: Copy of the monitoring file that was created."
  },
  {
    "objectID": "translation.html",
    "href": "translation.html",
    "title": "Translation",
    "section": "",
    "text": "Note\n\n\n\nThe software has been designed so that it can also be translated into other languages. If you would like to support us in this, please contact us.\n\n\n\n\n\n\nThis editor can be used to created localized resx-files for the application: ResXResourceManager\n\nThe source file can be found here: (TODO)\n\nHelp (included in the application) is generated using quarto useing all markdown files starting with InlineHelp_* in this folder.\n\nHelp.de-DE.resx\nHelp.en-US.resx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMarkdown (DEU)\nen-US\nde-DEU\n…\n\n\n\n\n*IRTlib Player*\nIRTlib Player\nIRTlib Player\n\n\n\n*IRTlib Editor*\nIRTlib Editor\nIRTlib Editor\n\n\n\n*IRTlib Software*\nIRTlib Software\nIRTlib Software\n\n\n\nOffline-*IRTlib Player*\nOffline-IRTlib Player\nOffline-IRTlib Player\n\n\n\nOnline-*IRTlib Player*\nOnline-IRTlib Player\nOnline-IRTlib Player\n\n\n\n*Studie*\nStudy\nStudie\n\n\n\n*Erhebungsteil*\nStudy Part \nErhebungsteil\n\n\n\n*Einstellungen*\nSettings\nEinstellungen\n\n\n\n*Testleitermenü*\nSession Menu\nTestleitermenü\n\n\n\n*Bearbeitungszeit*\nCompletion time\nBearbeitungszeit\n\n\n\n*Bearbeitungszeit begrenzen*\nRestrict time allowed\nBearbeitungszeit begrenzen\n\n\n\n*Studienversion*\nStudy version\nStudienversion\n\n\n\n*Revision*\nRevision\nRevision\n\n\n\n*Vorspann-Item(s)*\nProlog Item(s)\nVorspann-Item(s)\n\n\n\n*Nachspann-Items(s)*\nEpilog Item(s)\nNachspann-Items(s)\n\n\n\n*Testleiter*\nTest Administrator\nTestleiter\n\n\n\n*CBA ItemBuilder*-Items\nCBA ItemBuilder-Items\nCBA ItemBuilder-Items\n\n\n\n*Docker*-Container\nDocker-Container\nDocker-Container"
  },
  {
    "objectID": "translation.html#help-requested",
    "href": "translation.html#help-requested",
    "title": "Translation",
    "section": "",
    "text": "Note\n\n\n\nThe software has been designed so that it can also be translated into other languages. If you would like to support us in this, please contact us."
  },
  {
    "objectID": "translation.html#current-translations",
    "href": "translation.html#current-translations",
    "title": "Translation",
    "section": "",
    "text": "This editor can be used to created localized resx-files for the application: ResXResourceManager\n\nThe source file can be found here: (TODO)\n\nHelp (included in the application) is generated using quarto useing all markdown files starting with InlineHelp_* in this folder.\n\nHelp.de-DE.resx\nHelp.en-US.resx"
  },
  {
    "objectID": "translation.html#terminology-and-standardizing-the-notation",
    "href": "translation.html#terminology-and-standardizing-the-notation",
    "title": "Translation",
    "section": "",
    "text": "Markdown (DEU)\nen-US\nde-DEU\n…\n\n\n\n\n*IRTlib Player*\nIRTlib Player\nIRTlib Player\n\n\n\n*IRTlib Editor*\nIRTlib Editor\nIRTlib Editor\n\n\n\n*IRTlib Software*\nIRTlib Software\nIRTlib Software\n\n\n\nOffline-*IRTlib Player*\nOffline-IRTlib Player\nOffline-IRTlib Player\n\n\n\nOnline-*IRTlib Player*\nOnline-IRTlib Player\nOnline-IRTlib Player\n\n\n\n*Studie*\nStudy\nStudie\n\n\n\n*Erhebungsteil*\nStudy Part \nErhebungsteil\n\n\n\n*Einstellungen*\nSettings\nEinstellungen\n\n\n\n*Testleitermenü*\nSession Menu\nTestleitermenü\n\n\n\n*Bearbeitungszeit*\nCompletion time\nBearbeitungszeit\n\n\n\n*Bearbeitungszeit begrenzen*\nRestrict time allowed\nBearbeitungszeit begrenzen\n\n\n\n*Studienversion*\nStudy version\nStudienversion\n\n\n\n*Revision*\nRevision\nRevision\n\n\n\n*Vorspann-Item(s)*\nProlog Item(s)\nVorspann-Item(s)\n\n\n\n*Nachspann-Items(s)*\nEpilog Item(s)\nNachspann-Items(s)\n\n\n\n*Testleiter*\nTest Administrator\nTestleiter\n\n\n\n*CBA ItemBuilder*-Items\nCBA ItemBuilder-Items\nCBA ItemBuilder-Items\n\n\n\n*Docker*-Container\nDocker-Container\nDocker-Container"
  },
  {
    "objectID": "preparation-overview.html",
    "href": "preparation-overview.html",
    "title": "Vorbereitung: Übersicht / Preparation: Overview",
    "section": "",
    "text": "The preparation of a computer-based assessment based on CBA ItemBuilder content begins with the use of the IRTlib Editor to create a study configuration. This usually involves the following steps:\n\n\n\n\n\n\nOptional: Using a Runtime for CBA ItemBuilder before version 9.9?\n\n\n\n\n\n\nRequirement: Check the availability of the Runtime. The IRTlib Editor can be used to prepare assessments with content created using the CBA ItemBuilder. To use CBA ItemBuilder Tasks stored in project files, a runtime (i.e. the files main.*.js and main.*.css) is required in the version that corresponds exactly to the version of the CBA ItemBuilder used to create the items (e.g. 9.9.0). Before using the IRTLib-Editor, make sure that the required Runtime is included or import the runtime files (see section Settings for details).\n\nNote: When using CBA ItemBuilder items from version 9.9, this step is generally not necessary.\n\n\n\n\nCreating a new Study: The IRTlib Editor is used to configure so-called Studies. The versions of studies can be tracked in the editor, studies can be published there (i.e. sealed for data collections). To start creating content with the IRTlib Editor, a study must first be created (see section Studies for‚ details).\n\n\n\n\n\n\n\nNote: Creating a Study is always necessary.\n\n\n\n\n\nNote that at least one Study must be defined in the IRTlib Editor before a study configuration can be used for data collection with an IRTlib Player.\n\n\n\n\nDefine Basic Configurations for Study (Info): Basic configurations related to the content of a prepared study include the study name and description, login mode, display configuration, test administrator menu, and how to proceed after completing all content defined in a study (see Studies section for more details).\nCreating a new Survey Part: Each Study consists of one or more Survey Parts. Survey Parts are considered to be building blocks of assessments that are administered together, such as items from a particular domain. Survey Parts of type CBA ItemBuilder can be used to administer CBA ItemBuilder tasks in a linear sequence or with Blockly-based routing.\n\n\n\n\n\n\n\nNote: Creating a Survey Part is always necessary.\n\n\n\n\n\nNote that each Study requires at least one Survey Part defined in the IRTlib Editor before a Study configuration can be used for data collection with an IRTlib Player.\n\n\n\n\nConfigure basic settings for survey part (Info): A Survey Part of type CBA ItemBuilder is based on a set of CBA ItemBuilder-Tasks. Each CBA ItemBuilder-project file requires at least one task, but projects with multiple tasks are also supported. If CBA ItemBuilder content with a common time limit is to be administered across tasks, assessment sections allow the assignment of tasks to a structure that distinguishes assessment content that is administered before a time-limited section (e.g. instructions, in the task section). e.g. instructions, in the section preparation-parts), content that is administered after a time-limited section (e.g. acknowledgements, in the section post-parts) and tasks with limited time in between (items, see section [preparation-parts.qmd]).\nAdd Items: To finalise the definition of a Survey Part, the CBA ItemBuilder project files must be imported into the Items section. By default, it is assumed that the order of the CBA ItemBuilder-Tasks is linear. However, if Routing is enabled for a study section, the Blockly-based sequence definition can be used to implement different test designs (e.g. multiple booklets, multi-stage tests, etc.).\n\n\n\nFor the use of the IRTlib Editor, a programme help is integrated directly into the application, which can be displayed via the small ? symbol in the top right-hand corner.\n\n\n\nExample of the IRTlib Editor with embedded help\n\n\n\n\n\n\n\n\nEmbedded Programm Help\n\n\n\nThe contents of these help pages from the IRTlib Editor are integrated into this IRTlib Documentation and are always displayed in this frame with the title Embedded Programme Help.\n\n\n\n\n\nThe IRTlib Software is required to display the assessment content created with the CBA ItemBuilder and to use CBA ItemBuilder content for data collections. The project files (ZIP archives) that can be created with the CBA ItemBuilder must be available for this.\n\n\nEach CBA ItemBuilder project file must define at least one task. Only tasks can be used in the IRTlib software. It is easy to check that a task is fully defined in the Preview of the CBA ItemBuilder:\n\n\n\nExample from CBA ItemBuilder to request a Preview for a Task\n\n\n\n\n\n\n\n\nThe IRTlib software requires defined tasks.\n\n\n\nAssessment content can be assembled from individual Tasks using the IRTlib Software. The sequence of Tasks can be defined statically as a linear sequence or as a programmed sequence in Blockly. No individual pages within CBA ItemBuilder-Tasks can be controlled from the IRTlib Software.\n\n\nCBA ItemBuilder-Project files which can only be displayed via the Project or Page option in the Preview cannot be used in the IRTlib Software.\n\n\n\nThe Preview of the CBA ItemBuilder can also be used to check whether the assessment contents are displayed in the desired scaling, which can be set under Scaling Options, according to the requirements.\n\n\n\nSettings for Scaling Options from CBA ItemBuilder-Preview\n\n\nSettings similar to Preview can be defined in the IRTlib Editor for the display settings of a Study (see section Studies).\n\n\n\nThe IRTlib software is designed to collect data with the help of CBA ItemBuilder-Task. What result variables are saved from the processing of a task can be defined by item authors in the scoring definition of a task.\n\n\n\n\n\n\nThe scoring must already be defined in the CBA ItemBuilder.\n\n\n\nThe result variables defined as Classes are saved from the processing of Tasks, the values of which can either be individual Hits or the transfer of information using the so-called ResultText operator in the CBA ItemBuilder.\n\n\nUsing the built-in Scoring Debug Window, the scoring of individual CBA ItemBuider tasks should already be checked in the CBA ItemBuilder before the assessment contents are combined into studies with one or more survey parts using the IRTlib software. Further information on suggested checks is formulated in the section Deliveries Testing and Release.\n\n\n\n\n\n\nLog data is collected automatically.\n\n\n\nWithout further configuration, log data is automatically recorded in the assessment content created with the CBA ItemBuilder and collected via the IRTlib software.\n\n\n\n\n\nThe assessment content created with the CBA ItemBuilder can contain multimedia content (images, videos, audio files). Images and videos are displayed in a size that is used in the corresponding component of the CBA ItemBuilder in the Page Editor. Images, videos and audio files are saved as resources in the project files as soon as they have been inserted via the Resource Browser. Unused resources remain in the project files.\n\n\n\n\n\n\nFile size of CBA ItemBuilder project files should be as small as possible\n\n\n\nThe file size of CBA ItemBuilder project files is particularly relevant for use in online deliveries and should be kept as small as possible.\n\n\nBefore using CBA ItemBuilder-project files, it is recommended to consider the following points:\n\nImages and videos only in the required size: Images and videos can be reduced to the size (width and height) in which they are actually used in CBA ItemBuilder-Projects without any loss of quality.\nCompress images if possible: Without changing the image size, images can often be further reduced in file size.\nCompress videos if possible: Without changing the video, videos can often be further reduced in file size.\nAudio not in the highest quality: If not necessary, audio files should be reduced in quality so that they still sound acceptable but are optimised in terms of transmission times.\nRemove unused resources: The CBA ItemBuilder provides a button in the Resource Browser to automatically remove unused resources. This function should be used at the end so that the project files do not contain any unnecessary resources.\n\nCareful handling of resources and optimisation of the file size of CBA ItemBuilder project files can be decisive for a smooth and trouble-free assessment, which can be delivered online with the IRTlib software and used, for example, via mobile devices with limited internet bandwidth."
  },
  {
    "objectID": "preparation-overview.html#embedded-programme-help",
    "href": "preparation-overview.html#embedded-programme-help",
    "title": "Vorbereitung: Übersicht / Preparation: Overview",
    "section": "",
    "text": "For the use of the IRTlib Editor, a programme help is integrated directly into the application, which can be displayed via the small ? symbol in the top right-hand corner.\n\n\n\nExample of the IRTlib Editor with embedded help\n\n\n\n\n\n\n\n\nEmbedded Programm Help\n\n\n\nThe contents of these help pages from the IRTlib Editor are integrated into this IRTlib Documentation and are always displayed in this frame with the title Embedded Programme Help."
  },
  {
    "objectID": "preparation-overview.html#preparation-of-cba-itembuilder-content",
    "href": "preparation-overview.html#preparation-of-cba-itembuilder-content",
    "title": "Vorbereitung: Übersicht / Preparation: Overview",
    "section": "",
    "text": "The IRTlib Software is required to display the assessment content created with the CBA ItemBuilder and to use CBA ItemBuilder content for data collections. The project files (ZIP archives) that can be created with the CBA ItemBuilder must be available for this.\n\n\nEach CBA ItemBuilder project file must define at least one task. Only tasks can be used in the IRTlib software. It is easy to check that a task is fully defined in the Preview of the CBA ItemBuilder:\n\n\n\nExample from CBA ItemBuilder to request a Preview for a Task\n\n\n\n\n\n\n\n\nThe IRTlib software requires defined tasks.\n\n\n\nAssessment content can be assembled from individual Tasks using the IRTlib Software. The sequence of Tasks can be defined statically as a linear sequence or as a programmed sequence in Blockly. No individual pages within CBA ItemBuilder-Tasks can be controlled from the IRTlib Software.\n\n\nCBA ItemBuilder-Project files which can only be displayed via the Project or Page option in the Preview cannot be used in the IRTlib Software.\n\n\n\nThe Preview of the CBA ItemBuilder can also be used to check whether the assessment contents are displayed in the desired scaling, which can be set under Scaling Options, according to the requirements.\n\n\n\nSettings for Scaling Options from CBA ItemBuilder-Preview\n\n\nSettings similar to Preview can be defined in the IRTlib Editor for the display settings of a Study (see section Studies).\n\n\n\nThe IRTlib software is designed to collect data with the help of CBA ItemBuilder-Task. What result variables are saved from the processing of a task can be defined by item authors in the scoring definition of a task.\n\n\n\n\n\n\nThe scoring must already be defined in the CBA ItemBuilder.\n\n\n\nThe result variables defined as Classes are saved from the processing of Tasks, the values of which can either be individual Hits or the transfer of information using the so-called ResultText operator in the CBA ItemBuilder.\n\n\nUsing the built-in Scoring Debug Window, the scoring of individual CBA ItemBuider tasks should already be checked in the CBA ItemBuilder before the assessment contents are combined into studies with one or more survey parts using the IRTlib software. Further information on suggested checks is formulated in the section Deliveries Testing and Release.\n\n\n\n\n\n\nLog data is collected automatically.\n\n\n\nWithout further configuration, log data is automatically recorded in the assessment content created with the CBA ItemBuilder and collected via the IRTlib software.\n\n\n\n\n\nThe assessment content created with the CBA ItemBuilder can contain multimedia content (images, videos, audio files). Images and videos are displayed in a size that is used in the corresponding component of the CBA ItemBuilder in the Page Editor. Images, videos and audio files are saved as resources in the project files as soon as they have been inserted via the Resource Browser. Unused resources remain in the project files.\n\n\n\n\n\n\nFile size of CBA ItemBuilder project files should be as small as possible\n\n\n\nThe file size of CBA ItemBuilder project files is particularly relevant for use in online deliveries and should be kept as small as possible.\n\n\nBefore using CBA ItemBuilder-project files, it is recommended to consider the following points:\n\nImages and videos only in the required size: Images and videos can be reduced to the size (width and height) in which they are actually used in CBA ItemBuilder-Projects without any loss of quality.\nCompress images if possible: Without changing the image size, images can often be further reduced in file size.\nCompress videos if possible: Without changing the video, videos can often be further reduced in file size.\nAudio not in the highest quality: If not necessary, audio files should be reduced in quality so that they still sound acceptable but are optimised in terms of transmission times.\nRemove unused resources: The CBA ItemBuilder provides a button in the Resource Browser to automatically remove unused resources. This function should be used at the end so that the project files do not contain any unnecessary resources.\n\nCareful handling of resources and optimisation of the file size of CBA ItemBuilder project files can be decisive for a smooth and trouble-free assessment, which can be delivered online with the IRTlib software and used, for example, via mobile devices with limited internet bandwidth."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home | IRTlib",
    "section": "",
    "text": "IRTlib is a software for the delivery of computer-based tests. The software consists of two components:\n\nIRTLib Editor: A software for test authors, which is used to configure Studies.\nIRTlib Player: A software for data collections, with which target persons work on tasks that are configured in the form of a Study.\n\nInstructions for installing and setting up both programmes for initial use can be found under Download & Installation.\n\n\n\nBefore using the IRTlib Software to configure and create deliveries, the assessment content (tasks, instructions, intermediate screens, etc.) must be created in the form of individual Tasks using the CBA ItemBuilder.\n\nThe CBA ItemBuilder can be downloaded here: www.itembuilder.de/software\nAn interactive documentation of the CBA ItemBuilder is available here: cba.itembuilder.de\n\nSuggested Citation:\n\nKroehne, U. (2023). Open Computer-based Assessment with the CBA ItemBuilder. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10359757\n\n\n\n\n\n\nCBA ItemBuilder Documentation (PDF)\n\n\n\n\n\n\n\nFor the use of the IRTlib software, a context-sensitive program help is stored directly in the application. The documentation with the embedded help is available online on this page and is also available as PDF.\nSuggested Citation:\n\nKroehne, U. (2023). IRTlib Documentation: Software for the administration and delivery of computer-based assessments [IRTlib Dokumentation: Software für die Verwaltung und Auslieferung computergestützter Assessments]. DIPF, Frankfurt am Main, Germany. https://doi.org/10.5281/zenodo.10441352\n\n\n\n\n\n\nIRTlib Software Documentation (PDF)\n\n\n\n\n\nThe development of the CBA ItemBuilder and the IRTlib Software is coordinated by the Centre for Technology-Based Assessment (TBA) at the DIPF | Leibniz Institute for Research and Information in Education."
  },
  {
    "objectID": "data-collection-overview.html",
    "href": "data-collection-overview.html",
    "title": "Datenerhebung: Übersicht / Data Collection: Overview",
    "section": "",
    "text": "Once a Study has been created and configured using the IRTlib Editor, a finalised Version of this configuration must be created. Versions seal and finalise all configurations and have a unique version number (referred to as a Revision). The use of Revisions makes the administration of data collections with the IRTlib Editor and IRTlib Player reproducible, as the revision number of a configuration is also saved in the data sets.\n\nCheck Configurations:Before finalising and sealing a version, it is suggested to check all settings again. The IRTlib Editor provides an additional Validation feature for this purpose.\nCreate Sealed Version: If no further changes are required, the version can be sealed. This is done by selecting the changes that have not yet been saved and clicking on the lock symbol in the IRTlib Editor in the Publish view, in which the Study revisions are displayed.\nExport version: Versions of studies that are available in the IRTlib Editor can be exported. It is necessary to export the configuration before it can be used with the IRTlib Player. When exporting, the complete study configuration including the imported CBA ItemBuilder content is downloaded as a ZIP archive.\nImport Study into IRTlib Player: Exported versions of studies from the IRTlib Editor can be imported into an IRTlib Player for use. There is an automatic mode for individual Studies. If several Studies are to be used simultaneously in one IRTlib Player, this can be configured manually.\nTesting the Study: Before the actual data collection can begin, each configuration should first be tested with synthetic test cases (i.e. systematically).\n\nIf problems are still detected in an exported study, it is possible to return to the preparation (see Preparation of studies and Preparation of survey parts), modify the study definition and the configuration of the test parts, create another sealed version and continue with the modified configuration."
  },
  {
    "objectID": "data-collection-overview.html#overview-steps-for-using-an-irtlib-player-for-data-collections",
    "href": "data-collection-overview.html#overview-steps-for-using-an-irtlib-player-for-data-collections",
    "title": "Datenerhebung: Übersicht / Data Collection: Overview",
    "section": "",
    "text": "Once a Study has been created and configured using the IRTlib Editor, a finalised Version of this configuration must be created. Versions seal and finalise all configurations and have a unique version number (referred to as a Revision). The use of Revisions makes the administration of data collections with the IRTlib Editor and IRTlib Player reproducible, as the revision number of a configuration is also saved in the data sets.\n\nCheck Configurations:Before finalising and sealing a version, it is suggested to check all settings again. The IRTlib Editor provides an additional Validation feature for this purpose.\nCreate Sealed Version: If no further changes are required, the version can be sealed. This is done by selecting the changes that have not yet been saved and clicking on the lock symbol in the IRTlib Editor in the Publish view, in which the Study revisions are displayed.\nExport version: Versions of studies that are available in the IRTlib Editor can be exported. It is necessary to export the configuration before it can be used with the IRTlib Player. When exporting, the complete study configuration including the imported CBA ItemBuilder content is downloaded as a ZIP archive.\nImport Study into IRTlib Player: Exported versions of studies from the IRTlib Editor can be imported into an IRTlib Player for use. There is an automatic mode for individual Studies. If several Studies are to be used simultaneously in one IRTlib Player, this can be configured manually.\nTesting the Study: Before the actual data collection can begin, each configuration should first be tested with synthetic test cases (i.e. systematically).\n\nIf problems are still detected in an exported study, it is possible to return to the preparation (see Preparation of studies and Preparation of survey parts), modify the study definition and the configuration of the test parts, create another sealed version and continue with the modified configuration."
  }
]